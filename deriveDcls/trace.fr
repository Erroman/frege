pos :: Position
pos = Pos
  { first = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
  , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
  }
clas :: QName
clas = TName (toJSON _ = "frege.prelude.PreludeIO") (toJSON _ = "JavaType")
forty :: Symbol
forty = SymT
        { nativ = Just "tests.comp.I332Java"
        , name = TName (toJSON _ = "tests.comp.Issue332") (toJSON _ = "I332Java")
        }
ctrs :: [Symbol]
instrho :: RhoT SName

-- frege/compiler/passes/Instances.fr:389
  deriveDcls pos clas forty ctrs instrho
= do
    ...  -- frege/compiler/passes/Instances.fr:399
    case clas of ...
= do
    g <- getST
    let dC = deriveClass pos clas forty ctrs instrho g
    case clas of
      TName ppp "JavaType"
         | inPrelude ppp g
         -- deriveInst内でも同じチェックをしておりTrueに評価されている
         = True = return (dC "JavaType")
= do
    g <- getST
    let dC = deriveClass pos clas forty ctrs instrho g
    return (dC "JavaType")
= do
    g <- getST
    let [NSX "Issue332", NSX "Prelude..."] = map fst $ each g.namespaces
    let dC = deriveClass pos clas forty ctrs instrho g
    let result
          = dC "JavaType"
          = deriveClass "JavaType" -- defined in deriveClass's where clause
          = deriveClass "Exceptional" -- defined in deriveClass's where clause
          = [ NatDcl{pos, vis=Public, name="javaClass",
                  txs = [(ForAll [] (RhoTau [] tapp), [])],
                  meth = fromMaybe "?" forty.nativ ++ ".class",
                  isPure = true, gargs = Nothing,
                  doc = Nothing}]
            where
                -- frege/compiler/passes/Instances.fr:367
                tapp = TApp pClass (TCon pos this)
                  where -- deriveClass's
                  baseToken = baseTokenAt pos.first
                            -- frege/compiler/types/Tokens.fr:93
                            = (Token CONID "PreludeBase" 1 0 0 []).{line = 8, col = 1, offset = 258}
                  pClass = TCon{pos, name = With1 baseToken pos.first.{tokid=CONID, value="Class"}
                this = case forty.name of ...
                     = let TName p b = forty.name
                       in
                       With1 pos.first.{tokid=CONID, value=x}
                             pos.first.{tokid=CONID, value=b}
                          where x = head [ s | (NSX s, ps) <- each g.namespaces, ps == p ]
                                  = "Issue332"
                     = With1 pos.first.{tokid=CONID, value="Issue332"}
                             pos.first.{tokid=CONID, value="I332Java"}
    return result
= do
    let tapp = TApp pClass (TCon pos this)
        baseToken = (Token CONID "PreludeBase" 1 0 0 []).{line = 8, col = 1, offset = 258}
        pClass = TCon{pos, name = With1 baseToken pos.first.{tokid=CONID, value="Class"}
        this = With1 pos.first.{tokid=CONID, value="Issue332"}
                     pos.first.{tokid=CONID, value="I332Java"}
    let results
          = [ NatDcl{pos, vis=Public, name="javaClass",
                  txs = [(ForAll [] (RhoTau [] tapp), [])],
                  meth = fromMaybe "?" forty.nativ ++ ".class",
                  isPure = true, gargs = Nothing,
                  doc = Nothing}]
    return results
= do
    let baseToken = (Token CONID "PreludeBase" 1 0 0 []).{line = 8, col = 1, offset = 258}
                  = Token { tokid = CONID, value = "PreludeBase", line = 8, col = 1, offset = 258, qual = [] }
        pClass = TCon{pos, name = With1 baseToken pos.first.{tokid=CONID, value="Class"}
               = TCon
                   { pos = Pos
                       { first = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                       , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                       }
                   , name = With1
                         Token { tokid = CONID, value = "PreludeBase", line = 8, col = 1, offset = 258, qual = [] }
                       $ Pos
                         { first = Token { tokid = CONID, value = "Class", line = 8, col = 1, offset = 258, qual = [] }
                         , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                         }
                   }
        this = With1 pos.first.{tokid=CONID, value="Issue332"}
                     pos.first.{tokid=CONID, value="I332Java"}
             = With1
                 (Pos
                  { first = Token { tokid = CONID, value = "Issue332", line = 8, col = 1, offset = 258, qual = [] }
                  , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                  })
                 (Pos
                  { first = Token { tokid = CONID, value = "I332Java", line = 8, col = 1, offset = 258, qual = [] }
                  , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                  })
        tapp = TApp pClass (TCon pos this)
             = TApp
                 (TCon
                   { pos = Pos
                       { first = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                       , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                       }
                   , name = With1
                         Token { tokid = CONID, value = "PreludeBase", line = 8, col = 1, offset = 258, qual = [] }
                       $ Pos
                         { first = Token { tokid = CONID, value = "Class", line = 8, col = 1, offset = 258, qual = [] }
                         , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                         }
                   })
                 (TCon
                    (Pos
                     { first = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                     , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                     })
                    (With1
                       (Pos
                        { first = Token { tokid = CONID, value = "Issue332", line = 8, col = 1, offset = 258, qual = [] }
                        , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                        })
                       (Pos
                        { first = Token { tokid = CONID, value = "I332Java", line = 8, col = 1, offset = 258, qual = [] }
                        , last  = Token { tokid = DERIVE, value = "derive", line = 8, col = 1, offset = 258, qual = [] }
                        })))
    let result
          = NatDcl{pos, vis=Public, name="javaClass",
                txs = [(ForAll [] (RhoTau [] tapp), [])],
                meth = fromMaybe "?" forty.nativ ++ ".class",
                isPure = true, gargs = Nothing,
                doc = Nothing}
    let wanttoknow = tapp -- matches with deriveInst-dcls.json
    return result
