--begin top
{- 

    Copyright Â© 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. 
        
        Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

     -}

{--
    This is the grammar for the Frege language.
-}
module frege.compiler.grammar.Frege where

    {-
       !!! DO NOT CHANGE FILE Frege.fr, IT HAS BEEN CREATED AUTOMATICALLY !!!
    -}

import frege.Prelude hiding(<+>, break)

import frege.control.monad.State(State)

import Data.TreeMap(insert)
import Data.List as DL(elemBy)

import  Compiler.enums.Flags 
import  Compiler.enums.TokenID(TokenID)
import  Compiler.enums.Visibility
import  Compiler.enums.Literals
import  Compiler.enums.CaseKind

import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.Kinds
import  Compiler.types.SNames
import  Compiler.types.Packs(magicPack)
import  Compiler.types.ImportDetails
import  Compiler.types.Types
import  Compiler.types.SourceDefinitions
import  Compiler.types.ConstructorField
import  Compiler.types.Global as G

import  Compiler.common.Mangle
import  Compiler.common.Errors as E()
import  Compiler.common.Resolve as R(enclosed)

import Lib.PP (group, break, msgdoc)
import frege.compiler.common.Tuples as T(tuple)
import frege.compiler.common.Desugar

import frege.compiler.grammar.Lexer (substQQ)


-- this will speed up the parser by a factor of 70, cause yyprods comes out monotyped.
private yyprod1 :: [(Int, YYsi ParseResult Token)]
    -> StG (YYsi ParseResult Token, [(Int, YYsi ParseResult Token)])


{-
 The following definitions are not strictly necessary, but they help
 to avoid truly crazy type signatures for parse stack items and
 considerably speed up type checking in giving the result types of
 certain nonterminal reduction rules.
 Note that you cannot lie about the type of nonterminal reduction rules.
 Note that types like "Maybe x" on the RHS must be given like so: (Maybe x)
 -}
--end top
type YYM = State;
-- data YYAction = YYShift Int | YYRed Int | YYErr | YYAccept;
!yyAccept = maxBound :: Int;
!yyErr    = minBound :: Int;
{-- positive numbers are *shift* actions, or *accept*
    negative ones are *reduce* actions, or *error* --}
newtype YYAction = YYAction Int;
data YYsi res tok  = 
	  YYStart () | YYAcc res | YYTok tok
	| YYNTaeq Token
	| YYNTalias Token
	| YYNTannoitem Token
	| YYNTannoitems [Token]
	| YYNTannotation [Def]
	| YYNTapats [Exp]
	| YYNTappex Exp
	| YYNTbinex Exp
	| YYNTboundvar String
	| YYNTboundvars [String]
	| YYNTcalt CAltS
	| YYNTcalts [CAltS]
	| YYNTccontext [ContextS]
	| YYNTclassdef Def
	| YYNTcommata Int
	| YYNTconfld [ConField SName]
	| YYNTconflds [ConField SName]
	| YYNTcontypes [ConField SName]
	| YYNTdalt DConS
	| YYNTdalts [DConS]
	| YYNTdatadef Def
	| YYNTdatainit Def
	| YYNTdefinition [Def]
	| YYNTdefinitions [Def]
	| YYNTderivedef Def
	| YYNTdocs String
	| YYNTdocumentation Def
	| YYNTdodefs [Qual]
	| YYNTdplocaldef [Def]
	| YYNTdvars [TauS]
	| YYNTelsex Token
	| YYNTexpr Exp
	| YYNTexprSC [Exp]
	| YYNTexprSS [Exp]
	| YYNTfield (String, Exp)
	| YYNTfields [(String, Exp)]
	| YYNTfitem Token
	| YYNTfixity Def
	| YYNTfldid (Position, String, Visibility, Bool)
	| YYNTfldids [(Position, String, Visibility, Bool)]
	| YYNTforall SigmaS
	| YYNTfundef [Def]
	| YYNTfunhead (Exp, [Pat])
	| YYNTgargs [TauS]
	| YYNTgetfield (Token, Bool,Exp)
	| YYNTgetfields [(Token,Bool,Exp)]
	| YYNTgqual Qual
	| YYNTgquals [Qual]
	| YYNTguard Guard
	| YYNTguards [Guard]
	| YYNTicontext [ContextS]
	| YYNTimport Def
	| YYNTimportitem ImportItem
	| YYNTimportliste ImportList
	| YYNTimportspec ImportItem
	| YYNTimportspecs [ImportItem]
	| YYNTimpurenativedef Def
	| YYNTinfix Def
	| YYNTinstdef Def
	| YYNTinsthead Def
	| YYNTinterfaces [TauS]
	| YYNTjitem String
	| YYNTjtoken Token
	| YYNTjtokens [Token]
	| YYNTkind Kind
	| YYNTlambda Exp
	| YYNTlambdabody Exp
	| YYNTlcqual Qual
	| YYNTlcquals [Qual]
	| YYNTletdef [Def]
	| YYNTletdefs [Def]
	| YYNTliteral Exp
	| YYNTlocaldef [Def]
	| YYNTlocaldefs [Def]
	| YYNTmbdot Token
	| YYNTmemspec ImportItem
	| YYNTmemspecs [ImportItem]
	| YYNTmethodspec (Token, String, Maybe [TauS])
	| YYNTmoduledefinition Def
	| YYNTnativedef Def
	| YYNTnativename String
	| YYNTnativepur (Bool, Bool)
	| YYNTnativespec (String, Maybe [TauS])
	| YYNToperator Token
	| YYNToperators [String]
	| YYNTopstring String
	| YYNTpackage ParseResult
	| YYNTpackageclause (String, Maybe String, Position)
	| YYNTpackagename (String, Position)
	| YYNTpackagename1 (String, Position)
	| YYNTpattern Pat
	| YYNTplainfldid (Position, String, Visibility, Bool)
	| YYNTplocaldef [Def]
	| YYNTprimary Exp
	| YYNTpublicdefinition [Def]
	| YYNTqconid SName
	| YYNTqualifiers (Token -> SName)
	| YYNTqvarid SName
	| YYNTqvarids [SName]
	| YYNTqvarop SName
	| YYNTrawnativename String
	| YYNTrho RhoS
	| YYNTrhofun RhoS
	| YYNTscontext ContextS
	| YYNTscontexts [ContextS]
	| YYNTscript ParseResult
	| YYNTsemicoli Int
	| YYNTsicontext ContextS
	| YYNTsicontexts [ContextS]
	| YYNTsigex SigExs
	| YYNTsigexs [SigExs]
	| YYNTsigma SigmaS
	| YYNTsimpledalt DConS
	| YYNTsimplekind Kind
	| YYNTsimpletype TauS
	| YYNTsimpletypes [TauS]
	| YYNTstrictdalt DConS
	| YYNTstrictfldid (Position, String, Visibility, Bool)
	| YYNTtapp TauS
	| YYNTtau TauS
	| YYNTtauSB [TauS]
	| YYNTtauSC [TauS]
	| YYNTterm Exp
	| YYNTthenx Token
	| YYNTtopdefinition [Def]
	| YYNTtopex Exp
	| YYNTtyname SName
	| YYNTtypeclause (Maybe TauS)
	| YYNTtypedef Def
	| YYNTtyvar TauS
	| YYNTunex Exp
	| YYNTunop Token
	| YYNTvarid Token
	| YYNTvaridkw Token
	| YYNTvarop Token
	| YYNTvisdalt DConS
	| YYNTvisibledefinition [Def]
	| YYNTwheredef [Def]
	| YYNTwherelet [Def]
	| YYNTwheretokens [Token]
	| YYNTword String
	| YYNTwords [String];
showsi (YYStart  _) = "%start ";
	showsi (YYAcc _) = "%accept ";
	showsi (YYTok x) = yyshow x;
	showsi (YYNTaeq _) = "<aeq>";
	showsi (YYNTalias _) = "<alias>";
	showsi (YYNTannoitem _) = "<annoitem>";
	showsi (YYNTannoitems _) = "<annoitems>";
	showsi (YYNTannotation _) = "<annotation>";
	showsi (YYNTapats _) = "<apats>";
	showsi (YYNTappex _) = "<appex>";
	showsi (YYNTbinex _) = "<binex>";
	showsi (YYNTboundvar _) = "<boundvar>";
	showsi (YYNTboundvars _) = "<boundvars>";
	showsi (YYNTcalt _) = "<calt>";
	showsi (YYNTcalts _) = "<calts>";
	showsi (YYNTccontext _) = "<ccontext>";
	showsi (YYNTclassdef _) = "<classdef>";
	showsi (YYNTcommata _) = "<commata>";
	showsi (YYNTconfld _) = "<confld>";
	showsi (YYNTconflds _) = "<conflds>";
	showsi (YYNTcontypes _) = "<contypes>";
	showsi (YYNTdalt _) = "<dalt>";
	showsi (YYNTdalts _) = "<dalts>";
	showsi (YYNTdatadef _) = "<datadef>";
	showsi (YYNTdatainit _) = "<datainit>";
	showsi (YYNTdefinition _) = "<definition>";
	showsi (YYNTdefinitions _) = "<definitions>";
	showsi (YYNTderivedef _) = "<derivedef>";
	showsi (YYNTdocs _) = "<docs>";
	showsi (YYNTdocumentation _) = "<documentation>";
	showsi (YYNTdodefs _) = "<dodefs>";
	showsi (YYNTdplocaldef _) = "<dplocaldef>";
	showsi (YYNTdvars _) = "<dvars>";
	showsi (YYNTelsex _) = "<elsex>";
	showsi (YYNTexpr _) = "<expr>";
	showsi (YYNTexprSC _) = "<exprSC>";
	showsi (YYNTexprSS _) = "<exprSS>";
	showsi (YYNTfield _) = "<field>";
	showsi (YYNTfields _) = "<fields>";
	showsi (YYNTfitem _) = "<fitem>";
	showsi (YYNTfixity _) = "<fixity>";
	showsi (YYNTfldid _) = "<fldid>";
	showsi (YYNTfldids _) = "<fldids>";
	showsi (YYNTforall _) = "<forall>";
	showsi (YYNTfundef _) = "<fundef>";
	showsi (YYNTfunhead _) = "<funhead>";
	showsi (YYNTgargs _) = "<gargs>";
	showsi (YYNTgetfield _) = "<getfield>";
	showsi (YYNTgetfields _) = "<getfields>";
	showsi (YYNTgqual _) = "<gqual>";
	showsi (YYNTgquals _) = "<gquals>";
	showsi (YYNTguard _) = "<guard>";
	showsi (YYNTguards _) = "<guards>";
	showsi (YYNTicontext _) = "<icontext>";
	showsi (YYNTimport _) = "<import>";
	showsi (YYNTimportitem _) = "<importitem>";
	showsi (YYNTimportliste _) = "<importliste>";
	showsi (YYNTimportspec _) = "<importspec>";
	showsi (YYNTimportspecs _) = "<importspecs>";
	showsi (YYNTimpurenativedef _) = "<impurenativedef>";
	showsi (YYNTinfix _) = "<infix>";
	showsi (YYNTinstdef _) = "<instdef>";
	showsi (YYNTinsthead _) = "<insthead>";
	showsi (YYNTinterfaces _) = "<interfaces>";
	showsi (YYNTjitem _) = "<jitem>";
	showsi (YYNTjtoken _) = "<jtoken>";
	showsi (YYNTjtokens _) = "<jtokens>";
	showsi (YYNTkind _) = "<kind>";
	showsi (YYNTlambda _) = "<lambda>";
	showsi (YYNTlambdabody _) = "<lambdabody>";
	showsi (YYNTlcqual _) = "<lcqual>";
	showsi (YYNTlcquals _) = "<lcquals>";
	showsi (YYNTletdef _) = "<letdef>";
	showsi (YYNTletdefs _) = "<letdefs>";
	showsi (YYNTliteral _) = "<literal>";
	showsi (YYNTlocaldef _) = "<localdef>";
	showsi (YYNTlocaldefs _) = "<localdefs>";
	showsi (YYNTmbdot _) = "<mbdot>";
	showsi (YYNTmemspec _) = "<memspec>";
	showsi (YYNTmemspecs _) = "<memspecs>";
	showsi (YYNTmethodspec _) = "<methodspec>";
	showsi (YYNTmoduledefinition _) = "<moduledefinition>";
	showsi (YYNTnativedef _) = "<nativedef>";
	showsi (YYNTnativename _) = "<nativename>";
	showsi (YYNTnativepur _) = "<nativepur>";
	showsi (YYNTnativespec _) = "<nativespec>";
	showsi (YYNToperator _) = "<operator>";
	showsi (YYNToperators _) = "<operators>";
	showsi (YYNTopstring _) = "<opstring>";
	showsi (YYNTpackage _) = "<package>";
	showsi (YYNTpackageclause _) = "<packageclause>";
	showsi (YYNTpackagename _) = "<packagename>";
	showsi (YYNTpackagename1 _) = "<packagename1>";
	showsi (YYNTpattern _) = "<pattern>";
	showsi (YYNTplainfldid _) = "<plainfldid>";
	showsi (YYNTplocaldef _) = "<plocaldef>";
	showsi (YYNTprimary _) = "<primary>";
	showsi (YYNTpublicdefinition _) = "<publicdefinition>";
	showsi (YYNTqconid _) = "<qconid>";
	showsi (YYNTqualifiers _) = "<qualifiers>";
	showsi (YYNTqvarid _) = "<qvarid>";
	showsi (YYNTqvarids _) = "<qvarids>";
	showsi (YYNTqvarop _) = "<qvarop>";
	showsi (YYNTrawnativename _) = "<rawnativename>";
	showsi (YYNTrho _) = "<rho>";
	showsi (YYNTrhofun _) = "<rhofun>";
	showsi (YYNTscontext _) = "<scontext>";
	showsi (YYNTscontexts _) = "<scontexts>";
	showsi (YYNTscript _) = "<script>";
	showsi (YYNTsemicoli _) = "<semicoli>";
	showsi (YYNTsicontext _) = "<sicontext>";
	showsi (YYNTsicontexts _) = "<sicontexts>";
	showsi (YYNTsigex _) = "<sigex>";
	showsi (YYNTsigexs _) = "<sigexs>";
	showsi (YYNTsigma _) = "<sigma>";
	showsi (YYNTsimpledalt _) = "<simpledalt>";
	showsi (YYNTsimplekind _) = "<simplekind>";
	showsi (YYNTsimpletype _) = "<simpletype>";
	showsi (YYNTsimpletypes _) = "<simpletypes>";
	showsi (YYNTstrictdalt _) = "<strictdalt>";
	showsi (YYNTstrictfldid _) = "<strictfldid>";
	showsi (YYNTtapp _) = "<tapp>";
	showsi (YYNTtau _) = "<tau>";
	showsi (YYNTtauSB _) = "<tauSB>";
	showsi (YYNTtauSC _) = "<tauSC>";
	showsi (YYNTterm _) = "<term>";
	showsi (YYNTthenx _) = "<thenx>";
	showsi (YYNTtopdefinition _) = "<topdefinition>";
	showsi (YYNTtopex _) = "<topex>";
	showsi (YYNTtyname _) = "<tyname>";
	showsi (YYNTtypeclause _) = "<typeclause>";
	showsi (YYNTtypedef _) = "<typedef>";
	showsi (YYNTtyvar _) = "<tyvar>";
	showsi (YYNTunex _) = "<unex>";
	showsi (YYNTunop _) = "<unop>";
	showsi (YYNTvarid _) = "<varid>";
	showsi (YYNTvaridkw _) = "<varidkw>";
	showsi (YYNTvarop _) = "<varop>";
	showsi (YYNTvisdalt _) = "<visdalt>";
	showsi (YYNTvisibledefinition _) = "<visibledefinition>";
	showsi (YYNTwheredef _) = "<wheredef>";
	showsi (YYNTwherelet _) = "<wherelet>";
	showsi (YYNTwheretokens _) = "<wheretokens>";
	showsi (YYNTword _) = "<word>";
	showsi (YYNTwords _) = "<words>";
showst st = joined " " (map (\(_,si) -> showsi si) (reverse st));
!yydebug = (maybe "" id (System.getenv "YYDEBUG")).toLowerCase ~ Â´(1|yes|true|on)Â´;
yytrace s = (if yydebug then trace s else false) `seq` ();
yydbgAccept  s t = yytrace ("in state " ++ show s ++ " accept  " ++ show t ++  "\n" );
private yyaction0 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    PACKAGE -> YYAction 2;
    PROTECTED -> YYAction 3;
    INTERPRET -> YYAction 4;
    _ -> (YYAction yyErr);
  };
private yyaction1 t =   case yychar t of {
  ';' -> YYAction 8;
  '?' -> YYAction (-17);
  '!' -> YYAction (-17);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-17);
    PACKAGE -> YYAction (-17);
    PRIVATE -> YYAction (-17);
    PROTECTED -> YYAction (-17);
    PUBLIC -> YYAction (-17);
    _ -> (YYAction yyErr);
  };
};
private yyaction2 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction3 t =   case yytoken t of {
    PACKAGE -> YYAction 23;
    _ -> (YYAction yyErr);
  };
private yyaction4 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
yyaccept  (yyvals@((5, (YYNTpackage yy1)):_), yytoks) = yydbgAccept 5 (showst (take 1 yyvals)) `seq`
	([(5, YYAcc yy1)], yytoks);
yyaccept (yyvs,_) = yybadprod 5 yyvs;
private yyaction5 t = (YYAction yyErr);
private yyaction6 t =   case yychar t of {
  ';' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 62;
    WHERE -> YYAction 63;
    _ -> (YYAction yyErr);
  };
};
private yyaction7 t =   case yytoken t of {
    PACKAGE -> YYAction 67;
    PROTECTED -> YYAction 68;
    _ -> (YYAction yyErr);
  };
private yyaction8 t =   case yychar t of {
  ';' -> YYAction 8;
  '-' -> YYAction (-28);
  '}' -> YYAction (-28);
  '(' -> YYAction (-28);
  '[' -> YYAction (-28);
  '?' -> YYAction (-28);
  '!' -> YYAction (-28);
  '\\' -> YYAction (-28);
  '_' -> YYAction (-28);
  _ ->   case yytoken t of {
    VARID -> YYAction (-28);
    CONID -> YYAction (-28);
    QUALIFIER -> YYAction (-28);
    DOCUMENTATION -> YYAction (-28);
    IMPORT -> YYAction (-28);
    INFIX -> YYAction (-28);
    INFIXR -> YYAction (-28);
    INFIXL -> YYAction (-28);
    NATIVE -> YYAction (-28);
    NEWTYPE -> YYAction (-28);
    DATA -> YYAction (-28);
    CLASS -> YYAction (-28);
    INSTANCE -> YYAction (-28);
    ABSTRACT -> YYAction (-28);
    TYPE -> YYAction (-28);
    TRUE -> YYAction (-28);
    FALSE -> YYAction (-28);
    IF -> YYAction (-28);
    CASE -> YYAction (-28);
    DERIVE -> YYAction (-28);
    LET -> YYAction (-28);
    DO -> YYAction (-28);
    PRIVATE -> YYAction (-28);
    PROTECTED -> YYAction (-28);
    PUBLIC -> YYAction (-28);
    PURE -> YYAction (-28);
    INTCONST -> YYAction (-28);
    STRCONST -> YYAction (-28);
    LONGCONST -> YYAction (-28);
    FLTCONST -> YYAction (-28);
    DBLCONST -> YYAction (-28);
    CHRCONST -> YYAction (-28);
    REGEXP -> YYAction (-28);
    BIGCONST -> YYAction (-28);
    _ -> (YYAction yyErr);
  };
};
private yyaction9 t = YYAction (-18);
private yyaction10 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    _ -> (YYAction yyErr);
  };
private yyaction11 t = YYAction (-175);
private yyaction12 t = YYAction (-13);
private yyaction13 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction14 t = YYAction (-180);
private yyaction15 t = YYAction (-181);
private yyaction16 t = YYAction (-178);
private yyaction17 t = YYAction (-176);
private yyaction18 t = YYAction (-177);
private yyaction19 t = YYAction (-179);
private yyaction20 t = YYAction (-16);
private yyaction21 t =   case yychar t of {
  '.' -> YYAction 72;
  _ -> (YYAction yyErr);
};
private yyaction22 t = YYAction (-21);
private yyaction23 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction24 t = YYAction (-186);
private yyaction25 t = YYAction (-189);
private yyaction26 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '{' -> YYAction (-410);
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 76;
    _ -> (YYAction yyErr);
  };
};
private yyaction27 t = YYAction (-350);
private yyaction28 t = YYAction (-351);
private yyaction29 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction30 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction31 t =   case yychar t of {
  '{' -> YYAction 81;
  _ -> (YYAction yyErr);
};
private yyaction32 t =   case yychar t of {
  '{' -> YYAction 82;
  _ -> (YYAction yyErr);
};
private yyaction33 t = YYAction (-354);
private yyaction34 t = YYAction (-353);
private yyaction35 t = YYAction (-356);
private yyaction36 t = YYAction (-357);
private yyaction37 t = YYAction (-358);
private yyaction38 t = YYAction (-352);
private yyaction39 t = YYAction (-359);
private yyaction40 t = YYAction (-355);
private yyaction41 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction42 t =   case yychar t of {
  '-' -> YYAction 85;
  '(' -> YYAction 42;
  ')' -> YYAction 86;
  ',' -> YYAction 87;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction43 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  ']' -> YYAction 93;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction44 t = YYAction (-198);
private yyaction45 t = YYAction (-197);
private yyaction46 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction47 t = YYAction (-428);
private yyaction48 t = YYAction (-3);
private yyaction49 t = YYAction (-4);
private yyaction50 t = YYAction (-426);
private yyaction51 t =   case yychar t of {
  '{' -> YYAction 98;
  '-' -> YYAction (-429);
  ';' -> YYAction (-429);
  '}' -> YYAction (-429);
  '.' -> YYAction (-429);
  '(' -> YYAction (-429);
  ')' -> YYAction (-429);
  ',' -> YYAction (-429);
  '|' -> YYAction (-429);
  '[' -> YYAction (-429);
  ']' -> YYAction (-429);
  '?' -> YYAction (-429);
  '!' -> YYAction (-429);
  '=' -> YYAction (-429);
  '\\' -> YYAction (-429);
  '_' -> YYAction (-429);
  _ ->   case yytoken t of {
    VARID -> YYAction (-429);
    CONID -> YYAction (-429);
    QUALIFIER -> YYAction (-429);
    WHERE -> YYAction (-429);
    TRUE -> YYAction (-429);
    FALSE -> YYAction (-429);
    THEN -> YYAction (-429);
    ELSE -> YYAction (-429);
    OF -> YYAction (-429);
    DO -> YYAction (-429);
    INTCONST -> YYAction (-429);
    STRCONST -> YYAction (-429);
    LONGCONST -> YYAction (-429);
    FLTCONST -> YYAction (-429);
    DBLCONST -> YYAction (-429);
    CHRCONST -> YYAction (-429);
    REGEXP -> YYAction (-429);
    BIGCONST -> YYAction (-429);
    ARROW -> YYAction (-429);
    DCOLON -> YYAction (-429);
    GETS -> YYAction (-429);
    DOTDOT -> YYAction (-429);
    SOMEOP -> YYAction (-429);
    _ -> (YYAction yyErr);
  };
};
private yyaction52 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction53 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-390);
  '}' -> YYAction (-390);
  ')' -> YYAction (-390);
  ',' -> YYAction (-390);
  '|' -> YYAction (-390);
  ']' -> YYAction (-390);
  '=' -> YYAction (-390);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 100;
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-390);
    THEN -> YYAction (-390);
    ELSE -> YYAction (-390);
    OF -> YYAction (-390);
    ARROW -> YYAction (-390);
    GETS -> YYAction (-390);
    DOTDOT -> YYAction (-390);
    _ -> (YYAction yyErr);
  };
};
private yyaction54 t = YYAction (-427);
private yyaction55 t = YYAction (-402);
private yyaction56 t = YYAction (-398);
private yyaction57 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  '-' -> YYAction (-403);
  ';' -> YYAction (-403);
  '}' -> YYAction (-403);
  ')' -> YYAction (-403);
  ',' -> YYAction (-403);
  '|' -> YYAction (-403);
  ']' -> YYAction (-403);
  '=' -> YYAction (-403);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    WHERE -> YYAction (-403);
    THEN -> YYAction (-403);
    ELSE -> YYAction (-403);
    OF -> YYAction (-403);
    ARROW -> YYAction (-403);
    DCOLON -> YYAction (-403);
    GETS -> YYAction (-403);
    DOTDOT -> YYAction (-403);
    SOMEOP -> YYAction (-403);
    _ -> (YYAction yyErr);
  };
};
private yyaction58 t = YYAction (-404);
private yyaction59 t =   case yychar t of {
  '.' -> YYAction 104;
  '-' -> YYAction (-406);
  ';' -> YYAction (-406);
  '}' -> YYAction (-406);
  '(' -> YYAction (-406);
  ')' -> YYAction (-406);
  ',' -> YYAction (-406);
  '|' -> YYAction (-406);
  '[' -> YYAction (-406);
  ']' -> YYAction (-406);
  '?' -> YYAction (-406);
  '!' -> YYAction (-406);
  '=' -> YYAction (-406);
  '\\' -> YYAction (-406);
  '_' -> YYAction (-406);
  _ ->   case yytoken t of {
    VARID -> YYAction (-406);
    CONID -> YYAction (-406);
    QUALIFIER -> YYAction (-406);
    WHERE -> YYAction (-406);
    TRUE -> YYAction (-406);
    FALSE -> YYAction (-406);
    THEN -> YYAction (-406);
    ELSE -> YYAction (-406);
    OF -> YYAction (-406);
    DO -> YYAction (-406);
    INTCONST -> YYAction (-406);
    STRCONST -> YYAction (-406);
    LONGCONST -> YYAction (-406);
    FLTCONST -> YYAction (-406);
    DBLCONST -> YYAction (-406);
    CHRCONST -> YYAction (-406);
    REGEXP -> YYAction (-406);
    BIGCONST -> YYAction (-406);
    ARROW -> YYAction (-406);
    DCOLON -> YYAction (-406);
    GETS -> YYAction (-406);
    DOTDOT -> YYAction (-406);
    SOMEOP -> YYAction (-406);
    _ -> (YYAction yyErr);
  };
};
private yyaction60 t =   case yychar t of {
  '{' -> YYAction 105;
  _ -> (YYAction yyErr);
};
private yyaction61 t = YYAction (-412);
private yyaction62 t = YYAction (-25);
private yyaction63 t =   case yychar t of {
  '{' -> YYAction 106;
  _ -> (YYAction yyErr);
};
private yyaction64 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    ABSTRACT -> YYAction 118;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 121;
    PROTECTED -> YYAction 122;
    PUBLIC -> YYAction 123;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction65 t =   case yychar t of {
  '(' -> YYAction 152;
  _ -> (YYAction yyErr);
};
private yyaction66 t =   case yychar t of {
  '(' -> YYAction (-26);
  _ ->   case yytoken t of {
    VARID -> YYAction 62;
    _ -> (YYAction yyErr);
  };
};
private yyaction67 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction68 t =   case yytoken t of {
    PACKAGE -> YYAction 155;
    _ -> (YYAction yyErr);
  };
private yyaction69 t = YYAction (-29);
private yyaction70 t = YYAction (-19);
private yyaction71 t = YYAction (-15);
private yyaction72 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction73 t = YYAction (-23);
private yyaction74 t = YYAction (-190);
private yyaction75 t = YYAction (-188);
private yyaction76 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '{' -> YYAction (-411);
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
};
private yyaction77 t = YYAction (-191);
private yyaction78 t = YYAction (-185);
private yyaction79 t =   case yychar t of {
  ';' -> YYAction 160;
  _ ->   case yytoken t of {
    THEN -> YYAction 159;
    _ -> (YYAction yyErr);
  };
};
private yyaction80 t =   case yytoken t of {
    OF -> YYAction 162;
    _ -> (YYAction yyErr);
  };
private yyaction81 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction82 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction83 t = YYAction (-397);
private yyaction84 t = YYAction (-196);
private yyaction85 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 172;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction86 t = YYAction (-432);
private yyaction87 t =   case yychar t of {
  ',' -> YYAction 87;
  ')' -> YYAction (-448);
  _ -> (YYAction yyErr);
};
private yyaction88 t =   case yychar t of {
  ';' -> YYAction 174;
  ')' -> YYAction 175;
  ',' -> YYAction 176;
  _ -> (YYAction yyErr);
};
private yyaction89 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 177;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction90 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 179;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction91 t =   case yychar t of {
  ')' -> YYAction 180;
  _ -> (YYAction yyErr);
};
private yyaction92 t =   case yychar t of {
  '-' -> YYAction 182;
  ';' -> YYAction (-390);
  ')' -> YYAction (-390);
  ',' -> YYAction (-390);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 100;
    SOMEOP -> YYAction 181;
    _ -> (YYAction yyErr);
  };
};
private yyaction93 t = YYAction (-443);
private yyaction94 t =   case yychar t of {
  ',' -> YYAction 184;
  '|' -> YYAction 185;
  ']' -> YYAction (-461);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-461);
    _ -> (YYAction yyErr);
  };
};
private yyaction95 t =   case yychar t of {
  ']' -> YYAction 187;
  _ ->   case yytoken t of {
    DOTDOT -> YYAction 186;
    _ -> (YYAction yyErr);
  };
};
private yyaction96 t =   case yychar t of {
  '\\' -> YYAction 46;
  _ ->   case yytoken t of {
    ARROW -> YYAction 188;
    _ -> (YYAction yyErr);
  };
};
private yyaction97 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  '\\' -> YYAction (-408);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    ARROW -> YYAction (-408);
    _ -> (YYAction yyErr);
  };
};
private yyaction98 t =   case yychar t of {
  '}' -> YYAction 193;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction99 t = YYAction (-407);
private yyaction100 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction101 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction102 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction103 t = YYAction (-405);
private yyaction104 t =   case yychar t of {
  '{' -> YYAction 215;
  '[' -> YYAction 216;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 214;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction105 t =   case yytoken t of {
    VARID -> YYAction 219;
    _ -> (YYAction yyErr);
  };
private yyaction106 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    ABSTRACT -> YYAction 118;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 121;
    PROTECTED -> YYAction 122;
    PUBLIC -> YYAction 123;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction107 t =   case yychar t of {
  '-' -> YYAction (-186);
  '.' -> YYAction (-186);
  '(' -> YYAction (-186);
  ',' -> YYAction (-174);
  '|' -> YYAction (-186);
  '[' -> YYAction (-186);
  '?' -> YYAction (-186);
  '!' -> YYAction (-186);
  '=' -> YYAction (-186);
  '_' -> YYAction (-186);
  _ ->   case yytoken t of {
    VARID -> YYAction (-186);
    CONID -> YYAction (-186);
    QUALIFIER -> YYAction (-186);
    TRUE -> YYAction (-186);
    FALSE -> YYAction (-186);
    DO -> YYAction (-186);
    INTCONST -> YYAction (-186);
    STRCONST -> YYAction (-186);
    LONGCONST -> YYAction (-186);
    FLTCONST -> YYAction (-186);
    DBLCONST -> YYAction (-186);
    CHRCONST -> YYAction (-186);
    REGEXP -> YYAction (-186);
    BIGCONST -> YYAction (-186);
    DCOLON -> YYAction (-174);
    SOMEOP -> YYAction (-186);
    _ -> (YYAction yyErr);
  };
};
private yyaction108 t = YYAction (-120);
private yyaction109 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction110 t =   case yytoken t of {
    INTCONST -> YYAction 224;
    _ -> (YYAction yyErr);
  };
private yyaction111 t =   case yytoken t of {
    INTCONST -> YYAction 225;
    _ -> (YYAction yyErr);
  };
private yyaction112 t =   case yytoken t of {
    INTCONST -> YYAction 226;
    _ -> (YYAction yyErr);
  };
private yyaction113 t =   case yychar t of {
  '-' -> YYAction 228;
  '(' -> YYAction 229;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PACKAGE -> YYAction 227;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction114 t =   case yytoken t of {
    CONID -> YYAction 235;
    _ -> (YYAction yyErr);
  };
private yyaction115 t =   case yytoken t of {
    CONID -> YYAction 236;
    _ -> (YYAction yyErr);
  };
private yyaction116 t =   case yychar t of {
  '(' -> YYAction 237;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction117 t =   case yychar t of {
  '(' -> YYAction 241;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction118 t =   case yytoken t of {
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    _ -> (YYAction yyErr);
  };
private yyaction119 t =   case yytoken t of {
    CONID -> YYAction 247;
    _ -> (YYAction yyErr);
  };
private yyaction120 t =   case yychar t of {
  '(' -> YYAction 241;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction121 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 249;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction122 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 249;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction123 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 249;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction124 t =   case yytoken t of {
    NATIVE -> YYAction 249;
    _ -> (YYAction yyErr);
  };
private yyaction125 t =   case yychar t of {
  '-' -> YYAction 254;
  '(' -> YYAction 42;
  ')' -> YYAction 86;
  ',' -> YYAction 87;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction126 t = YYAction (-1);
private yyaction127 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-30);
  _ -> (YYAction yyErr);
};
private yyaction128 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ';' -> YYAction (-33);
  '}' -> YYAction (-33);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    ABSTRACT -> YYAction 118;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 121;
    PROTECTED -> YYAction 122;
    PUBLIC -> YYAction 123;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction129 t = YYAction (-35);
private yyaction130 t = YYAction (-36);
private yyaction131 t = YYAction (-44);
private yyaction132 t = YYAction (-122);
private yyaction133 t = YYAction (-41);
private yyaction134 t = YYAction (-42);
private yyaction135 t = YYAction (-43);
private yyaction136 t = YYAction (-121);
private yyaction137 t = YYAction (-123);
private yyaction138 t = YYAction (-124);
private yyaction139 t = YYAction (-125);
private yyaction140 t = YYAction (-126);
private yyaction141 t = YYAction (-130);
private yyaction142 t = YYAction (-131);
private yyaction143 t =   case yychar t of {
  ';' -> YYAction (-132);
  '}' -> YYAction (-132);
  _ ->   case yytoken t of {
    WHERE -> YYAction 259;
    _ -> (YYAction yyErr);
  };
};
private yyaction144 t = YYAction (-209);
private yyaction145 t =   case yychar t of {
  '-' -> YYAction 262;
  _ ->   case yytoken t of {
    VARID -> YYAction 261;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction146 t =   case yytoken t of {
    DCOLON -> YYAction 266;
    _ -> (YYAction yyErr);
  };
private yyaction147 t =   case yychar t of {
  ',' -> YYAction 267;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-213);
    _ -> (YYAction yyErr);
  };
};
private yyaction148 t = YYAction (-216);
private yyaction149 t =   case yychar t of {
  ';' -> YYAction (-341);
  '}' -> YYAction (-341);
  _ ->   case yytoken t of {
    WHERE -> YYAction 268;
    _ -> (YYAction yyErr);
  };
};
private yyaction150 t =   case yychar t of {
  '|' -> YYAction 270;
  '=' -> YYAction 271;
  _ -> (YYAction yyErr);
};
private yyaction151 t =   case yychar t of {
  '-' -> YYAction 102;
  '|' -> YYAction (-349);
  '=' -> YYAction (-349);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    _ -> (YYAction yyErr);
  };
};
private yyaction152 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 274;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction153 t = YYAction (-27);
private yyaction154 t = YYAction (-20);
private yyaction155 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction156 t = YYAction (-14);
private yyaction157 t = YYAction (-187);
private yyaction158 t = YYAction (-184);
private yyaction159 t = YYAction (-392);
private yyaction160 t =   case yytoken t of {
    THEN -> YYAction 280;
    _ -> (YYAction yyErr);
  };
private yyaction161 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction162 t =   case yychar t of {
  '{' -> YYAction 282;
  _ -> (YYAction yyErr);
};
private yyaction163 t = YYAction (-140);
private yyaction164 t =   case yychar t of {
  ';' -> YYAction (-141);
  '}' -> YYAction (-141);
  _ ->   case yytoken t of {
    WHERE -> YYAction 259;
    _ -> (YYAction yyErr);
  };
};
private yyaction165 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-142);
  _ -> (YYAction yyErr);
};
private yyaction166 t =   case yychar t of {
  '}' -> YYAction 284;
  _ -> (YYAction yyErr);
};
private yyaction167 t =   case yychar t of {
  '{' -> YYAction 285;
  _ -> (YYAction yyErr);
};
private yyaction168 t =   case yychar t of {
  '=' -> YYAction 287;
  ';' -> YYAction (-372);
  '}' -> YYAction (-372);
  ',' -> YYAction (-372);
  ']' -> YYAction (-372);
  _ ->   case yytoken t of {
    GETS -> YYAction 286;
    _ -> (YYAction yyErr);
  };
};
private yyaction169 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-369);
  _ -> (YYAction yyErr);
};
private yyaction170 t = YYAction (-363);
private yyaction171 t =   case yychar t of {
  '}' -> YYAction 289;
  _ -> (YYAction yyErr);
};
private yyaction172 t = YYAction (-436);
private yyaction173 t = YYAction (-449);
private yyaction174 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction175 t = YYAction (-442);
private yyaction176 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction177 t = YYAction (-435);
private yyaction178 t =   case yychar t of {
  ')' -> YYAction 294;
  _ -> (YYAction yyErr);
};
private yyaction179 t = YYAction (-434);
private yyaction180 t = YYAction (-433);
private yyaction181 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-196);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction182 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 295;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction183 t =   case yychar t of {
  ')' -> YYAction 296;
  _ -> (YYAction yyErr);
};
private yyaction184 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-463);
  ']' -> YYAction (-463);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    DOTDOT -> YYAction (-463);
    _ -> (YYAction yyErr);
  };
};
private yyaction185 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction186 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  ']' -> YYAction 300;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction187 t = YYAction (-444);
private yyaction188 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction189 t = YYAction (-387);
private yyaction190 t = YYAction (-386);
private yyaction191 t = YYAction (-409);
private yyaction192 t = YYAction (-174);
private yyaction193 t = YYAction (-430);
private yyaction194 t =   case yychar t of {
  '=' -> YYAction 303;
  '}' -> YYAction (-460);
  ',' -> YYAction (-460);
  _ -> (YYAction yyErr);
};
private yyaction195 t =   case yychar t of {
  '}' -> YYAction 304;
  _ -> (YYAction yyErr);
};
private yyaction196 t =   case yychar t of {
  ',' -> YYAction 305;
  '}' -> YYAction (-450);
  _ -> (YYAction yyErr);
};
private yyaction197 t = YYAction (-259);
private yyaction198 t =   case yytoken t of {
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 306;
    _ -> (YYAction yyErr);
  };
private yyaction199 t =   case yytoken t of {
    VARID -> YYAction 307;
    _ -> (YYAction yyErr);
  };
private yyaction200 t =   case yychar t of {
  '(' -> YYAction 200;
  ')' -> YYAction 312;
  ',' -> YYAction 87;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 310;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    ARROW -> YYAction 311;
    _ -> (YYAction yyErr);
  };
};
private yyaction201 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  ']' -> YYAction 317;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction202 t = YYAction (-261);
private yyaction203 t = YYAction (-389);
private yyaction204 t = YYAction (-236);
private yyaction205 t = YYAction (-237);
private yyaction206 t =   case yychar t of {
  '-' -> YYAction (-243);
  ';' -> YYAction (-243);
  '}' -> YYAction (-243);
  ')' -> YYAction (-243);
  ',' -> YYAction (-243);
  '|' -> YYAction (-243);
  ']' -> YYAction (-243);
  '=' -> YYAction (-243);
  _ ->   case yytoken t of {
    ARROW -> YYAction 319;
    EARROW -> YYAction 320;
    DOCUMENTATION -> YYAction (-243);
    WHERE -> YYAction (-243);
    CLASS -> YYAction (-243);
    THEN -> YYAction (-243);
    ELSE -> YYAction (-243);
    OF -> YYAction (-243);
    THROWS -> YYAction (-243);
    DCOLON -> YYAction (-243);
    GETS -> YYAction (-243);
    DOTDOT -> YYAction (-243);
    SOMEOP -> YYAction (-243);
    _ -> (YYAction yyErr);
  };
};
private yyaction207 t = YYAction (-242);
private yyaction208 t = YYAction (-252);
private yyaction209 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  '-' -> YYAction (-321);
  ';' -> YYAction (-321);
  '}' -> YYAction (-321);
  ')' -> YYAction (-321);
  ',' -> YYAction (-321);
  '|' -> YYAction (-321);
  ']' -> YYAction (-321);
  '=' -> YYAction (-321);
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    DOCUMENTATION -> YYAction (-321);
    WHERE -> YYAction (-321);
    CLASS -> YYAction (-321);
    THEN -> YYAction (-321);
    ELSE -> YYAction (-321);
    OF -> YYAction (-321);
    THROWS -> YYAction (-321);
    ARROW -> YYAction (-321);
    DCOLON -> YYAction (-321);
    GETS -> YYAction (-321);
    EARROW -> YYAction (-321);
    DOTDOT -> YYAction (-321);
    SOMEOP -> YYAction (-321);
    _ -> (YYAction yyErr);
  };
};
private yyaction210 t = YYAction (-253);
private yyaction211 t = YYAction (-254);
private yyaction212 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-395);
  '}' -> YYAction (-395);
  ')' -> YYAction (-395);
  ',' -> YYAction (-395);
  '|' -> YYAction (-395);
  ']' -> YYAction (-395);
  '=' -> YYAction (-395);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-395);
    THEN -> YYAction (-395);
    ELSE -> YYAction (-395);
    OF -> YYAction (-395);
    ARROW -> YYAction (-395);
    DCOLON -> YYAction (-395);
    GETS -> YYAction (-395);
    DOTDOT -> YYAction (-395);
    _ -> (YYAction yyErr);
  };
};
private yyaction213 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-396);
  '}' -> YYAction (-396);
  ')' -> YYAction (-396);
  ',' -> YYAction (-396);
  '|' -> YYAction (-396);
  ']' -> YYAction (-396);
  '=' -> YYAction (-396);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-396);
    THEN -> YYAction (-396);
    ELSE -> YYAction (-396);
    OF -> YYAction (-396);
    ARROW -> YYAction (-396);
    DCOLON -> YYAction (-396);
    GETS -> YYAction (-396);
    DOTDOT -> YYAction (-396);
    _ -> (YYAction yyErr);
  };
};
private yyaction214 t = YYAction (-414);
private yyaction215 t =   case yytoken t of {
    VARID -> YYAction 322;
    _ -> (YYAction yyErr);
  };
private yyaction216 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction217 t = YYAction (-415);
private yyaction218 t = YYAction (-416);
private yyaction219 t =   case yychar t of {
  '?' -> YYAction 326;
  '=' -> YYAction 327;
  '}' -> YYAction (-458);
  ',' -> YYAction (-458);
  _ ->   case yytoken t of {
    GETS -> YYAction 325;
    _ -> (YYAction yyErr);
  };
};
private yyaction220 t =   case yychar t of {
  '}' -> YYAction 328;
  _ -> (YYAction yyErr);
};
private yyaction221 t =   case yychar t of {
  ',' -> YYAction 329;
  '}' -> YYAction (-453);
  _ -> (YYAction yyErr);
};
private yyaction222 t =   case yychar t of {
  '}' -> YYAction 330;
  _ -> (YYAction yyErr);
};
private yyaction223 t =   case yychar t of {
  '(' -> YYAction 334;
  ';' -> YYAction (-148);
  '}' -> YYAction (-148);
  _ ->   case yytoken t of {
    VARID -> YYAction 331;
    CONID -> YYAction 332;
    PUBLIC -> YYAction 333;
    _ -> (YYAction yyErr);
  };
};
private yyaction224 t = YYAction (-199);
private yyaction225 t = YYAction (-201);
private yyaction226 t = YYAction (-200);
private yyaction227 t =   case yytoken t of {
    TYPE -> YYAction 337;
    WHERE -> YYAction (-46);
    CLASS -> YYAction (-46);
    _ -> (YYAction yyErr);
  };
private yyaction228 t = YYAction (-219);
private yyaction229 t =   case yychar t of {
  '-' -> YYAction 339;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction230 t = YYAction (-220);
private yyaction231 t = YYAction (-218);
private yyaction232 t = YYAction (-217);
private yyaction233 t =   case yychar t of {
  '{' -> YYAction 347;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 342;
    CONID -> YYAction 343;
    QUALIFIER -> YYAction 344;
    PACKAGE -> YYAction 345;
    STRCONST -> YYAction 346;
    SOMEOP -> YYAction 84;
    DCOLON -> YYAction (-227);
    _ -> (YYAction yyErr);
  };
};
private yyaction234 t =   case yytoken t of {
    DCOLON -> YYAction 354;
    _ -> (YYAction yyErr);
  };
private yyaction235 t =   case yychar t of {
  '(' -> YYAction 355;
  '=' -> YYAction 356;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction236 t =   case yychar t of {
  '(' -> YYAction 355;
  '=' -> YYAction 359;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction237 t =   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
private yyaction238 t =   case yychar t of {
  '(' -> YYAction 355;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction239 t = YYAction (-275);
private yyaction240 t =   case yychar t of {
  ';' -> YYAction (-341);
  '}' -> YYAction (-341);
  _ ->   case yytoken t of {
    WHERE -> YYAction 268;
    EARROW -> YYAction 364;
    _ -> (YYAction yyErr);
  };
};
private yyaction241 t =   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
private yyaction242 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction243 t = YYAction (-283);
private yyaction244 t =   case yychar t of {
  ';' -> YYAction (-286);
  '}' -> YYAction (-286);
  _ ->   case yytoken t of {
    EARROW -> YYAction 369;
    WHERE -> YYAction (-286);
    _ -> (YYAction yyErr);
  };
};
private yyaction245 t =   case yychar t of {
  ';' -> YYAction (-341);
  '}' -> YYAction (-341);
  _ ->   case yytoken t of {
    WHERE -> YYAction 268;
    _ -> (YYAction yyErr);
  };
};
private yyaction246 t = YYAction (-40);
private yyaction247 t =   case yychar t of {
  '(' -> YYAction 355;
  '=' -> YYAction 371;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction248 t = YYAction (-288);
private yyaction249 t =   case yychar t of {
  '-' -> YYAction 228;
  '(' -> YYAction 229;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction250 t = YYAction (-37);
private yyaction251 t = YYAction (-38);
private yyaction252 t = YYAction (-39);
private yyaction253 t = YYAction (-215);
private yyaction254 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 373;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction255 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 374;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction256 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 375;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction257 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-31);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    NEWTYPE -> YYAction 114;
    DATA -> YYAction 115;
    CLASS -> YYAction 116;
    INSTANCE -> YYAction 117;
    ABSTRACT -> YYAction 118;
    TYPE -> YYAction 119;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 120;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 121;
    PROTECTED -> YYAction 122;
    PUBLIC -> YYAction 123;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction258 t = YYAction (-34);
private yyaction259 t =   case yychar t of {
  '{' -> YYAction 377;
  _ -> (YYAction yyErr);
};
private yyaction260 t = YYAction (-348);
private yyaction261 t = YYAction (-203);
private yyaction262 t = YYAction (-204);
private yyaction263 t = YYAction (-202);
private yyaction264 t =   case yychar t of {
  '-' -> YYAction 262;
  ';' -> YYAction (-205);
  '}' -> YYAction (-205);
  _ ->   case yytoken t of {
    VARID -> YYAction 261;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction265 t = YYAction (-207);
private yyaction266 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction267 t =   case yychar t of {
  '(' -> YYAction 229;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction268 t =   case yychar t of {
  '{' -> YYAction 381;
  _ -> (YYAction yyErr);
};
private yyaction269 t = YYAction (-289);
private yyaction270 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction271 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction272 t = YYAction (-347);
private yyaction273 t =   case yychar t of {
  '|' -> YYAction 270;
  ';' -> YYAction (-378);
  '}' -> YYAction (-378);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-378);
    _ -> (YYAction yyErr);
  };
};
private yyaction274 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 387;
    _ -> (YYAction yyErr);
  };
};
private yyaction275 t =   case yychar t of {
  ')' -> YYAction 389;
  _ -> (YYAction yyErr);
};
private yyaction276 t = YYAction (-195);
private yyaction277 t =   case yychar t of {
  ',' -> YYAction 390;
  ')' -> YYAction (-182);
  _ -> (YYAction yyErr);
};
private yyaction278 t = YYAction (-194);
private yyaction279 t = YYAction (-22);
private yyaction280 t = YYAction (-391);
private yyaction281 t =   case yychar t of {
  ';' -> YYAction 392;
  _ ->   case yytoken t of {
    ELSE -> YYAction 391;
    _ -> (YYAction yyErr);
  };
};
private yyaction282 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction283 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-143);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction284 t =   case yytoken t of {
    IN -> YYAction 399;
    _ -> (YYAction yyErr);
  };
private yyaction285 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction286 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction287 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction288 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-370);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction289 t = YYAction (-413);
private yyaction290 t =   case yychar t of {
  ';' -> YYAction 404;
  ')' -> YYAction (-464);
  _ -> (YYAction yyErr);
};
private yyaction291 t =   case yychar t of {
  ')' -> YYAction 405;
  _ -> (YYAction yyErr);
};
private yyaction292 t =   case yychar t of {
  ',' -> YYAction 184;
  ')' -> YYAction (-461);
  ']' -> YYAction (-461);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-461);
    _ -> (YYAction yyErr);
  };
};
private yyaction293 t =   case yychar t of {
  ')' -> YYAction 406;
  _ -> (YYAction yyErr);
};
private yyaction294 t = YYAction (-437);
private yyaction295 t = YYAction (-439);
private yyaction296 t = YYAction (-438);
private yyaction297 t = YYAction (-462);
private yyaction298 t =   case yychar t of {
  ',' -> YYAction 407;
  ']' -> YYAction (-366);
  _ -> (YYAction yyErr);
};
private yyaction299 t =   case yychar t of {
  ']' -> YYAction 408;
  _ -> (YYAction yyErr);
};
private yyaction300 t = YYAction (-445);
private yyaction301 t =   case yychar t of {
  ']' -> YYAction 409;
  _ -> (YYAction yyErr);
};
private yyaction302 t = YYAction (-388);
private yyaction303 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction304 t = YYAction (-431);
private yyaction305 t =   case yychar t of {
  '}' -> YYAction (-452);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction306 t =   case yytoken t of {
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
private yyaction307 t = YYAction (-235);
private yyaction308 t =   case yychar t of {
  '.' -> YYAction 413;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 412;
    _ -> (YYAction yyErr);
  };
};
private yyaction309 t =   case yychar t of {
  '.' -> YYAction (-233);
  _ ->   case yytoken t of {
    VARID -> YYAction 307;
    SOMEOP -> YYAction (-233);
    _ -> (YYAction yyErr);
  };
};
private yyaction310 t =   case yychar t of {
  '(' -> YYAction (-259);
  ')' -> YYAction (-259);
  ',' -> YYAction (-259);
  '|' -> YYAction (-259);
  '[' -> YYAction (-259);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 416;
    VARID -> YYAction (-259);
    CONID -> YYAction (-259);
    QUALIFIER -> YYAction (-259);
    ARROW -> YYAction (-259);
    _ -> (YYAction yyErr);
  };
};
private yyaction311 t =   case yychar t of {
  ')' -> YYAction 417;
  _ -> (YYAction yyErr);
};
private yyaction312 t = YYAction (-263);
private yyaction313 t =   case yychar t of {
  ')' -> YYAction 418;
  ',' -> YYAction 419;
  '|' -> YYAction 420;
  _ -> (YYAction yyErr);
};
private yyaction314 t = YYAction (-246);
private yyaction315 t =   case yychar t of {
  ';' -> YYAction (-245);
  '}' -> YYAction (-245);
  ')' -> YYAction (-245);
  ',' -> YYAction (-245);
  '|' -> YYAction (-245);
  ']' -> YYAction (-245);
  _ ->   case yytoken t of {
    ARROW -> YYAction 421;
    WHERE -> YYAction (-245);
    CLASS -> YYAction (-245);
    _ -> (YYAction yyErr);
  };
};
private yyaction316 t =   case yychar t of {
  ')' -> YYAction 422;
  _ -> (YYAction yyErr);
};
private yyaction317 t = YYAction (-262);
private yyaction318 t =   case yychar t of {
  ']' -> YYAction 423;
  _ -> (YYAction yyErr);
};
private yyaction319 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction320 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction321 t = YYAction (-322);
private yyaction322 t =   case yychar t of {
  '?' -> YYAction 428;
  '=' -> YYAction 429;
  '}' -> YYAction (-458);
  ',' -> YYAction (-458);
  _ ->   case yytoken t of {
    GETS -> YYAction 427;
    _ -> (YYAction yyErr);
  };
};
private yyaction323 t =   case yychar t of {
  '}' -> YYAction 430;
  _ -> (YYAction yyErr);
};
private yyaction324 t =   case yychar t of {
  ']' -> YYAction 431;
  _ -> (YYAction yyErr);
};
private yyaction325 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 432;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction326 t =   case yychar t of {
  '}' -> YYAction 434;
  _ -> (YYAction yyErr);
};
private yyaction327 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 435;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction328 t = YYAction (-420);
private yyaction329 t =   case yychar t of {
  '}' -> YYAction (-455);
  _ ->   case yytoken t of {
    VARID -> YYAction 437;
    _ -> (YYAction yyErr);
  };
};
private yyaction330 t = YYAction (-2);
private yyaction331 t =   case yychar t of {
  '(' -> YYAction (-174);
  _ ->   case yytoken t of {
    CONID -> YYAction 439;
    _ -> (YYAction yyErr);
  };
};
private yyaction332 t =   case yychar t of {
  '(' -> YYAction 334;
  ';' -> YYAction (-148);
  '}' -> YYAction (-148);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PUBLIC -> YYAction 333;
    _ -> (YYAction yyErr);
  };
};
private yyaction333 t =   case yychar t of {
  '(' -> YYAction 334;
  ';' -> YYAction (-148);
  '}' -> YYAction (-148);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PUBLIC -> YYAction 333;
    _ -> (YYAction yyErr);
  };
};
private yyaction334 t =   case yychar t of {
  ')' -> YYAction 445;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 442;
    QUALIFIER -> YYAction 443;
    PUBLIC -> YYAction 444;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction335 t = YYAction (-145);
private yyaction336 t =   case yychar t of {
  '(' -> YYAction 453;
  _ -> (YYAction yyErr);
};
private yyaction337 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction338 t =   case yytoken t of {
    CLASS -> YYAction 455;
    WHERE -> YYAction (-48);
    _ -> (YYAction yyErr);
  };
private yyaction339 t =   case yychar t of {
  ')' -> YYAction 457;
  _ -> (YYAction yyErr);
};
private yyaction340 t =   case yychar t of {
  ')' -> YYAction 458;
  _ -> (YYAction yyErr);
};
private yyaction341 t =   case yychar t of {
  ')' -> YYAction 459;
  _ -> (YYAction yyErr);
};
private yyaction342 t =   case yychar t of {
  '.' -> YYAction 460;
  ';' -> YYAction (-6);
  '{' -> YYAction (-6);
  '}' -> YYAction (-6);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-6);
    DCOLON -> YYAction (-6);
    _ -> (YYAction yyErr);
  };
};
private yyaction343 t = YYAction (-7);
private yyaction344 t =   case yytoken t of {
    VARID -> YYAction 342;
    CONID -> YYAction 343;
    QUALIFIER -> YYAction 344;
    PACKAGE -> YYAction 345;
    STRCONST -> YYAction 346;
    _ -> (YYAction yyErr);
  };
private yyaction345 t =   case yychar t of {
  '.' -> YYAction 462;
  ';' -> YYAction (-8);
  '{' -> YYAction (-8);
  '}' -> YYAction (-8);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-8);
    DCOLON -> YYAction (-8);
    _ -> (YYAction yyErr);
  };
};
private yyaction346 t = YYAction (-12);
private yyaction347 t =   case yychar t of {
  '}' -> YYAction 463;
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction348 t = YYAction (-221);
private yyaction349 t = YYAction (-5);
private yyaction350 t = YYAction (-222);
private yyaction351 t = YYAction (-223);
private yyaction352 t =   case yychar t of {
  '{' -> YYAction 347;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-225);
    _ -> (YYAction yyErr);
  };
};
private yyaction353 t = YYAction (-226);
private yyaction354 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction355 t =   case yytoken t of {
    VARID -> YYAction 470;
    _ -> (YYAction yyErr);
  };
private yyaction356 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    DOCUMENTATION -> YYAction 472;
    PRIVATE -> YYAction 473;
    PROTECTED -> YYAction 474;
    PUBLIC -> YYAction 475;
    _ -> (YYAction yyErr);
  };
};
private yyaction357 t =   case yychar t of {
  '(' -> YYAction 355;
  '=' -> YYAction (-303);
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction358 t =   case yychar t of {
  '=' -> YYAction 483;
  _ -> (YYAction yyErr);
};
private yyaction359 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    DOCUMENTATION -> YYAction 472;
    NATIVE -> YYAction 484;
    PRIVATE -> YYAction 473;
    PROTECTED -> YYAction 474;
    PUBLIC -> YYAction 475;
    PURE -> YYAction 485;
    MUTABLE -> YYAction 486;
    _ -> (YYAction yyErr);
  };
};
private yyaction360 t =   case yychar t of {
  '=' -> YYAction 490;
  _ -> (YYAction yyErr);
};
private yyaction361 t =   case yychar t of {
  ',' -> YYAction 491;
  ')' -> YYAction (-272);
  _ -> (YYAction yyErr);
};
private yyaction362 t =   case yychar t of {
  ')' -> YYAction 492;
  _ -> (YYAction yyErr);
};
private yyaction363 t = YYAction (-271);
private yyaction364 t =   case yytoken t of {
    CONID -> YYAction 493;
    _ -> (YYAction yyErr);
  };
private yyaction365 t = YYAction (-278);
private yyaction366 t =   case yychar t of {
  ',' -> YYAction 494;
  ')' -> YYAction (-280);
  _ -> (YYAction yyErr);
};
private yyaction367 t =   case yychar t of {
  ')' -> YYAction 495;
  _ -> (YYAction yyErr);
};
private yyaction368 t = YYAction (-279);
private yyaction369 t =   case yychar t of {
  '(' -> YYAction 496;
  '[' -> YYAction 497;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction370 t = YYAction (-287);
private yyaction371 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction372 t =   case yychar t of {
  '=' -> YYAction 500;
  _ -> (YYAction yyErr);
};
private yyaction373 t =   case yychar t of {
  '-' -> YYAction (-436);
  '.' -> YYAction (-436);
  '(' -> YYAction (-436);
  ',' -> YYAction (-212);
  '|' -> YYAction (-436);
  '[' -> YYAction (-436);
  '?' -> YYAction (-436);
  '!' -> YYAction (-436);
  '=' -> YYAction (-436);
  '_' -> YYAction (-436);
  _ ->   case yytoken t of {
    VARID -> YYAction (-436);
    CONID -> YYAction (-436);
    QUALIFIER -> YYAction (-436);
    TRUE -> YYAction (-436);
    FALSE -> YYAction (-436);
    DO -> YYAction (-436);
    INTCONST -> YYAction (-436);
    STRCONST -> YYAction (-436);
    LONGCONST -> YYAction (-436);
    FLTCONST -> YYAction (-436);
    DBLCONST -> YYAction (-436);
    CHRCONST -> YYAction (-436);
    REGEXP -> YYAction (-436);
    BIGCONST -> YYAction (-436);
    DCOLON -> YYAction (-212);
    SOMEOP -> YYAction (-436);
    _ -> (YYAction yyErr);
  };
};
private yyaction374 t =   case yychar t of {
  '-' -> YYAction (-435);
  '.' -> YYAction (-435);
  '(' -> YYAction (-435);
  ',' -> YYAction (-210);
  '|' -> YYAction (-435);
  '[' -> YYAction (-435);
  '?' -> YYAction (-435);
  '!' -> YYAction (-435);
  '=' -> YYAction (-435);
  '_' -> YYAction (-435);
  _ ->   case yytoken t of {
    VARID -> YYAction (-435);
    CONID -> YYAction (-435);
    QUALIFIER -> YYAction (-435);
    TRUE -> YYAction (-435);
    FALSE -> YYAction (-435);
    DO -> YYAction (-435);
    INTCONST -> YYAction (-435);
    STRCONST -> YYAction (-435);
    LONGCONST -> YYAction (-435);
    FLTCONST -> YYAction (-435);
    DBLCONST -> YYAction (-435);
    CHRCONST -> YYAction (-435);
    REGEXP -> YYAction (-435);
    BIGCONST -> YYAction (-435);
    DCOLON -> YYAction (-210);
    SOMEOP -> YYAction (-435);
    _ -> (YYAction yyErr);
  };
};
private yyaction375 t =   case yychar t of {
  '-' -> YYAction (-434);
  '.' -> YYAction (-434);
  '(' -> YYAction (-434);
  ',' -> YYAction (-211);
  '|' -> YYAction (-434);
  '[' -> YYAction (-434);
  '?' -> YYAction (-434);
  '!' -> YYAction (-434);
  '=' -> YYAction (-434);
  '_' -> YYAction (-434);
  _ ->   case yytoken t of {
    VARID -> YYAction (-434);
    CONID -> YYAction (-434);
    QUALIFIER -> YYAction (-434);
    TRUE -> YYAction (-434);
    FALSE -> YYAction (-434);
    DO -> YYAction (-434);
    INTCONST -> YYAction (-434);
    STRCONST -> YYAction (-434);
    LONGCONST -> YYAction (-434);
    FLTCONST -> YYAction (-434);
    DBLCONST -> YYAction (-434);
    CHRCONST -> YYAction (-434);
    REGEXP -> YYAction (-434);
    BIGCONST -> YYAction (-434);
    DCOLON -> YYAction (-211);
    SOMEOP -> YYAction (-434);
    _ -> (YYAction yyErr);
  };
};
private yyaction376 t = YYAction (-32);
private yyaction377 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 501;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction378 t = YYAction (-206);
private yyaction379 t = YYAction (-208);
private yyaction380 t = YYAction (-214);
private yyaction381 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 506;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 249;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 503;
    PROTECTED -> YYAction 504;
    PUBLIC -> YYAction 505;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction382 t =   case yychar t of {
  ',' -> YYAction (-372);
  '=' -> YYAction (-372);
  _ ->   case yytoken t of {
    GETS -> YYAction 286;
    ARROW -> YYAction (-372);
    _ -> (YYAction yyErr);
  };
};
private yyaction383 t =   case yychar t of {
  ',' -> YYAction 512;
  '=' -> YYAction (-374);
  _ ->   case yytoken t of {
    ARROW -> YYAction (-374);
    _ -> (YYAction yyErr);
  };
};
private yyaction384 t =   case yychar t of {
  '=' -> YYAction 514;
  _ ->   case yytoken t of {
    ARROW -> YYAction 513;
    _ -> (YYAction yyErr);
  };
};
private yyaction385 t = YYAction (-346);
private yyaction386 t = YYAction (-379);
private yyaction387 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    _ -> (YYAction yyErr);
  };
};
private yyaction388 t = YYAction (-193);
private yyaction389 t = YYAction (-24);
private yyaction390 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 274;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction391 t = YYAction (-394);
private yyaction392 t =   case yytoken t of {
    ELSE -> YYAction 518;
    _ -> (YYAction yyErr);
  };
private yyaction393 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction394 t = YYAction (-360);
private yyaction395 t =   case yychar t of {
  '|' -> YYAction 270;
  '=' -> YYAction 514;
  _ ->   case yytoken t of {
    ARROW -> YYAction 513;
    _ -> (YYAction yyErr);
  };
};
private yyaction396 t =   case yychar t of {
  ';' -> YYAction 522;
  '}' -> YYAction (-383);
  _ ->   case yytoken t of {
    WHERE -> YYAction 259;
    _ -> (YYAction yyErr);
  };
};
private yyaction397 t =   case yychar t of {
  '}' -> YYAction 524;
  _ -> (YYAction yyErr);
};
private yyaction398 t = YYAction (-144);
private yyaction399 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction400 t =   case yychar t of {
  '}' -> YYAction 526;
  _ -> (YYAction yyErr);
};
private yyaction401 t = YYAction (-373);
private yyaction402 t = YYAction (-364);
private yyaction403 t = YYAction (-371);
private yyaction404 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-466);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction405 t = YYAction (-441);
private yyaction406 t = YYAction (-440);
private yyaction407 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ']' -> YYAction (-368);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction408 t = YYAction (-447);
private yyaction409 t = YYAction (-446);
private yyaction410 t = YYAction (-459);
private yyaction411 t = YYAction (-451);
private yyaction412 t = YYAction (-240);
private yyaction413 t = YYAction (-239);
private yyaction414 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction415 t = YYAction (-234);
private yyaction416 t =   case yychar t of {
  '(' -> YYAction 532;
  _ ->   case yytoken t of {
    VARID -> YYAction 530;
    SOMEOP -> YYAction 531;
    _ -> (YYAction yyErr);
  };
};
private yyaction417 t = YYAction (-265);
private yyaction418 t = YYAction (-255);
private yyaction419 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction420 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction421 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction422 t = YYAction (-264);
private yyaction423 t = YYAction (-258);
private yyaction424 t =   case yychar t of {
  '-' -> YYAction (-243);
  ';' -> YYAction (-243);
  '}' -> YYAction (-243);
  ')' -> YYAction (-243);
  ',' -> YYAction (-243);
  '|' -> YYAction (-243);
  ']' -> YYAction (-243);
  '=' -> YYAction (-243);
  _ ->   case yytoken t of {
    ARROW -> YYAction 319;
    DOCUMENTATION -> YYAction (-243);
    WHERE -> YYAction (-243);
    CLASS -> YYAction (-243);
    THEN -> YYAction (-243);
    ELSE -> YYAction (-243);
    OF -> YYAction (-243);
    THROWS -> YYAction (-243);
    DCOLON -> YYAction (-243);
    GETS -> YYAction (-243);
    DOTDOT -> YYAction (-243);
    SOMEOP -> YYAction (-243);
    _ -> (YYAction yyErr);
  };
};
private yyaction425 t = YYAction (-244);
private yyaction426 t = YYAction (-241);
private yyaction427 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 539;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction428 t =   case yychar t of {
  '}' -> YYAction 540;
  _ -> (YYAction yyErr);
};
private yyaction429 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 541;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction430 t = YYAction (-424);
private yyaction431 t = YYAction (-425);
private yyaction432 t = YYAction (-419);
private yyaction433 t = YYAction (-456);
private yyaction434 t = YYAction (-417);
private yyaction435 t = YYAction (-418);
private yyaction436 t = YYAction (-457);
private yyaction437 t =   case yychar t of {
  '=' -> YYAction 543;
  '}' -> YYAction (-458);
  ',' -> YYAction (-458);
  _ ->   case yytoken t of {
    GETS -> YYAction 542;
    _ -> (YYAction yyErr);
  };
};
private yyaction438 t = YYAction (-454);
private yyaction439 t =   case yychar t of {
  '(' -> YYAction 334;
  ';' -> YYAction (-148);
  '}' -> YYAction (-148);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PUBLIC -> YYAction 333;
    _ -> (YYAction yyErr);
  };
};
private yyaction440 t = YYAction (-147);
private yyaction441 t = YYAction (-152);
private yyaction442 t =   case yychar t of {
  '(' -> YYAction 545;
  ')' -> YYAction (-189);
  ',' -> YYAction (-189);
  _ ->   case yytoken t of {
    VARID -> YYAction (-189);
    CONID -> YYAction (-189);
    SOMEOP -> YYAction (-189);
    _ -> (YYAction yyErr);
  };
};
private yyaction443 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 546;
    _ -> (YYAction yyErr);
  };
};
private yyaction444 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 442;
    QUALIFIER -> YYAction 443;
    PUBLIC -> YYAction 444;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction445 t = YYAction (-150);
private yyaction446 t =   case yychar t of {
  ')' -> YYAction 548;
  _ -> (YYAction yyErr);
};
private yyaction447 t =   case yychar t of {
  ',' -> YYAction 549;
  ')' -> YYAction (-153);
  _ -> (YYAction yyErr);
};
private yyaction448 t =   case yychar t of {
  ')' -> YYAction (-162);
  ',' -> YYAction (-162);
  _ ->   case yytoken t of {
    VARID -> YYAction 550;
    CONID -> YYAction 551;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction449 t = YYAction (-156);
private yyaction450 t = YYAction (-159);
private yyaction451 t = YYAction (-160);
private yyaction452 t = YYAction (-161);
private yyaction453 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 442;
    QUALIFIER -> YYAction 443;
    PUBLIC -> YYAction 444;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction454 t = YYAction (-47);
private yyaction455 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction456 t =   case yytoken t of {
    WHERE -> YYAction 556;
    _ -> (YYAction yyErr);
  };
private yyaction457 t = YYAction (-212);
private yyaction458 t = YYAction (-210);
private yyaction459 t = YYAction (-211);
private yyaction460 t =   case yytoken t of {
    VARID -> YYAction 342;
    CONID -> YYAction 343;
    QUALIFIER -> YYAction 344;
    PACKAGE -> YYAction 345;
    STRCONST -> YYAction 346;
    _ -> (YYAction yyErr);
  };
private yyaction461 t = YYAction (-11);
private yyaction462 t =   case yytoken t of {
    VARID -> YYAction 342;
    CONID -> YYAction 343;
    QUALIFIER -> YYAction 344;
    PACKAGE -> YYAction 345;
    STRCONST -> YYAction 346;
    _ -> (YYAction yyErr);
  };
private yyaction463 t = YYAction (-296);
private yyaction464 t =   case yychar t of {
  ',' -> YYAction 560;
  ';' -> YYAction (-248);
  '}' -> YYAction (-248);
  ')' -> YYAction (-248);
  '|' -> YYAction (-248);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-248);
    _ -> (YYAction yyErr);
  };
};
private yyaction465 t =   case yychar t of {
  '}' -> YYAction 561;
  _ -> (YYAction yyErr);
};
private yyaction466 t = YYAction (-224);
private yyaction467 t =   case yychar t of {
  ';' -> YYAction (-229);
  '}' -> YYAction (-229);
  '|' -> YYAction (-229);
  _ ->   case yytoken t of {
    THROWS -> YYAction 562;
    _ -> (YYAction yyErr);
  };
};
private yyaction468 t =   case yychar t of {
  '|' -> YYAction 563;
  ';' -> YYAction (-230);
  '}' -> YYAction (-230);
  _ -> (YYAction yyErr);
};
private yyaction469 t = YYAction (-232);
private yyaction470 t =   case yytoken t of {
    DCOLON -> YYAction 416;
    _ -> (YYAction yyErr);
  };
private yyaction471 t =   case yychar t of {
  '{' -> YYAction 564;
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  ';' -> YYAction (-317);
  '}' -> YYAction (-317);
  '|' -> YYAction (-317);
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    DOCUMENTATION -> YYAction (-317);
    WHERE -> YYAction (-317);
    _ -> (YYAction yyErr);
  };
};
private yyaction472 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    PRIVATE -> YYAction 473;
    PROTECTED -> YYAction 474;
    PUBLIC -> YYAction 475;
    _ -> (YYAction yyErr);
  };
};
private yyaction473 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    _ -> (YYAction yyErr);
  };
};
private yyaction474 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    _ -> (YYAction yyErr);
  };
};
private yyaction475 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    _ -> (YYAction yyErr);
  };
};
private yyaction476 t =   case yytoken t of {
    CONID -> YYAction 471;
    _ -> (YYAction yyErr);
  };
private yyaction477 t =   case yytoken t of {
    CONID -> YYAction 471;
    _ -> (YYAction yyErr);
  };
private yyaction478 t = YYAction (-302);
private yyaction479 t =   case yychar t of {
  ';' -> YYAction (-307);
  '}' -> YYAction (-307);
  '|' -> YYAction (-307);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 573;
    WHERE -> YYAction (-307);
    _ -> (YYAction yyErr);
  };
};
private yyaction480 t = YYAction (-310);
private yyaction481 t = YYAction (-316);
private yyaction482 t = YYAction (-304);
private yyaction483 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    DOCUMENTATION -> YYAction 472;
    PRIVATE -> YYAction 473;
    PROTECTED -> YYAction 474;
    PUBLIC -> YYAction 475;
    _ -> (YYAction yyErr);
  };
};
private yyaction484 t = YYAction (-292);
private yyaction485 t =   case yytoken t of {
    NATIVE -> YYAction 575;
    _ -> (YYAction yyErr);
  };
private yyaction486 t =   case yytoken t of {
    NATIVE -> YYAction 576;
    _ -> (YYAction yyErr);
  };
private yyaction487 t =   case yytoken t of {
    VARID -> YYAction 342;
    CONID -> YYAction 343;
    QUALIFIER -> YYAction 344;
    PACKAGE -> YYAction 345;
    STRCONST -> YYAction 346;
    _ -> (YYAction yyErr);
  };
private yyaction488 t = YYAction (-300);
private yyaction489 t =   case yychar t of {
  '|' -> YYAction 579;
  ';' -> YYAction (-305);
  '}' -> YYAction (-305);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-305);
    _ -> (YYAction yyErr);
  };
};
private yyaction490 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    DOCUMENTATION -> YYAction 472;
    NATIVE -> YYAction 484;
    PRIVATE -> YYAction 473;
    PROTECTED -> YYAction 474;
    PUBLIC -> YYAction 475;
    PURE -> YYAction 485;
    MUTABLE -> YYAction 486;
    _ -> (YYAction yyErr);
  };
};
private yyaction491 t =   case yychar t of {
  ')' -> YYAction (-273);
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction492 t = YYAction (-276);
private yyaction493 t =   case yychar t of {
  '(' -> YYAction 355;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction494 t =   case yychar t of {
  ')' -> YYAction (-281);
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction495 t = YYAction (-284);
private yyaction496 t =   case yychar t of {
  ')' -> YYAction 312;
  ',' -> YYAction 87;
  _ ->   case yytoken t of {
    ARROW -> YYAction 311;
    _ -> (YYAction yyErr);
  };
};
private yyaction497 t =   case yychar t of {
  ']' -> YYAction 317;
  _ -> (YYAction yyErr);
};
private yyaction498 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    _ -> (YYAction yyErr);
  };
};
private yyaction499 t = YYAction (-339);
private yyaction500 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction501 t = YYAction (-344);
private yyaction502 t =   case yychar t of {
  '}' -> YYAction 587;
  _ -> (YYAction yyErr);
};
private yyaction503 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 249;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction504 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 249;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction505 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 249;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction506 t = YYAction (-342);
private yyaction507 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ';' -> YYAction (-137);
  '}' -> YYAction (-137);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 249;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 503;
    PROTECTED -> YYAction 504;
    PUBLIC -> YYAction 505;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction508 t = YYAction (-133);
private yyaction509 t =   case yychar t of {
  '}' -> YYAction 592;
  _ -> (YYAction yyErr);
};
private yyaction510 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-127);
  _ -> (YYAction yyErr);
};
private yyaction511 t = YYAction (-139);
private yyaction512 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '=' -> YYAction (-376);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    ARROW -> YYAction (-376);
    _ -> (YYAction yyErr);
  };
};
private yyaction513 t = YYAction (-361);
private yyaction514 t = YYAction (-362);
private yyaction515 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction516 t = YYAction (-192);
private yyaction517 t = YYAction (-183);
private yyaction518 t = YYAction (-393);
private yyaction519 t = YYAction (-399);
private yyaction520 t = YYAction (-381);
private yyaction521 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction522 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-385);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction523 t = YYAction (-382);
private yyaction524 t = YYAction (-400);
private yyaction525 t = YYAction (-401);
private yyaction526 t =   case yychar t of {
  ';' -> YYAction (-365);
  '}' -> YYAction (-365);
  ',' -> YYAction (-365);
  ']' -> YYAction (-365);
  _ ->   case yytoken t of {
    IN -> YYAction 399;
    _ -> (YYAction yyErr);
  };
};
private yyaction527 t = YYAction (-465);
private yyaction528 t = YYAction (-367);
private yyaction529 t = YYAction (-238);
private yyaction530 t = YYAction (-269);
private yyaction531 t = YYAction (-268);
private yyaction532 t =   case yychar t of {
  '(' -> YYAction 532;
  _ ->   case yytoken t of {
    VARID -> YYAction 530;
    SOMEOP -> YYAction 531;
    _ -> (YYAction yyErr);
  };
};
private yyaction533 t =   case yychar t of {
  ')' -> YYAction 599;
  _ -> (YYAction yyErr);
};
private yyaction534 t =   case yychar t of {
  ')' -> YYAction (-267);
  _ ->   case yytoken t of {
    ARROW -> YYAction 600;
    _ -> (YYAction yyErr);
  };
};
private yyaction535 t =   case yychar t of {
  ')' -> YYAction 601;
  _ -> (YYAction yyErr);
};
private yyaction536 t =   case yychar t of {
  '|' -> YYAction 602;
  ')' -> YYAction (-250);
  _ -> (YYAction yyErr);
};
private yyaction537 t =   case yychar t of {
  ')' -> YYAction 603;
  _ -> (YYAction yyErr);
};
private yyaction538 t = YYAction (-247);
private yyaction539 t = YYAction (-423);
private yyaction540 t = YYAction (-421);
private yyaction541 t = YYAction (-422);
private yyaction542 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction543 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction544 t = YYAction (-146);
private yyaction545 t =   case yychar t of {
  ')' -> YYAction 605;
  _ ->   case yytoken t of {
    VARID -> YYAction 550;
    CONID -> YYAction 551;
    PUBLIC -> YYAction 604;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction546 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
};
private yyaction547 t = YYAction (-164);
private yyaction548 t = YYAction (-151);
private yyaction549 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  ')' -> YYAction (-154);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 442;
    QUALIFIER -> YYAction 443;
    PUBLIC -> YYAction 444;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction550 t = YYAction (-171);
private yyaction551 t = YYAction (-172);
private yyaction552 t = YYAction (-173);
private yyaction553 t = YYAction (-163);
private yyaction554 t =   case yychar t of {
  ')' -> YYAction 610;
  _ -> (YYAction yyErr);
};
private yyaction555 t = YYAction (-49);
private yyaction556 t =   case yychar t of {
  '{' -> YYAction 611;
  _ -> (YYAction yyErr);
};
private yyaction557 t = YYAction (-45);
private yyaction558 t = YYAction (-9);
private yyaction559 t = YYAction (-10);
private yyaction560 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction561 t = YYAction (-295);
private yyaction562 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction563 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction564 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 615;
    PUBLIC -> YYAction 616;
    _ -> (YYAction yyErr);
  };
};
private yyaction565 t = YYAction (-320);
private yyaction566 t = YYAction (-319);
private yyaction567 t = YYAction (-309);
private yyaction568 t = YYAction (-312);
private yyaction569 t = YYAction (-313);
private yyaction570 t = YYAction (-311);
private yyaction571 t = YYAction (-315);
private yyaction572 t = YYAction (-314);
private yyaction573 t = YYAction (-308);
private yyaction574 t = YYAction (-301);
private yyaction575 t = YYAction (-290);
private yyaction576 t = YYAction (-291);
private yyaction577 t =   case yychar t of {
  '{' -> YYAction 347;
  ';' -> YYAction (-293);
  '}' -> YYAction (-293);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-293);
    _ -> (YYAction yyErr);
  };
};
private yyaction578 t = YYAction (-297);
private yyaction579 t =   case yychar t of {
  '?' -> YYAction 476;
  '!' -> YYAction 477;
  _ ->   case yytoken t of {
    CONID -> YYAction 471;
    DOCUMENTATION -> YYAction 472;
    PRIVATE -> YYAction 473;
    PROTECTED -> YYAction 474;
    PUBLIC -> YYAction 475;
    _ -> (YYAction yyErr);
  };
};
private yyaction580 t =   case yytoken t of {
    VARID -> YYAction 342;
    CONID -> YYAction 343;
    QUALIFIER -> YYAction 344;
    PACKAGE -> YYAction 345;
    STRCONST -> YYAction 346;
    _ -> (YYAction yyErr);
  };
private yyaction581 t = YYAction (-299);
private yyaction582 t = YYAction (-274);
private yyaction583 t =   case yychar t of {
  ';' -> YYAction (-341);
  '}' -> YYAction (-341);
  _ ->   case yytoken t of {
    WHERE -> YYAction 268;
    _ -> (YYAction yyErr);
  };
};
private yyaction584 t = YYAction (-282);
private yyaction585 t = YYAction (-285);
private yyaction586 t = YYAction (-340);
private yyaction587 t = YYAction (-345);
private yyaction588 t = YYAction (-134);
private yyaction589 t = YYAction (-135);
private yyaction590 t = YYAction (-136);
private yyaction591 t = YYAction (-138);
private yyaction592 t = YYAction (-343);
private yyaction593 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 125;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-128);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 249;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 503;
    PROTECTED -> YYAction 504;
    PUBLIC -> YYAction 505;
    PURE -> YYAction 124;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction594 t = YYAction (-375);
private yyaction595 t = YYAction (-377);
private yyaction596 t = YYAction (-380);
private yyaction597 t = YYAction (-384);
private yyaction598 t =   case yychar t of {
  ')' -> YYAction 632;
  _ -> (YYAction yyErr);
};
private yyaction599 t = YYAction (-260);
private yyaction600 t =   case yychar t of {
  '(' -> YYAction 532;
  _ ->   case yytoken t of {
    VARID -> YYAction 530;
    SOMEOP -> YYAction 531;
    _ -> (YYAction yyErr);
  };
};
private yyaction601 t = YYAction (-256);
private yyaction602 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction603 t = YYAction (-257);
private yyaction604 t =   case yytoken t of {
    VARID -> YYAction 550;
    CONID -> YYAction 551;
    PUBLIC -> YYAction 604;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
private yyaction605 t = YYAction (-158);
private yyaction606 t =   case yychar t of {
  ')' -> YYAction 636;
  _ -> (YYAction yyErr);
};
private yyaction607 t =   case yychar t of {
  ')' -> YYAction (-165);
  ',' -> YYAction (-165);
  _ ->   case yytoken t of {
    VARID -> YYAction 550;
    CONID -> YYAction 551;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction608 t =   case yychar t of {
  ',' -> YYAction 638;
  ')' -> YYAction (-168);
  _ -> (YYAction yyErr);
};
private yyaction609 t = YYAction (-155);
private yyaction610 t = YYAction (-149);
private yyaction611 t =   case yychar t of {
  '-' -> YYAction 688;
  ';' -> YYAction 689;
  '{' -> YYAction 690;
  '}' -> YYAction 691;
  '.' -> YYAction 692;
  '(' -> YYAction 693;
  ')' -> YYAction 694;
  ',' -> YYAction 695;
  '|' -> YYAction 696;
  '[' -> YYAction 697;
  ']' -> YYAction 698;
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  '=' -> YYAction 701;
  '\\' -> YYAction 702;
  _ ->   case yytoken t of {
    VARID -> YYAction 639;
    CONID -> YYAction 640;
    QVARID -> YYAction 641;
    QCONID -> YYAction 642;
    QUALIFIER -> YYAction 643;
    DOCUMENTATION -> YYAction 644;
    PACKAGE -> YYAction 645;
    IMPORT -> YYAction 646;
    INFIX -> YYAction 647;
    INFIXR -> YYAction 648;
    INFIXL -> YYAction 649;
    NATIVE -> YYAction 650;
    DATA -> YYAction 651;
    WHERE -> YYAction 652;
    CLASS -> YYAction 653;
    INSTANCE -> YYAction 654;
    ABSTRACT -> YYAction 655;
    TYPE -> YYAction 656;
    TRUE -> YYAction 657;
    FALSE -> YYAction 658;
    IF -> YYAction 659;
    THEN -> YYAction 660;
    ELSE -> YYAction 661;
    CASE -> YYAction 662;
    OF -> YYAction 663;
    DERIVE -> YYAction 664;
    LET -> YYAction 665;
    IN -> YYAction 666;
    DO -> YYAction 667;
    FORALL -> YYAction 668;
    PRIVATE -> YYAction 669;
    PROTECTED -> YYAction 670;
    PUBLIC -> YYAction 671;
    PURE -> YYAction 672;
    THROWS -> YYAction 673;
    MUTABLE -> YYAction 674;
    INTCONST -> YYAction 675;
    STRCONST -> YYAction 676;
    LONGCONST -> YYAction 677;
    FLTCONST -> YYAction 678;
    DBLCONST -> YYAction 679;
    CHRCONST -> YYAction 680;
    ARROW -> YYAction 681;
    DCOLON -> YYAction 682;
    GETS -> YYAction 683;
    EARROW -> YYAction 684;
    DOTDOT -> YYAction 685;
    SOMEOP -> YYAction 686;
    INTERPRET -> YYAction 687;
    _ -> (YYAction yyErr);
  };
};
private yyaction612 t = YYAction (-249);
private yyaction613 t = YYAction (-228);
private yyaction614 t = YYAction (-231);
private yyaction615 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction616 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
};
private yyaction617 t =   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
private yyaction618 t =   case yytoken t of {
    VARID -> YYAction 192;
    _ -> (YYAction yyErr);
  };
private yyaction619 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PRIVATE -> YYAction 615;
    PUBLIC -> YYAction 616;
    _ -> (YYAction yyErr);
  };
};
private yyaction620 t = YYAction (-338);
private yyaction621 t =   case yychar t of {
  '}' -> YYAction 710;
  _ -> (YYAction yyErr);
};
private yyaction622 t =   case yychar t of {
  ',' -> YYAction 712;
  '}' -> YYAction (-323);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 711;
    _ -> (YYAction yyErr);
  };
};
private yyaction623 t =   case yytoken t of {
    DCOLON -> YYAction 713;
    _ -> (YYAction yyErr);
  };
private yyaction624 t =   case yychar t of {
  ',' -> YYAction 714;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-330);
    _ -> (YYAction yyErr);
  };
};
private yyaction625 t = YYAction (-332);
private yyaction626 t = YYAction (-335);
private yyaction627 t = YYAction (-294);
private yyaction628 t = YYAction (-306);
private yyaction629 t = YYAction (-298);
private yyaction630 t = YYAction (-277);
private yyaction631 t = YYAction (-129);
private yyaction632 t = YYAction (-270);
private yyaction633 t = YYAction (-266);
private yyaction634 t = YYAction (-251);
private yyaction635 t = YYAction (-167);
private yyaction636 t = YYAction (-157);
private yyaction637 t = YYAction (-166);
private yyaction638 t =   case yychar t of {
  ')' -> YYAction (-169);
  _ ->   case yytoken t of {
    VARID -> YYAction 550;
    CONID -> YYAction 551;
    PUBLIC -> YYAction 604;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction639 t = YYAction (-52);
private yyaction640 t = YYAction (-53);
private yyaction641 t = YYAction (-54);
private yyaction642 t = YYAction (-55);
private yyaction643 t = YYAction (-56);
private yyaction644 t = YYAction (-57);
private yyaction645 t = YYAction (-58);
private yyaction646 t = YYAction (-59);
private yyaction647 t = YYAction (-60);
private yyaction648 t = YYAction (-61);
private yyaction649 t = YYAction (-62);
private yyaction650 t = YYAction (-63);
private yyaction651 t = YYAction (-64);
private yyaction652 t = YYAction (-65);
private yyaction653 t = YYAction (-66);
private yyaction654 t = YYAction (-67);
private yyaction655 t = YYAction (-68);
private yyaction656 t = YYAction (-69);
private yyaction657 t = YYAction (-70);
private yyaction658 t = YYAction (-71);
private yyaction659 t = YYAction (-72);
private yyaction660 t = YYAction (-73);
private yyaction661 t = YYAction (-74);
private yyaction662 t = YYAction (-75);
private yyaction663 t = YYAction (-76);
private yyaction664 t = YYAction (-77);
private yyaction665 t = YYAction (-78);
private yyaction666 t = YYAction (-79);
private yyaction667 t = YYAction (-80);
private yyaction668 t = YYAction (-81);
private yyaction669 t = YYAction (-82);
private yyaction670 t = YYAction (-83);
private yyaction671 t = YYAction (-84);
private yyaction672 t = YYAction (-85);
private yyaction673 t = YYAction (-86);
private yyaction674 t = YYAction (-87);
private yyaction675 t = YYAction (-88);
private yyaction676 t = YYAction (-89);
private yyaction677 t = YYAction (-90);
private yyaction678 t = YYAction (-91);
private yyaction679 t = YYAction (-92);
private yyaction680 t = YYAction (-93);
private yyaction681 t = YYAction (-94);
private yyaction682 t = YYAction (-95);
private yyaction683 t = YYAction (-96);
private yyaction684 t = YYAction (-97);
private yyaction685 t = YYAction (-98);
private yyaction686 t = YYAction (-99);
private yyaction687 t = YYAction (-100);
private yyaction688 t = YYAction (-109);
private yyaction689 t = YYAction (-110);
private yyaction690 t =   case yychar t of {
  '-' -> YYAction 688;
  ';' -> YYAction 689;
  '{' -> YYAction 690;
  '}' -> YYAction 716;
  '.' -> YYAction 692;
  '(' -> YYAction 693;
  ')' -> YYAction 694;
  ',' -> YYAction 695;
  '|' -> YYAction 696;
  '[' -> YYAction 697;
  ']' -> YYAction 698;
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  '=' -> YYAction 701;
  '\\' -> YYAction 702;
  _ ->   case yytoken t of {
    VARID -> YYAction 639;
    CONID -> YYAction 640;
    QVARID -> YYAction 641;
    QCONID -> YYAction 642;
    QUALIFIER -> YYAction 643;
    DOCUMENTATION -> YYAction 644;
    PACKAGE -> YYAction 645;
    IMPORT -> YYAction 646;
    INFIX -> YYAction 647;
    INFIXR -> YYAction 648;
    INFIXL -> YYAction 649;
    NATIVE -> YYAction 650;
    DATA -> YYAction 651;
    WHERE -> YYAction 652;
    CLASS -> YYAction 653;
    INSTANCE -> YYAction 654;
    ABSTRACT -> YYAction 655;
    TYPE -> YYAction 656;
    TRUE -> YYAction 657;
    FALSE -> YYAction 658;
    IF -> YYAction 659;
    THEN -> YYAction 660;
    ELSE -> YYAction 661;
    CASE -> YYAction 662;
    OF -> YYAction 663;
    DERIVE -> YYAction 664;
    LET -> YYAction 665;
    IN -> YYAction 666;
    DO -> YYAction 667;
    FORALL -> YYAction 668;
    PRIVATE -> YYAction 669;
    PROTECTED -> YYAction 670;
    PUBLIC -> YYAction 671;
    PURE -> YYAction 672;
    THROWS -> YYAction 673;
    MUTABLE -> YYAction 674;
    INTCONST -> YYAction 675;
    STRCONST -> YYAction 676;
    LONGCONST -> YYAction 677;
    FLTCONST -> YYAction 678;
    DBLCONST -> YYAction 679;
    CHRCONST -> YYAction 680;
    ARROW -> YYAction 681;
    DCOLON -> YYAction 682;
    GETS -> YYAction 683;
    EARROW -> YYAction 684;
    DOTDOT -> YYAction 685;
    SOMEOP -> YYAction 686;
    INTERPRET -> YYAction 687;
    _ -> (YYAction yyErr);
  };
};
private yyaction691 t = YYAction (-51);
private yyaction692 t = YYAction (-107);
private yyaction693 t = YYAction (-105);
private yyaction694 t = YYAction (-106);
private yyaction695 t = YYAction (-101);
private yyaction696 t = YYAction (-102);
private yyaction697 t = YYAction (-103);
private yyaction698 t = YYAction (-104);
private yyaction699 t = YYAction (-108);
private yyaction700 t = YYAction (-111);
private yyaction701 t = YYAction (-112);
private yyaction702 t = YYAction (-113);
private yyaction703 t =   case yychar t of {
  '}' -> YYAction 718;
  _ -> (YYAction yyErr);
};
private yyaction704 t =   case yychar t of {
  '-' -> YYAction 688;
  ';' -> YYAction 689;
  '{' -> YYAction 690;
  '.' -> YYAction 692;
  '(' -> YYAction 693;
  ')' -> YYAction 694;
  ',' -> YYAction 695;
  '|' -> YYAction 696;
  '[' -> YYAction 697;
  ']' -> YYAction 698;
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  '=' -> YYAction 701;
  '\\' -> YYAction 702;
  '}' -> YYAction (-114);
  _ ->   case yytoken t of {
    VARID -> YYAction 639;
    CONID -> YYAction 640;
    QVARID -> YYAction 641;
    QCONID -> YYAction 642;
    QUALIFIER -> YYAction 643;
    DOCUMENTATION -> YYAction 644;
    PACKAGE -> YYAction 645;
    IMPORT -> YYAction 646;
    INFIX -> YYAction 647;
    INFIXR -> YYAction 648;
    INFIXL -> YYAction 649;
    NATIVE -> YYAction 650;
    DATA -> YYAction 651;
    WHERE -> YYAction 652;
    CLASS -> YYAction 653;
    INSTANCE -> YYAction 654;
    ABSTRACT -> YYAction 655;
    TYPE -> YYAction 656;
    TRUE -> YYAction 657;
    FALSE -> YYAction 658;
    IF -> YYAction 659;
    THEN -> YYAction 660;
    ELSE -> YYAction 661;
    CASE -> YYAction 662;
    OF -> YYAction 663;
    DERIVE -> YYAction 664;
    LET -> YYAction 665;
    IN -> YYAction 666;
    DO -> YYAction 667;
    FORALL -> YYAction 668;
    PRIVATE -> YYAction 669;
    PROTECTED -> YYAction 670;
    PUBLIC -> YYAction 671;
    PURE -> YYAction 672;
    THROWS -> YYAction 673;
    MUTABLE -> YYAction 674;
    INTCONST -> YYAction 675;
    STRCONST -> YYAction 676;
    LONGCONST -> YYAction 677;
    FLTCONST -> YYAction 678;
    DBLCONST -> YYAction 679;
    CHRCONST -> YYAction 680;
    ARROW -> YYAction 681;
    DCOLON -> YYAction 682;
    GETS -> YYAction 683;
    EARROW -> YYAction 684;
    DOTDOT -> YYAction 685;
    SOMEOP -> YYAction 686;
    INTERPRET -> YYAction 687;
    _ -> (YYAction yyErr);
  };
};
private yyaction705 t = YYAction (-334);
private yyaction706 t = YYAction (-333);
private yyaction707 t = YYAction (-337);
private yyaction708 t = YYAction (-336);
private yyaction709 t =   case yytoken t of {
    DCOLON -> YYAction 720;
    _ -> (YYAction yyErr);
  };
private yyaction710 t = YYAction (-318);
private yyaction711 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  '}' -> YYAction (-325);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 615;
    PUBLIC -> YYAction 616;
    _ -> (YYAction yyErr);
  };
};
private yyaction712 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  '}' -> YYAction (-324);
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 615;
    PUBLIC -> YYAction 616;
    _ -> (YYAction yyErr);
  };
};
private yyaction713 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction714 t =   case yychar t of {
  '?' -> YYAction 617;
  '!' -> YYAction 618;
  _ ->   case yytoken t of {
    VARID -> YYAction 192;
    PRIVATE -> YYAction 615;
    PUBLIC -> YYAction 616;
    _ -> (YYAction yyErr);
  };
};
private yyaction715 t = YYAction (-170);
private yyaction716 t =   case yychar t of {
  '-' -> YYAction 688;
  ';' -> YYAction 689;
  '{' -> YYAction 690;
  '.' -> YYAction 692;
  '(' -> YYAction 693;
  ')' -> YYAction 694;
  ',' -> YYAction 695;
  '|' -> YYAction 696;
  '[' -> YYAction 697;
  ']' -> YYAction 698;
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  '=' -> YYAction 701;
  '\\' -> YYAction 702;
  '}' -> YYAction (-118);
  _ ->   case yytoken t of {
    VARID -> YYAction 639;
    CONID -> YYAction 640;
    QVARID -> YYAction 641;
    QCONID -> YYAction 642;
    QUALIFIER -> YYAction 643;
    DOCUMENTATION -> YYAction 644;
    PACKAGE -> YYAction 645;
    IMPORT -> YYAction 646;
    INFIX -> YYAction 647;
    INFIXR -> YYAction 648;
    INFIXL -> YYAction 649;
    NATIVE -> YYAction 650;
    DATA -> YYAction 651;
    WHERE -> YYAction 652;
    CLASS -> YYAction 653;
    INSTANCE -> YYAction 654;
    ABSTRACT -> YYAction 655;
    TYPE -> YYAction 656;
    TRUE -> YYAction 657;
    FALSE -> YYAction 658;
    IF -> YYAction 659;
    THEN -> YYAction 660;
    ELSE -> YYAction 661;
    CASE -> YYAction 662;
    OF -> YYAction 663;
    DERIVE -> YYAction 664;
    LET -> YYAction 665;
    IN -> YYAction 666;
    DO -> YYAction 667;
    FORALL -> YYAction 668;
    PRIVATE -> YYAction 669;
    PROTECTED -> YYAction 670;
    PUBLIC -> YYAction 671;
    PURE -> YYAction 672;
    THROWS -> YYAction 673;
    MUTABLE -> YYAction 674;
    INTCONST -> YYAction 675;
    STRCONST -> YYAction 676;
    LONGCONST -> YYAction 677;
    FLTCONST -> YYAction 678;
    DBLCONST -> YYAction 679;
    CHRCONST -> YYAction 680;
    ARROW -> YYAction 681;
    DCOLON -> YYAction 682;
    GETS -> YYAction 683;
    EARROW -> YYAction 684;
    DOTDOT -> YYAction 685;
    SOMEOP -> YYAction 686;
    INTERPRET -> YYAction 687;
    _ -> (YYAction yyErr);
  };
};
private yyaction717 t =   case yychar t of {
  '}' -> YYAction 726;
  _ -> (YYAction yyErr);
};
private yyaction718 t = YYAction (-50);
private yyaction719 t = YYAction (-115);
private yyaction720 t =   case yychar t of {
  '(' -> YYAction 200;
  '[' -> YYAction 201;
  _ ->   case yytoken t of {
    VARID -> YYAction 197;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 198;
    FORALL -> YYAction 199;
    _ -> (YYAction yyErr);
  };
};
private yyaction721 t = YYAction (-327);
private yyaction722 t = YYAction (-326);
private yyaction723 t = YYAction (-328);
private yyaction724 t = YYAction (-331);
private yyaction725 t = YYAction (-119);
private yyaction726 t =   case yychar t of {
  '-' -> YYAction 688;
  ';' -> YYAction 689;
  '{' -> YYAction 690;
  '.' -> YYAction 692;
  '(' -> YYAction 693;
  ')' -> YYAction 694;
  ',' -> YYAction 695;
  '|' -> YYAction 696;
  '[' -> YYAction 697;
  ']' -> YYAction 698;
  '?' -> YYAction 699;
  '!' -> YYAction 700;
  '=' -> YYAction 701;
  '\\' -> YYAction 702;
  '}' -> YYAction (-116);
  _ ->   case yytoken t of {
    VARID -> YYAction 639;
    CONID -> YYAction 640;
    QVARID -> YYAction 641;
    QCONID -> YYAction 642;
    QUALIFIER -> YYAction 643;
    DOCUMENTATION -> YYAction 644;
    PACKAGE -> YYAction 645;
    IMPORT -> YYAction 646;
    INFIX -> YYAction 647;
    INFIXR -> YYAction 648;
    INFIXL -> YYAction 649;
    NATIVE -> YYAction 650;
    DATA -> YYAction 651;
    WHERE -> YYAction 652;
    CLASS -> YYAction 653;
    INSTANCE -> YYAction 654;
    ABSTRACT -> YYAction 655;
    TYPE -> YYAction 656;
    TRUE -> YYAction 657;
    FALSE -> YYAction 658;
    IF -> YYAction 659;
    THEN -> YYAction 660;
    ELSE -> YYAction 661;
    CASE -> YYAction 662;
    OF -> YYAction 663;
    DERIVE -> YYAction 664;
    LET -> YYAction 665;
    IN -> YYAction 666;
    DO -> YYAction 667;
    FORALL -> YYAction 668;
    PRIVATE -> YYAction 669;
    PROTECTED -> YYAction 670;
    PUBLIC -> YYAction 671;
    PURE -> YYAction 672;
    THROWS -> YYAction 673;
    MUTABLE -> YYAction 674;
    INTCONST -> YYAction 675;
    STRCONST -> YYAction 676;
    LONGCONST -> YYAction 677;
    FLTCONST -> YYAction 678;
    DBLCONST -> YYAction 679;
    CHRCONST -> YYAction 680;
    ARROW -> YYAction 681;
    DCOLON -> YYAction 682;
    GETS -> YYAction 683;
    EARROW -> YYAction 684;
    DOTDOT -> YYAction 685;
    SOMEOP -> YYAction 686;
    INTERPRET -> YYAction 687;
    _ -> (YYAction yyErr);
  };
};
private yyaction727 t = YYAction (-329);
private yyaction728 t = YYAction (-117);
private reduce1 =  \(a,d,p)\w\b     -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce2 =  \(a,d,p)\w\_\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce3 = \_\d -> d
;
private reduce4 = \e -> do {
                                YYM.pure $ Program.Expression e}
;
private reduce5 =  \r -> do { g <- getST; pure (substRuntime g r) }
;
private reduce6 =  \t -> Token.value t 
;
private reduce7 =  \t -> Token.value t 
;
private reduce8 =  \t -> Token.value t 
;
private reduce9 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce10 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce11 =  \a\c   -> Token.value a ++ "." ++ c 
;
private reduce12 =  \x -> let s = Token.value x; i = length s - 1 in substr s 1 i 
;
private reduce13 =  \t     -> do {
                                                changeST Global.{sub <- SubSt.{
                                                    idKind <- insert (KeyTk t) (Left())}};
                                                YYM.pure (Token.value t, yyline t) }
;
private reduce14 =  \a\_\(c,p) -> (repljavakws (Token.value a) ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce15 =  \a\(c,p)   -> (Token.value a ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce16 =  \(nm, pos) -> (magicPack nm, pos) 
;
private reduce17 =  Token.value 
;
private reduce18 =  \b\a   -> (Token.value b ++ "\n" ++ a) 
;
private reduce19 =  \b\_\a -> (Token.value b ++ "\n" ++ a) 
;
private reduce20 =  \docu\p\b   -> (fst b, Just docu, snd b) 
;
private reduce21 =  \p\b        -> (fst b, Nothing, snd b) 
;
private reduce22 =  \docu\p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, Just docu, snd b) }
;
private reduce23 =  \p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, Nothing, snd b) }
;
private reduce24 =  \p\vs\v\qs\_ -> do {
                                                     g <- getST;
                                                     let {clause = unwords vs};
                                                     let {expected = ["inline" , "inline candidates"]};
                                                     when (clause `notElem` expected) do {
                                                        yyerror (yyline v) (show (head expected) ++ " expected instead of " ++ show clause)
                                                     };
                                                     changeST Global.{sub <- SubSt.{
                                                            toExport = qs}};
                                                     YYM.pure p;}
                                                 
;
private reduce25 =  Token.value 
;
private reduce26 =  single 
;
private reduce27 =  (:) 
;
private reduce28 =  const 1 
;
private reduce29 =  \_\n -> 1+n
;
private reduce31 =  const 
;
private reduce32 =  \a\_\b -> a ++ b 
;
private reduce33 =  single 
;
private reduce34 =  (:) 
;
private reduce37 =  \_\ds -> map (updVis Private) ds 
;
private reduce38 =  \_\ds -> map (updVis Protected) ds 
;
private reduce39 =  \_\ds -> map (updVis Public) ds 
;
private reduce40 =  \_\(d::Def) -> [d.{ctrs <- map updCtr}] 
;
private reduce41 =  single 
;
private reduce42 =  single 
;
private reduce43 =  single 
;
private reduce45 =  \_\m\t\i\js -> ModDcl {pos = yyline m, extends=t, implements=i, code=js }
;
private reduce46 =  Nothing 
;
private reduce47 =  \a\b -> Just b 
;
private reduce48 =  [] 
;
private reduce49 =  \_\taus -> taus 
;
private reduce50 =  \_\_\c\_ -> c  
;
private reduce51 =  \_\_\_   -> [] 
;
private reduce114 =  single 
;
private reduce115 =  (:) 
;
private reduce116 =  \a\b\c -> a:(b++[c]) 
;
private reduce117 =  \a\b\c\d -> (a:b)++(c:d) 
;
private reduce118 =  \a\b -> [a,b] 
;
private reduce119 =  \a\b\cs -> a:b:cs 
;
private reduce120 =  \t -> DocDcl {pos = yyline t, text = t.value}
;
private reduce121 =  single 
;
private reduce122 =  single 
;
private reduce123 =  single 
;
private reduce124 =  single 
;
private reduce125 =  single 
;
private reduce128 =  const 
;
private reduce129 =  \d\_\ds -> d ++ ds 
;
private reduce131 =  single 
;
private reduce134 =  \_\ds -> map (updVis Private) ds 
;
private reduce135 =  \_\ds -> map (updVis Protected) ds 
;
private reduce136 =  \_\ds -> map (updVis Public) ds 
;
private reduce137 =  single 
;
private reduce138 =  (:) 
;
private reduce143 =  const 
;
private reduce144 =  \ds1\_\ds2 -> ds1 ++ ds2 
;
private reduce145 =  \i\b\c -> ImpDcl {pos=snd b, pack=fst b, imports=c, as=Nothing} 
;
private reduce146 =  \i\p\a\c\l -> do
            when (Token.value a != "as") do
                yyerror (yyline a) (show "as" ++ " expected instead of " ++ show (Token.value a))
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce147 =  \i\p\c\l -> do
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce148 =  linkAll 
;
private reduce149 =  \v\_\is\_ -> do
            when ( v.value `notElem` [ "except", "excluding", "without", "auÃer", "ohne", "hiding" ]) do
                yyerror (yyline v) (show "hiding" ++ " expected instead of " ++ show v.value)
            YYM.pure linkAll.{items=is}
        
;
private reduce150 =  \_\_    -> linkNone 
;
private reduce151 =  \_\is\_ -> linkNone.{items = is}  
;
private reduce152 =  \_\il   -> ImportList.{publik = true} il 
;
private reduce153 =  single 
;
private reduce154 =  \s\_ -> [s] 
;
private reduce155 =  liste  
;
private reduce156 =  \v        -> protoItem.{ name = v } 
;
private reduce157 =  \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} 
;
private reduce158 =  \v\_\_    -> protoItem.{ name = Simple v, members = Just []} 
;
private reduce159 =  \v        -> protoItem.{ name = v } 
;
private reduce160 =  \t        -> protoItem.{ name = opSname t } 
;
private reduce161 =  \v        -> protoItem.{ name = Simple v} 
;
private reduce162 =  \s      -> ImportItem.{alias = (enclosed . Token.value . SName.id . ImportItem.name) s} s
;
private reduce163 =  \s\a    -> ImportItem.{alias = enclosed (Token.value a)} s 
;
private reduce164 =  \_\s    -> ImportItem.export s 
;
private reduce165 =  \v     -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value v)} 
;
private reduce166 =  \v\a   -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value a)} 
;
private reduce167 =  \_\s   -> ImportItem.export s 
;
private reduce168 =  single 
;
private reduce169 =  \s\_ -> [s] 
;
private reduce170 =  liste  
;
private reduce173 =  \v -> do { op <- unqualified v; pure op }
;
private reduce176 =  Token.{tokid = VARID} 
;
private reduce177 =  Token.{tokid = VARID} 
;
private reduce178 =  Token.{tokid = VARID} 
;
private reduce179 =  Token.{tokid = VARID} 
;
private reduce180 =  Token.{tokid = VARID} 
;
private reduce181 =  Token.{tokid = VARID} 
;
private reduce182 =  single 
;
private reduce183 =  liste  
;
private reduce184 =  \n\t\v     -> With2 n t v
;
private reduce185 =  \t\v       -> With1 t v
;
private reduce186 =  \v         -> Simple v 
;
private reduce187 =  \n\t\v     -> With2 n t v
;
private reduce188 =  \t\v       -> With1 t v
;
private reduce189 =  \v         -> Simple v 
;
private reduce192 =  \n\t\v     -> With2 n t v
;
private reduce193 =  \t\v       -> With1 t v
;
private reduce194 =  Simple  
;
private reduce195 =  opSname 
;
private reduce199 =  \f\i -> do
                                    t <- infixop (yyline i) NOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce200 =  \f\i -> do
                                    t <- infixop (yyline i) LOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce201 =  \f\i -> do
                                    t <- infixop (yyline i) ROP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce202 =  Token.value 
;
private reduce203 =  Token.value 
;
private reduce204 =  Token.value 
;
private reduce205 =  single  
;
private reduce206 =  (:) 
;
private reduce207 =  \(def::Def)\o -> def.{ops = o}
;
private reduce208 =  \as\_\s -> map (annotation s) as 
;
private reduce210 =  \_\a\_ -> do unqualified a 
;
private reduce211 =  \_\a\_ -> a 
;
private reduce212 =  \_\a\_ -> a 
;
private reduce213 =  single   
;
private reduce214 =  liste    
;
private reduce215 =  \_\(d::Def) -> d.{isPure = true} 
;
private reduce220 =  \o -> do unqualified o 
;
private reduce222 =  \o -> do unqualified o >>= pure . _.value 
;
private reduce223 =  Token.value 
;
private reduce224 =  \f\j\g -> (f,j,Just g) 
;
private reduce225 =  \f\j -> (f,j,Nothing) 
;
private reduce226 =  \f\g -> (f,Token.value f, Just g)  
;
private reduce227 =  \f   -> (f,Token.value f, Nothing) 
;
private reduce228 =  \a\_\c -> (a, c) 
;
private reduce229 =  \a -> (a, [])    
;
private reduce230 =  single 
;
private reduce231 =  liste 
;
private reduce232 =  \_\(fr,jv,ga)\col\t ->
                    NatDcl {pos=yyline fr, vis=Public, name=fr.value,
                                                meth=jv, txs=t, isPure=false,
                                                gargs = ga, 
                                                doc=Nothing}
;
private reduce233 =  single 
;
private reduce234 =  (:)    
;
private reduce235 =  Token.value 
;
private reduce237 =  ForAll [] 
;
private reduce238 =  \_\bs\_\r      -> ForAll  [ (b,KVar) | b <- bs ]  r 
;
private reduce240 =  \dot -> do
                                        when (Token.value dot != "â¢") do
                                            yyerror (yyline dot)
                                                ("'.' expected instead of " ++ show dot.value)
                                        YYM.pure dot
                                    
;
private reduce241 =  \tau\t\rho -> do
                                        context <- tauToCtx tau
                                        YYM.pure (Rho.{context} rho)
                                     
;
private reduce243 =  RhoTau [] 
;
private reduce244 =  \a\_\b     -> case a of
                                            TSig s -> RhoFun [] s b 
                                            _ -> RhoFun [] (ForAll [] (RhoTau [] a)) b 
;
private reduce246 =  TSig 
;
private reduce247 =  \a\f\b ->  case a of
                            TSig s -> TSig (ForAll [] (RhoFun [] s (RhoTau [] b))) 
                            _      -> TApp (TApp (TCon (yyline f) (fromBase f.{tokid=CONID, value="->"})) a) b 
                         
;
private reduce248 =  single 
;
private reduce249 =  liste  
;
private reduce250 =  single 
;
private reduce251 =  liste  
;
private reduce252 =  \taus -> Tau.mkapp (head taus) (tail taus) 
;
private reduce254 =  \(tn::SName) -> TCon (yyline tn.id) tn
;
private reduce255 =  \_\t\_ -> t 
;
private reduce256 = \_\t\(c::Token)\ts\_ ->
                            let
                                tus = t:ts;
                                i = length tus;
                                tname = fromBase c.{tokid=CONID, value=tuple i}
                            in  (TCon (yyline c) tname).mkapp tus
                        
;
private reduce257 =  \_\t\e\ts\_ -> mkEither (yyline e) t ts 
;
private reduce258 = \a\t\_ -> TApp (TCon (yyline a)
                                             (fromBase a.{tokid=CONID, value="[]"}))
                                        t 
;
private reduce259 =  \n         -> TVar (yyline n) KVar (Token.value n)  
;
private reduce260 =  \_\n\_\k\_ -> TVar (yyline n) k    (Token.value n)  
;
private reduce262 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="[]"} 
;
private reduce263 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="()"} 
;
private reduce264 =  \(z::Token)\n\_ -> fromBase z.{tokid=CONID, value=tuple (n+1)} 
;
private reduce265 =  \_\(a::Token)\_ -> fromBase a.{tokid=CONID, value="->"} 
;
private reduce266 =  \a\_\c -> KApp a c 
;
private reduce268 =  \star -> do
                                let w = Token.value star
                                when  (w != "*") do
                                    yyerror (yyline star) 
                                            ("expected `*`, found `" ++ w ++ "`") 
                                pure KType
                            
;
private reduce269 =  \v -> do
                                let w = Token.value v
                                if w == "generic" then pure KGen
                                else do
                                    yyerror (yyline v) 
                                            ("expected `generic` instead of `" ++ w ++ "`")
                                    pure KType
                            
;
private reduce270 =  \_\b\_ -> b 
;
private reduce271 =  \c\v -> Ctx {pos=Pos (SName.id c) v.pos.last, cname=c, tau=v} 
;
private reduce272 =  single 
;
private reduce273 =  \c\_ -> [c] 
;
private reduce274 =  liste  
;
private reduce275 =  single 
;
private reduce276 =  \_\x\_ -> x 
;
private reduce277 = 
        \_\ctxs\_\c\v\defs -> do
            sups <- classContext (Token.value c) ctxs (v::TauS).var
            pure ClaDcl{
                    pos = yyline c, 
                    vis = Public,
                    name = Token.value c,
                    clvar = v,
                    supers = sups,
                    defs,
                    doc = Nothing}
    
;
private reduce278 = 
        \kw\ctxs\defs -> case ctxs of
            Ctx{pos,cname,tau}:rest -> do
                unless (null rest) 
                    (yyerror (yyline kw) "classname missing after contexts")
                when (SName.{ty?} cname)
                    (yyerror (yyline cname.id) "classname must not be qualified") 
                pure ClaDcl {pos, vis = Public, name=cname.id.value,
                               clvar = tau, supers = [],
                               defs, doc = Nothing}
            _ -> Prelude.error "fatal: empty ccontext (cannot happen)" 
    
;
private reduce279 =  \c\t -> Ctx {pos=Pos (SName.id c) t.getpos.last, cname=c, tau=t} 
;
private reduce280 =  single 
;
private reduce281 =  \c\_ -> [c] 
;
private reduce282 =  liste  
;
private reduce283 =  single 
;
private reduce284 =  \_\x\_ -> x 
;
private reduce285 = 
        \ctxs\ea\cls\tau -> InsDcl {
            pos = yyline ea,
            vis = Public,
            clas = cls,
            typ = ForAll [] (RhoTau ctxs tau),
            defs = [],
            doc = Nothing}
    
;
private reduce286 = 
        \ctxs -> case ctxs of
            Ctx{pos, cname, tau}:rest -> do
                unless (null rest) 
                        (yyerror pos "classname missing after instance contexts")
                pure InsDcl {
                    pos, vis = Public, clas = cname,
                    typ = ForAll [] (RhoTau [] tau),
                    defs = [],
                    doc = Nothing,
                    }
            _ -> Prelude.error "fatal: empty instance context"
    
;
private reduce287 = 
        \ins\head\defs -> (head::Def).{defs, pos = yyline ins}
    
;
private reduce288 =  
        \d\(i::Def) -> DrvDcl {pos = yyline d, vis = Public, clas=i.clas, typ=i.typ, doc=Nothing}
    
;
private reduce289 =  \def\defs -> (def::Def).{defs = defs} 
;
private reduce290 =  \_\_ -> (true, false)  
;
private reduce291 =  \_\_ -> (false, true)  
;
private reduce292 =  \_   -> (false, false) 
;
private reduce293 =  \x     ->  (x; Nothing) 
;
private reduce294 =  \x\gs  ->  (x; Just gs) 
;
private reduce295 =  \_\ts\_   -> ts 
;
private reduce296 =  \_\_      -> [] 
;
private reduce297 = 
        \dat\d\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=[], defs=[],
                                    gargs,  
                                    isPure = fst pur, isMutable = snd pur, 
                                    doc=Nothing}
    
;
private reduce298 = 
        \dat\d\ds\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=ds, defs=[],
                                    gargs, 
                                    isPure = fst pur, isMutable = snd pur,
                                    doc=Nothing}
    
;
private reduce299 = 
        \dat\d\ds\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=ds, ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce300 = 
        \dat\d\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=[], ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce301 = 
        \dat\d\ds\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=ds, ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce302 = 
        \dat\d\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=[], ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce303 =  single 
;
private reduce304 =  (:) 
;
private reduce305 =  single 
;
private reduce306 =  liste  
;
private reduce308 =  \dc\doc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce309 =  \doc\dc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce311 =  \_\dc -> (dc::DConS).{vis = Public}    
;
private reduce312 =  \_\dc -> (dc::DConS).{vis = Private}   
;
private reduce313 =  \_\dc -> (dc::DConS).{vis = Protected} 
;
private reduce314 =  \_\dcon ->  DCon.{ -- strict=true,
                                                    flds <-map ConField.{strict=true}}  dcon 
;
private reduce315 =  \_\dcon ->  DCon.{ -- strict=false,
                                                    flds <-map ConField.{strict=false}} dcon 
;
private reduce317 =  \c        -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=[], doc=Nothing } 
;
private reduce318 =  \c\_\fs\_ -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce319 =  \c\fs     -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce320 =  \taus -> do
                                    g <- getST
                                    let field  = Field Position.null Nothing Nothing Public false
                                                    â¢ toSig
                                        toSig (TSig s) = s
                                        toSig tau      = (ForAll [] . RhoTau []) tau
                                    pure (map field taus)
                                
;
private reduce321 =  single 
;
private reduce322 =  (:) 
;
private reduce324 =  const 
;
private reduce325 =  \cs\(d::Token) -> map ConField.{doc <- addDoc d.value} cs 
;
private reduce326 =  \as\c\ls -> as ++ ls 
;
private reduce327 =  \as\(d::Token)\ls -> map ConField.{doc <- addDoc d.value} as ++ ls 
;
private reduce328 =  \vs\_\t -> [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce329 =  \(d::String)\vs\_\t ->
                                        map ConField.{doc=Just d}
                                            [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce330 =  single 
;
private reduce331 =  liste  
;
private reduce333 =  \_ \(pos,name,vis,strict) -> (pos,name,Public, strict) 
;
private reduce334 =  \_ \(pos,name,vis,strict) -> (pos,name,Private,strict) 
;
private reduce336 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, true) 
;
private reduce337 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, false) 
;
private reduce338 =  \v -> do
                                    g <- getST
                                    pure (yyline v, v.value, Public, false)
                                
;
private reduce339 =  \t\i   \_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=[], 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce340 =  \t\i\vs\_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=vs, 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce341 =  [] 
;
private reduce342 =  \_\_\_ -> []
;
private reduce343 =  \_\_\defs\_ -> defs
;
private reduce344 =  \_\_\_ -> []
;
private reduce345 =  \_\_\defs\_ -> defs
;
private reduce346 =  \(ex,pats)\eq\expr -> fundef ex pats expr 
;
private reduce347 =  \(ex,pats)\gds -> fungds ex pats gds 
;
private reduce348 =  \fdefs\defs ->
        case fdefs of
            [fd@FunDcl {expr=x}] -> YYM.pure [fd.{expr = nx}] where
                                nx = Let defs x
            _ -> do
                yyerror (head fdefs).pos ("illegal function definition, where { ... } after annotation?")
                YYM.pure fdefs
    
;
private reduce349 =  \x -> do
                                            x <- funhead x
                                            YYM.pure x
                                    
;
private reduce350 =  \x ->  Lit (yyline x) LBool "true" 
;
private reduce351 =  \x ->  Lit (yyline x) LBool "false"
;
private reduce352 =  \x ->  do litchar x 
;
private reduce353 =  \x ->  Lit (yyline x) LString (Token.value x) 
;
private reduce354 =  \x ->  Lit (yyline x) LInt    (Token.value x) 
;
private reduce355 =  \x ->  Lit (yyline x) LBig    (bignum x)      
;
private reduce356 =  \x ->  Lit (yyline x) LLong   (Token.value x) 
;
private reduce357 =  \x ->  Lit (yyline x) LFloat  (Token.value x) 
;
private reduce358 =  \x ->  Lit (yyline x) LDouble (Token.value x) 
;
private reduce359 =  \x ->  do litregexp x 
;
private reduce364 =  \e\t\x -> do { (ex,pat) <- funhead e; YYM.pure (Right (fundef ex pat x)) }
;
private reduce365 =  \_\_\ds\_ -> Right ds 
;
private reduce366 =  single 
;
private reduce367 =  liste  
;
private reduce368 =  (const . single) 
;
private reduce369 =  single 
;
private reduce370 =  (const . single) 
;
private reduce371 =  liste 
;
private reduce372 =  \e     ->  Left (Nothing, e) 
;
private reduce373 =  \p\g\e ->  Left (Just p,  e) 
;
private reduce374 =  single 
;
private reduce375 =  liste  
;
private reduce376 =  (const . single) 
;
private reduce377 =  \a\qs\_\x  -> (yyline a, qs, x) 
;
private reduce378 =  single 
;
private reduce379 =  (:) 
;
private reduce380 =  \p\a\e ->
                                        CAlt {pat=p, ex=e}
;
private reduce381 =  \p\gs -> guardedalt p gs
;
private reduce382 = \(calt::CAltS)\defs ->
                                        let
                                            nx = Let defs calt.ex;
                                        in calt.{ ex = nx } 
;
private reduce383 =  single 
;
private reduce384 =  liste  
;
private reduce385 =  \a\_    ->  [a] 
;
private reduce386 =  \_\ps\b  -> foldr (\p\x -> Lam p x false) b ps 
;
private reduce388 =  \_\x -> x 
;
private reduce389 =  \x\_\t  -> Ann {ex = x, typ=t} 
;
private reduce391 =  flip const 
;
private reduce393 =  flip const 
;
private reduce395 =  mkapp 
;
private reduce396 =  mkapp 
;
private reduce397 =  \m\x -> nApp (Vbl (contextName m "negate")) x
;
private reduce399 =  \_\c\_\t\_\e  -> Ifte c t e
;
private reduce400 =  \_\e\_\_\as\_ -> Case CNormal e as
;
private reduce401 =  \_\_\ds\_\_\e -> Let ds e
;
private reduce403 =  underscore 
;
private reduce405 =  nApp 
;
private reduce407 =  \u\p -> nApp (Vbl {name=Simple u}) p
;
private reduce408 =  single 
;
private reduce409 =  (:) 
;
private reduce410 =  With1 
;
private reduce411 =  With2 
;
private reduce413 =  \d\_\defs\_   -> do mkMonad (yyline d) defs 
;
private reduce414 =  \p\_\(v::Token) -> umem p v id
;
private reduce415 =  \p\_\v -> do {v <- unqualified v;
                                                    YYM.pure (umem p v id)}
;
private reduce416 =  \p\_\v -> umem p v id
;
private reduce417 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("has$" ++)}) 
;
private reduce418 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("upd$" ++)}) 
;
private reduce419 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("chg$" ++)}) 
;
private reduce420 =  \q\(p::Token)\fs\_ -> let {
                        -- n   = Simple q;
                        flp = Vbl (wellKnown p "flip");
                        bul = Vbl (contextName p "â¢");
                        c []     = undefined;
                        c (f:fs) = fold cex (chup f) fs where {
                            cex x f = bul `nApp` x `nApp` chup f;
                            chup :: (Token, Bool, Exp) -> Exp;
                            chup (r, true, e)  = flp `nApp` Vbl  (q r.{value <- ("chg$"++)}) `nApp` e;
                            chup (r, false, e) = flp `nApp` Vbl  (q r.{value <- ("upd$"++)}) `nApp` e;
                                      }} in c fs 
;
private reduce421 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id
;
private reduce422 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id
;
private reduce423 = \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id
;
private reduce424 =  \x\(p::Token)\_\fs\_ ->
                                let {
                        u x [] = x;
                        u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                        u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                } in u x fs
;
private reduce425 =  \p\t\_\v\_  ->
                                        let elem = t.{tokid = VARID, value = "elemAt"}
                                        in Vbl {name=Simple elem}
                                            `nApp` p
                                            `nApp` v
;
private reduce426 =  \x   -> Vbl {name=x} 
;
private reduce428 =  \t   -> Vbl {name = Simple t.{tokid=VARID, value="_"}} 
;
private reduce429 =  \qc  -> Con {name=qc} 
;
private reduce430 =  \qc\_\z    -> ConFS {name=qc, fields=[]}
;
private reduce431 =  \qc\_\fs\z -> ConFS {name=qc, fields=fs}
;
private reduce432 =  \z\_   -> Con (fromBase z.{tokid=CONID, value="()"})
;
private reduce433 =  \z\n\_ -> Con (fromBase z.{tokid=CONID, value=tuple (n+1)})
;
private reduce434 =  \_\x\_ -> Vbl {name=Simple x} 
;
private reduce435 =  \_\o\_ -> (varcon o) (opSname o)
;
private reduce436 =  \_\m\_ -> (Vbl (fromBase m)) 
;
private reduce437 =  \z\o\x\_ ->  let -- (+1) --> flip (+) 1
                                        flp = Vbl (contextName z "flip") 
                                        op  = (varcon o) (opSname o)
                                        ex = nApp (nApp flp op) x
                                    in ex
;
private reduce438 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (opSname o)) x
;
private reduce439 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (Simple o)) x
;
private reduce440 =  \a\e\x\es\_ -> fold nApp (Con 
                                                                   (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
;
private reduce441 =  \a\e\(x::Token)\es\_ -> do
                                            g <- getST
                                            if isOff g.options.flags EXPERIMENTAL
                                                then pure (
                                                    fold nApp (Vbl 
                                                                   (fromBase x.{tokid=VARID, value="strictTuple" ++ show (1+length es)})
                                                                    )
                                                              (e:es)
                                                     )
                                                else pure (
                                                    fold nApp (Con 
                                                                   (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
                                                    )
                                        
;
private reduce442 =  \_\x\_ -> Term x 
;
private reduce443 =  \a\z ->  Con (fromBase z.{tokid=CONID, value="[]"})
;
private reduce444 =  \b\es\z -> 
                                                foldr (\a\as -> nApp (nApp (Con (fromBase b.{tokid=CONID, value=":"})) a) as)
                                                       (Con (fromBase z.{tokid=CONID, value="[]"}))
                                                       es
;
private reduce445 =  \a\b\c\d   -> do mkEnumFrom   a b c d
;
private reduce446 =  \a\b\c\d\e -> do mkEnumFromTo a b c d e
;
private reduce447 =  \(a::Token)\e\b\qs\(z::Token) -> do {
                let {nil = z.{tokid=CONID, value="[]"}};
                listComprehension (yyline b) e qs
                                            (Con {name = fromBase nil})
                                    }
;
private reduce448 =  const 1 
;
private reduce449 =  ((+) . const 1) 
;
private reduce450 =  single 
;
private reduce451 =  \a\c\ls ->
                                        if elemBy (using fst) a ls then do {
                                                E.warn (yyline c) (msgdoc ("field `" ++ fst a
                                                    ++ "` should appear only once."));
                                                YYM.pure ls
                                            } else
                                                YYM.pure (a:ls)
                                    
;
private reduce452 =  (const . single) 
;
private reduce453 =  single 
;
private reduce454 =  liste  
;
private reduce455 =  (const . single) 
;
private reduce456 =  \s\_\x ->  (s, true,  x) 
;
private reduce457 =  \s\_\x ->  (s, false, x) 
;
private reduce458 =  \s     ->  (s, false, Vbl (Simple s)) 
;
private reduce459 =  \s\_\x ->  (Token.value s, x) 
;
private reduce460 =  \s     ->  (s.value, Vbl (Simple s)) 
;
private reduce461 =  single 
;
private reduce462 =  liste  
;
private reduce463 =  (const . single) 
;
private reduce464 =  single 
;
private reduce465 =  liste 
;
private reduce466 =  (const . single) 
;
yyrule 1 = "package: packageclause ';' definitions";
yyrule 2 = "package: packageclause WHERE '{' definitions '}'";
yyrule 3 = "package: INTERPRET script";
yyrule 4 = "script: expr";
yyrule 5 = "nativename: rawnativename";
yyrule 6 = "rawnativename: VARID";
yyrule 7 = "rawnativename: CONID";
yyrule 8 = "rawnativename: PACKAGE";
yyrule 9 = "rawnativename: VARID '.' rawnativename";
yyrule 10 = "rawnativename: PACKAGE '.' rawnativename";
yyrule 11 = "rawnativename: QUALIFIER rawnativename";
yyrule 12 = "rawnativename: STRCONST";
yyrule 13 = "packagename1: CONID";
yyrule 14 = "packagename1: varidkw '.' packagename1";
yyrule 15 = "packagename1: QUALIFIER packagename1";
yyrule 16 = "packagename: packagename1";
yyrule 17 = "docs: DOCUMENTATION";
yyrule 18 = "docs: DOCUMENTATION docs";
yyrule 19 = "docs: DOCUMENTATION semicoli docs";
yyrule 20 = "packageclause: docs PACKAGE packagename";
yyrule 21 = "packageclause: PACKAGE packagename";
yyrule 22 = "packageclause: docs PROTECTED PACKAGE packagename";
yyrule 23 = "packageclause: PROTECTED PACKAGE packagename";
yyrule 24 = "packageclause: packageclause words '(' qvarids ')'";
yyrule 25 = "word: VARID";
yyrule 26 = "words: word";
yyrule 27 = "words: word words";
yyrule 28 = "semicoli: ';'";
yyrule 29 = "semicoli: ';' semicoli";
yyrule 30 = "definitions: definition";
yyrule 31 = "definitions: definition semicoli";
yyrule 32 = "definitions: definition semicoli definitions";
yyrule 33 = "definition: documentation";
yyrule 34 = "definition: documentation definition";
yyrule 35 = "definition: topdefinition";
yyrule 36 = "definition: visibledefinition";
yyrule 37 = "visibledefinition: PRIVATE publicdefinition";
yyrule 38 = "visibledefinition: PROTECTED publicdefinition";
yyrule 39 = "visibledefinition: PUBLIC publicdefinition";
yyrule 40 = "visibledefinition: ABSTRACT datadef";
yyrule 41 = "topdefinition: import";
yyrule 42 = "topdefinition: infix";
yyrule 43 = "topdefinition: moduledefinition";
yyrule 44 = "topdefinition: publicdefinition";
yyrule 45 = "moduledefinition: NATIVE PACKAGE typeclause interfaces wheretokens";
yyrule 46 = "typeclause: <empty>";
yyrule 47 = "typeclause: TYPE tau";
yyrule 48 = "interfaces: <empty>";
yyrule 49 = "interfaces: CLASS tauSC";
yyrule 50 = "wheretokens: WHERE '{' jtokens '}'";
yyrule 51 = "wheretokens: WHERE '{' '}'";
yyrule 52 = "jtoken: VARID";
yyrule 53 = "jtoken: CONID";
yyrule 54 = "jtoken: QVARID";
yyrule 55 = "jtoken: QCONID";
yyrule 56 = "jtoken: QUALIFIER";
yyrule 57 = "jtoken: DOCUMENTATION";
yyrule 58 = "jtoken: PACKAGE";
yyrule 59 = "jtoken: IMPORT";
yyrule 60 = "jtoken: INFIX";
yyrule 61 = "jtoken: INFIXR";
yyrule 62 = "jtoken: INFIXL";
yyrule 63 = "jtoken: NATIVE";
yyrule 64 = "jtoken: DATA";
yyrule 65 = "jtoken: WHERE";
yyrule 66 = "jtoken: CLASS";
yyrule 67 = "jtoken: INSTANCE";
yyrule 68 = "jtoken: ABSTRACT";
yyrule 69 = "jtoken: TYPE";
yyrule 70 = "jtoken: TRUE";
yyrule 71 = "jtoken: FALSE";
yyrule 72 = "jtoken: IF";
yyrule 73 = "jtoken: THEN";
yyrule 74 = "jtoken: ELSE";
yyrule 75 = "jtoken: CASE";
yyrule 76 = "jtoken: OF";
yyrule 77 = "jtoken: DERIVE";
yyrule 78 = "jtoken: LET";
yyrule 79 = "jtoken: IN";
yyrule 80 = "jtoken: DO";
yyrule 81 = "jtoken: FORALL";
yyrule 82 = "jtoken: PRIVATE";
yyrule 83 = "jtoken: PROTECTED";
yyrule 84 = "jtoken: PUBLIC";
yyrule 85 = "jtoken: PURE";
yyrule 86 = "jtoken: THROWS";
yyrule 87 = "jtoken: MUTABLE";
yyrule 88 = "jtoken: INTCONST";
yyrule 89 = "jtoken: STRCONST";
yyrule 90 = "jtoken: LONGCONST";
yyrule 91 = "jtoken: FLTCONST";
yyrule 92 = "jtoken: DBLCONST";
yyrule 93 = "jtoken: CHRCONST";
yyrule 94 = "jtoken: ARROW";
yyrule 95 = "jtoken: DCOLON";
yyrule 96 = "jtoken: GETS";
yyrule 97 = "jtoken: EARROW";
yyrule 98 = "jtoken: DOTDOT";
yyrule 99 = "jtoken: SOMEOP";
yyrule 100 = "jtoken: INTERPRET";
yyrule 101 = "jtoken: ','";
yyrule 102 = "jtoken: '|'";
yyrule 103 = "jtoken: '['";
yyrule 104 = "jtoken: ']'";
yyrule 105 = "jtoken: '('";
yyrule 106 = "jtoken: ')'";
yyrule 107 = "jtoken: '.'";
yyrule 108 = "jtoken: '?'";
yyrule 109 = "jtoken: '-'";
yyrule 110 = "jtoken: ';'";
yyrule 111 = "jtoken: '!'";
yyrule 112 = "jtoken: '='";
yyrule 113 = "jtoken: '\\'";
yyrule 114 = "jtokens: jtoken";
yyrule 115 = "jtokens: jtoken jtokens";
yyrule 116 = "jtokens: '{' jtokens '}'";
yyrule 117 = "jtokens: '{' jtokens '}' jtokens";
yyrule 118 = "jtokens: '{' '}'";
yyrule 119 = "jtokens: '{' '}' jtokens";
yyrule 120 = "documentation: DOCUMENTATION";
yyrule 121 = "publicdefinition: typedef";
yyrule 122 = "publicdefinition: datadef";
yyrule 123 = "publicdefinition: classdef";
yyrule 124 = "publicdefinition: instdef";
yyrule 125 = "publicdefinition: derivedef";
yyrule 126 = "publicdefinition: localdef";
yyrule 127 = "localdefs: dplocaldef";
yyrule 128 = "localdefs: dplocaldef semicoli";
yyrule 129 = "localdefs: dplocaldef semicoli localdefs";
yyrule 130 = "localdef: annotation";
yyrule 131 = "localdef: nativedef";
yyrule 132 = "localdef: fundef";
yyrule 133 = "plocaldef: localdef";
yyrule 134 = "plocaldef: PRIVATE localdef";
yyrule 135 = "plocaldef: PROTECTED localdef";
yyrule 136 = "plocaldef: PUBLIC localdef";
yyrule 137 = "dplocaldef: documentation";
yyrule 138 = "dplocaldef: documentation dplocaldef";
yyrule 139 = "dplocaldef: plocaldef";
yyrule 140 = "letdef: annotation";
yyrule 141 = "letdef: fundef";
yyrule 142 = "letdefs: letdef";
yyrule 143 = "letdefs: letdef semicoli";
yyrule 144 = "letdefs: letdef semicoli letdefs";
yyrule 145 = "import: IMPORT packagename importliste";
yyrule 146 = "import: IMPORT packagename VARID CONID importliste";
yyrule 147 = "import: IMPORT packagename CONID importliste";
yyrule 148 = "importliste: <empty>";
yyrule 149 = "importliste: varid '(' importspecs ')'";
yyrule 150 = "importliste: '(' ')'";
yyrule 151 = "importliste: '(' importspecs ')'";
yyrule 152 = "importliste: PUBLIC importliste";
yyrule 153 = "importspecs: importspec";
yyrule 154 = "importspecs: importspec ','";
yyrule 155 = "importspecs: importspec ',' importspecs";
yyrule 156 = "importitem: qvarid";
yyrule 157 = "importitem: CONID '(' memspecs ')'";
yyrule 158 = "importitem: CONID '(' ')'";
yyrule 159 = "importitem: qconid";
yyrule 160 = "importitem: operator";
yyrule 161 = "importitem: unop";
yyrule 162 = "importspec: importitem";
yyrule 163 = "importspec: importitem alias";
yyrule 164 = "importspec: PUBLIC importspec";
yyrule 165 = "memspec: alias";
yyrule 166 = "memspec: alias alias";
yyrule 167 = "memspec: PUBLIC memspec";
yyrule 168 = "memspecs: memspec";
yyrule 169 = "memspecs: memspec ','";
yyrule 170 = "memspecs: memspec ',' memspecs";
yyrule 171 = "alias: VARID";
yyrule 172 = "alias: CONID";
yyrule 173 = "alias: operator";
yyrule 174 = "varid: VARID";
yyrule 175 = "varidkw: VARID";
yyrule 176 = "varidkw: DATA";
yyrule 177 = "varidkw: TYPE";
yyrule 178 = "varidkw: NATIVE";
yyrule 179 = "varidkw: PURE";
yyrule 180 = "varidkw: PACKAGE";
yyrule 181 = "varidkw: IMPORT";
yyrule 182 = "qvarids: qvarop";
yyrule 183 = "qvarids: qvarop ',' qvarids";
yyrule 184 = "qvarid: QUALIFIER QUALIFIER varop";
yyrule 185 = "qvarid: QUALIFIER varop";
yyrule 186 = "qvarid: VARID";
yyrule 187 = "qconid: QUALIFIER QUALIFIER CONID";
yyrule 188 = "qconid: QUALIFIER CONID";
yyrule 189 = "qconid: CONID";
yyrule 190 = "varop: VARID";
yyrule 191 = "varop: unop";
yyrule 192 = "qvarop: QUALIFIER QUALIFIER varop";
yyrule 193 = "qvarop: QUALIFIER varop";
yyrule 194 = "qvarop: varop";
yyrule 195 = "qvarop: operator";
yyrule 196 = "operator: SOMEOP";
yyrule 197 = "unop: '!'";
yyrule 198 = "unop: '?'";
yyrule 199 = "fixity: INFIX INTCONST";
yyrule 200 = "fixity: INFIXL INTCONST";
yyrule 201 = "fixity: INFIXR INTCONST";
yyrule 202 = "opstring: operator";
yyrule 203 = "opstring: VARID";
yyrule 204 = "opstring: '-'";
yyrule 205 = "operators: opstring";
yyrule 206 = "operators: opstring operators";
yyrule 207 = "infix: fixity operators";
yyrule 208 = "annotation: annoitems DCOLON sigma";
yyrule 209 = "annoitem: varid";
yyrule 210 = "annoitem: '(' operator ')'";
yyrule 211 = "annoitem: '(' unop ')'";
yyrule 212 = "annoitem: '(' '-' ')'";
yyrule 213 = "annoitems: annoitem";
yyrule 214 = "annoitems: annoitem ',' annoitems";
yyrule 215 = "nativedef: PURE impurenativedef";
yyrule 216 = "nativedef: impurenativedef";
yyrule 217 = "fitem: annoitem";
yyrule 218 = "fitem: unop";
yyrule 219 = "fitem: '-'";
yyrule 220 = "fitem: operator";
yyrule 221 = "jitem: nativename";
yyrule 222 = "jitem: operator";
yyrule 223 = "jitem: unop";
yyrule 224 = "methodspec: fitem jitem gargs";
yyrule 225 = "methodspec: fitem jitem";
yyrule 226 = "methodspec: fitem gargs";
yyrule 227 = "methodspec: fitem";
yyrule 228 = "sigex: sigma THROWS tauSC";
yyrule 229 = "sigex: sigma";
yyrule 230 = "sigexs: sigex";
yyrule 231 = "sigexs: sigex '|' sigexs";
yyrule 232 = "impurenativedef: NATIVE methodspec DCOLON sigexs";
yyrule 233 = "boundvars: boundvar";
yyrule 234 = "boundvars: boundvar boundvars";
yyrule 235 = "boundvar: VARID";
yyrule 236 = "sigma: forall";
yyrule 237 = "sigma: rho";
yyrule 238 = "forall: FORALL boundvars mbdot rho";
yyrule 239 = "mbdot: '.'";
yyrule 240 = "mbdot: SOMEOP";
yyrule 241 = "rho: tapp EARROW rhofun";
yyrule 242 = "rho: rhofun";
yyrule 243 = "rhofun: tapp";
yyrule 244 = "rhofun: tapp ARROW rhofun";
yyrule 245 = "tau: tapp";
yyrule 246 = "tau: forall";
yyrule 247 = "tau: tapp ARROW tau";
yyrule 248 = "tauSC: tau";
yyrule 249 = "tauSC: tau ',' tauSC";
yyrule 250 = "tauSB: tau";
yyrule 251 = "tauSB: tau '|' tauSB";
yyrule 252 = "tapp: simpletypes";
yyrule 253 = "simpletype: tyvar";
yyrule 254 = "simpletype: tyname";
yyrule 255 = "simpletype: '(' tau ')'";
yyrule 256 = "simpletype: '(' tau ',' tauSC ')'";
yyrule 257 = "simpletype: '(' tau '|' tauSB ')'";
yyrule 258 = "simpletype: '[' tau ']'";
yyrule 259 = "tyvar: VARID";
yyrule 260 = "tyvar: '(' VARID DCOLON kind ')'";
yyrule 261 = "tyname: qconid";
yyrule 262 = "tyname: '[' ']'";
yyrule 263 = "tyname: '(' ')'";
yyrule 264 = "tyname: '(' commata ')'";
yyrule 265 = "tyname: '(' ARROW ')'";
yyrule 266 = "kind: simplekind ARROW kind";
yyrule 267 = "kind: simplekind";
yyrule 268 = "simplekind: SOMEOP";
yyrule 269 = "simplekind: VARID";
yyrule 270 = "simplekind: '(' kind ')'";
yyrule 271 = "scontext: qconid tyvar";
yyrule 272 = "scontexts: scontext";
yyrule 273 = "scontexts: scontext ','";
yyrule 274 = "scontexts: scontext ',' scontexts";
yyrule 275 = "ccontext: scontext";
yyrule 276 = "ccontext: '(' scontexts ')'";
yyrule 277 = "classdef: CLASS ccontext EARROW CONID tyvar wheredef";
yyrule 278 = "classdef: CLASS ccontext wheredef";
yyrule 279 = "sicontext: qconid simpletype";
yyrule 280 = "sicontexts: sicontext";
yyrule 281 = "sicontexts: sicontext ','";
yyrule 282 = "sicontexts: sicontext ',' sicontexts";
yyrule 283 = "icontext: sicontext";
yyrule 284 = "icontext: '(' sicontexts ')'";
yyrule 285 = "insthead: icontext EARROW tyname simpletype";
yyrule 286 = "insthead: icontext";
yyrule 287 = "instdef: INSTANCE insthead wheredef";
yyrule 288 = "derivedef: DERIVE insthead";
yyrule 289 = "datadef: datainit wheredef";
yyrule 290 = "nativepur: PURE NATIVE";
yyrule 291 = "nativepur: MUTABLE NATIVE";
yyrule 292 = "nativepur: NATIVE";
yyrule 293 = "nativespec: nativename";
yyrule 294 = "nativespec: nativename gargs";
yyrule 295 = "gargs: '{' tauSC '}'";
yyrule 296 = "gargs: '{' '}'";
yyrule 297 = "datainit: DATA CONID '=' nativepur nativespec";
yyrule 298 = "datainit: DATA CONID dvars '=' nativepur nativespec";
yyrule 299 = "datainit: DATA CONID dvars '=' dalts";
yyrule 300 = "datainit: DATA CONID '=' dalts";
yyrule 301 = "datainit: NEWTYPE CONID dvars '=' dalt";
yyrule 302 = "datainit: NEWTYPE CONID '=' dalt";
yyrule 303 = "dvars: tyvar";
yyrule 304 = "dvars: tyvar dvars";
yyrule 305 = "dalts: dalt";
yyrule 306 = "dalts: dalt '|' dalts";
yyrule 307 = "dalt: visdalt";
yyrule 308 = "dalt: visdalt DOCUMENTATION";
yyrule 309 = "dalt: DOCUMENTATION visdalt";
yyrule 310 = "visdalt: strictdalt";
yyrule 311 = "visdalt: PUBLIC strictdalt";
yyrule 312 = "visdalt: PRIVATE strictdalt";
yyrule 313 = "visdalt: PROTECTED strictdalt";
yyrule 314 = "strictdalt: '!' simpledalt";
yyrule 315 = "strictdalt: '?' simpledalt";
yyrule 316 = "strictdalt: simpledalt";
yyrule 317 = "simpledalt: CONID";
yyrule 318 = "simpledalt: CONID '{' conflds '}'";
yyrule 319 = "simpledalt: CONID contypes";
yyrule 320 = "contypes: simpletypes";
yyrule 321 = "simpletypes: simpletype";
yyrule 322 = "simpletypes: simpletype simpletypes";
yyrule 323 = "conflds: confld";
yyrule 324 = "conflds: confld ','";
yyrule 325 = "conflds: confld DOCUMENTATION";
yyrule 326 = "conflds: confld ',' conflds";
yyrule 327 = "conflds: confld DOCUMENTATION conflds";
yyrule 328 = "confld: fldids DCOLON sigma";
yyrule 329 = "confld: docs fldids DCOLON sigma";
yyrule 330 = "fldids: fldid";
yyrule 331 = "fldids: fldid ',' fldids";
yyrule 332 = "fldid: strictfldid";
yyrule 333 = "fldid: PUBLIC strictfldid";
yyrule 334 = "fldid: PRIVATE strictfldid";
yyrule 335 = "strictfldid: plainfldid";
yyrule 336 = "strictfldid: '!' plainfldid";
yyrule 337 = "strictfldid: '?' plainfldid";
yyrule 338 = "plainfldid: varid";
yyrule 339 = "typedef: TYPE CONID '=' sigma";
yyrule 340 = "typedef: TYPE CONID dvars '=' sigma";
yyrule 341 = "wheredef: <empty>";
yyrule 342 = "wheredef: WHERE '{' '}'";
yyrule 343 = "wheredef: WHERE '{' localdefs '}'";
yyrule 344 = "wherelet: WHERE '{' '}'";
yyrule 345 = "wherelet: WHERE '{' letdefs '}'";
yyrule 346 = "fundef: funhead '=' expr";
yyrule 347 = "fundef: funhead guards";
yyrule 348 = "fundef: fundef wherelet";
yyrule 349 = "funhead: binex";
yyrule 350 = "literal: TRUE";
yyrule 351 = "literal: FALSE";
yyrule 352 = "literal: CHRCONST";
yyrule 353 = "literal: STRCONST";
yyrule 354 = "literal: INTCONST";
yyrule 355 = "literal: BIGCONST";
yyrule 356 = "literal: LONGCONST";
yyrule 357 = "literal: FLTCONST";
yyrule 358 = "literal: DBLCONST";
yyrule 359 = "literal: REGEXP";
yyrule 360 = "pattern: expr";
yyrule 361 = "aeq: ARROW";
yyrule 362 = "aeq: '='";
yyrule 363 = "lcqual: gqual";
yyrule 364 = "lcqual: expr '=' expr";
yyrule 365 = "lcqual: LET '{' letdefs '}'";
yyrule 366 = "lcquals: lcqual";
yyrule 367 = "lcquals: lcqual ',' lcquals";
yyrule 368 = "lcquals: lcqual ','";
yyrule 369 = "dodefs: lcqual";
yyrule 370 = "dodefs: lcqual semicoli";
yyrule 371 = "dodefs: lcqual semicoli dodefs";
yyrule 372 = "gqual: expr";
yyrule 373 = "gqual: expr GETS expr";
yyrule 374 = "gquals: gqual";
yyrule 375 = "gquals: gqual ',' gquals";
yyrule 376 = "gquals: gqual ','";
yyrule 377 = "guard: '|' gquals aeq expr";
yyrule 378 = "guards: guard";
yyrule 379 = "guards: guard guards";
yyrule 380 = "calt: pattern aeq expr";
yyrule 381 = "calt: pattern guards";
yyrule 382 = "calt: calt wherelet";
yyrule 383 = "calts: calt";
yyrule 384 = "calts: calt ';' calts";
yyrule 385 = "calts: calt ';'";
yyrule 386 = "lambda: '\\' apats lambdabody";
yyrule 387 = "lambdabody: lambda";
yyrule 388 = "lambdabody: ARROW expr";
yyrule 389 = "expr: binex DCOLON sigma";
yyrule 390 = "expr: binex";
yyrule 391 = "thenx: ';' THEN";
yyrule 392 = "thenx: THEN";
yyrule 393 = "elsex: ';' ELSE";
yyrule 394 = "elsex: ELSE";
yyrule 395 = "binex: binex SOMEOP binex";
yyrule 396 = "binex: binex '-' binex";
yyrule 397 = "binex: '-' topex";
yyrule 398 = "binex: topex";
yyrule 399 = "topex: IF expr thenx expr elsex expr";
yyrule 400 = "topex: CASE expr OF '{' calts '}'";
yyrule 401 = "topex: LET '{' letdefs '}' IN expr";
yyrule 402 = "topex: lambda";
yyrule 403 = "topex: appex";
yyrule 404 = "appex: unex";
yyrule 405 = "appex: appex unex";
yyrule 406 = "unex: primary";
yyrule 407 = "unex: unop unex";
yyrule 408 = "apats: unex";
yyrule 409 = "apats: unex apats";
yyrule 410 = "qualifiers: QUALIFIER";
yyrule 411 = "qualifiers: QUALIFIER QUALIFIER";
yyrule 412 = "primary: term";
yyrule 413 = "primary: DO '{' dodefs '}'";
yyrule 414 = "primary: primary '.' VARID";
yyrule 415 = "primary: primary '.' operator";
yyrule 416 = "primary: primary '.' unop";
yyrule 417 = "primary: qualifiers '{' VARID '?' '}'";
yyrule 418 = "primary: qualifiers '{' VARID '=' '}'";
yyrule 419 = "primary: qualifiers '{' VARID GETS '}'";
yyrule 420 = "primary: qualifiers '{' getfields '}'";
yyrule 421 = "primary: primary '.' '{' VARID '?' '}'";
yyrule 422 = "primary: primary '.' '{' VARID '=' '}'";
yyrule 423 = "primary: primary '.' '{' VARID GETS '}'";
yyrule 424 = "primary: primary '.' '{' getfields '}'";
yyrule 425 = "primary: primary '.' '[' expr ']'";
yyrule 426 = "term: qvarid";
yyrule 427 = "term: literal";
yyrule 428 = "term: '_'";
yyrule 429 = "term: qconid";
yyrule 430 = "term: qconid '{' '}'";
yyrule 431 = "term: qconid '{' fields '}'";
yyrule 432 = "term: '(' ')'";
yyrule 433 = "term: '(' commata ')'";
yyrule 434 = "term: '(' unop ')'";
yyrule 435 = "term: '(' operator ')'";
yyrule 436 = "term: '(' '-' ')'";
yyrule 437 = "term: '(' operator expr ')'";
yyrule 438 = "term: '(' binex operator ')'";
yyrule 439 = "term: '(' binex '-' ')'";
yyrule 440 = "term: '(' expr ',' exprSC ')'";
yyrule 441 = "term: '(' expr ';' exprSS ')'";
yyrule 442 = "term: '(' expr ')'";
yyrule 443 = "term: '[' ']'";
yyrule 444 = "term: '[' exprSC ']'";
yyrule 445 = "term: '[' exprSC DOTDOT ']'";
yyrule 446 = "term: '[' exprSC DOTDOT expr ']'";
yyrule 447 = "term: '[' expr '|' lcquals ']'";
yyrule 448 = "commata: ','";
yyrule 449 = "commata: ',' commata";
yyrule 450 = "fields: field";
yyrule 451 = "fields: field ',' fields";
yyrule 452 = "fields: field ','";
yyrule 453 = "getfields: getfield";
yyrule 454 = "getfields: getfield ',' getfields";
yyrule 455 = "getfields: getfield ','";
yyrule 456 = "getfield: VARID GETS expr";
yyrule 457 = "getfield: VARID '=' expr";
yyrule 458 = "getfield: VARID";
yyrule 459 = "field: varid '=' expr";
yyrule 460 = "field: varid";
yyrule 461 = "exprSC: expr";
yyrule 462 = "exprSC: expr ',' exprSC";
yyrule 463 = "exprSC: expr ','";
yyrule 464 = "exprSS: expr";
yyrule 465 = "exprSS: expr ';' exprSS";
yyrule 466 = "exprSS: expr ';'";
yyrule _ = "<unknown rule>";

private yyprod1 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce1 yy1 yy2 yy3 ;YYM.pure (YYNTpackage yyr, yyvs)};
private yyprod1 yyvals = yybadprod 1 yyvals;
private yyprod2 ((_, (YYTok yy5)):(_, (YYNTdefinitions yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce2 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTpackage yyr, yyvs)};
private yyprod2 yyvals = yybadprod 2 yyvals;
private yyprod3 ((_, (YYNTscript yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce3 yy1 yy2}; YYM.pure (YYNTpackage yyr, yyvs)};
private yyprod3 yyvals = yybadprod 3 yyvals;
private yyprod4 ((_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce4 yy1 ;YYM.pure (YYNTscript yyr, yyvs)};
private yyprod4 yyvals = yybadprod 4 yyvals;
private yyprod5 ((_, (YYNTrawnativename yy1)):yyvs) =  do { yyr <- reduce5 yy1 ;YYM.pure (YYNTnativename yyr, yyvs)};
private yyprod5 yyvals = yybadprod 5 yyvals;
private yyprod6 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce6 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod6 yyvals = yybadprod 6 yyvals;
private yyprod7 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce7 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod7 yyvals = yybadprod 7 yyvals;
private yyprod8 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce8 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod8 yyvals = yybadprod 8 yyvals;
private yyprod9 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce9 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod9 yyvals = yybadprod 9 yyvals;
private yyprod10 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce10 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod10 yyvals = yybadprod 10 yyvals;
private yyprod11 ((_, (YYNTrawnativename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce11 yy1 yy2}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod11 yyvals = yybadprod 11 yyvals;
private yyprod12 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce12 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod12 yyvals = yybadprod 12 yyvals;
private yyprod13 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce13 yy1 ;YYM.pure (YYNTpackagename1 yyr, yyvs)};
private yyprod13 yyvals = yybadprod 13 yyvals;
private yyprod14 ((_, (YYNTpackagename1 yy3)):(_, (YYTok yy2)):(_, (YYNTvaridkw yy1)):yyvs) =  do { let {!yyr = reduce14 yy1 yy2 yy3}; YYM.pure (YYNTpackagename1 yyr, yyvs)};
private yyprod14 yyvals = yybadprod 14 yyvals;
private yyprod15 ((_, (YYNTpackagename1 yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce15 yy1 yy2}; YYM.pure (YYNTpackagename1 yyr, yyvs)};
private yyprod15 yyvals = yybadprod 15 yyvals;
private yyprod16 ((_, (YYNTpackagename1 yy1)):yyvs) =  do { let {!yyr = reduce16 yy1}; YYM.pure (YYNTpackagename yyr, yyvs)};
private yyprod16 yyvals = yybadprod 16 yyvals;
private yyprod17 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce17 yy1}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod17 yyvals = yybadprod 17 yyvals;
private yyprod18 ((_, (YYNTdocs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce18 yy1 yy2}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod18 yyvals = yybadprod 18 yyvals;
private yyprod19 ((_, (YYNTdocs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce19 yy1 yy2 yy3}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod19 yyvals = yybadprod 19 yyvals;
private yyprod20 ((_, (YYNTpackagename yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce20 yy1 yy2 yy3}; YYM.pure (YYNTpackageclause yyr, yyvs)};
private yyprod20 yyvals = yybadprod 20 yyvals;
private yyprod21 ((_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce21 yy1 yy2}; YYM.pure (YYNTpackageclause yyr, yyvs)};
private yyprod21 yyvals = yybadprod 21 yyvals;
private yyprod22 ((_, (YYNTpackagename yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { yyr <- reduce22 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTpackageclause yyr, yyvs)};
private yyprod22 yyvals = yybadprod 22 yyvals;
private yyprod23 ((_, (YYNTpackagename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce23 yy1 yy2 yy3 ;YYM.pure (YYNTpackageclause yyr, yyvs)};
private yyprod23 yyvals = yybadprod 23 yyvals;
private yyprod24 ((_, (YYTok yy5)):(_, (YYNTqvarids yy4)):(_, (YYTok yy3)):(_, (YYNTwords yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce24 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTpackageclause yyr, yyvs)};
private yyprod24 yyvals = yybadprod 24 yyvals;
private yyprod25 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce25 yy1}; YYM.pure (YYNTword yyr, yyvs)};
private yyprod25 yyvals = yybadprod 25 yyvals;
private yyprod26 ((_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce26 yy1}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod26 yyvals = yybadprod 26 yyvals;
private yyprod27 ((_, (YYNTwords yy2)):(_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce27 yy1 yy2}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod27 yyvals = yybadprod 27 yyvals;
private yyprod28 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce28 yy1}; YYM.pure (YYNTsemicoli yyr, yyvs)};
private yyprod28 yyvals = yybadprod 28 yyvals;
private yyprod29 ((_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce29 yy1 yy2}; YYM.pure (YYNTsemicoli yyr, yyvs)};
private yyprod29 yyvals = yybadprod 29 yyvals;
private yyprod30 ((_, (YYNTdefinition yy1)):yyvs) = YYM.pure (YYNTdefinitions (yy1), yyvs);
private yyprod30 yyvals = yybadprod 30 yyvals;
private yyprod31 ((_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce31 yy1 yy2}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod31 yyvals = yybadprod 31 yyvals;
private yyprod32 ((_, (YYNTdefinitions yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce32 yy1 yy2 yy3}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod32 yyvals = yybadprod 32 yyvals;
private yyprod33 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce33 yy1}; YYM.pure (YYNTdefinition yyr, yyvs)};
private yyprod33 yyvals = yybadprod 33 yyvals;
private yyprod34 ((_, (YYNTdefinition yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce34 yy1 yy2}; YYM.pure (YYNTdefinition yyr, yyvs)};
private yyprod34 yyvals = yybadprod 34 yyvals;
private yyprod35 ((_, (YYNTtopdefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod35 yyvals = yybadprod 35 yyvals;
private yyprod36 ((_, (YYNTvisibledefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod36 yyvals = yybadprod 36 yyvals;
private yyprod37 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce37 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod37 yyvals = yybadprod 37 yyvals;
private yyprod38 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce38 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod38 yyvals = yybadprod 38 yyvals;
private yyprod39 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce39 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod39 yyvals = yybadprod 39 yyvals;
private yyprod40 ((_, (YYNTdatadef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce40 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod40 yyvals = yybadprod 40 yyvals;
private yyprod41 ((_, (YYNTimport yy1)):yyvs) =  do { let {!yyr = reduce41 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod41 yyvals = yybadprod 41 yyvals;
private yyprod42 ((_, (YYNTinfix yy1)):yyvs) =  do { let {!yyr = reduce42 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod42 yyvals = yybadprod 42 yyvals;
private yyprod43 ((_, (YYNTmoduledefinition yy1)):yyvs) =  do { let {!yyr = reduce43 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod43 yyvals = yybadprod 43 yyvals;
private yyprod44 ((_, (YYNTpublicdefinition yy1)):yyvs) = YYM.pure (YYNTtopdefinition (yy1), yyvs);
private yyprod44 yyvals = yybadprod 44 yyvals;
private yyprod45 ((_, (YYNTwheretokens yy5)):(_, (YYNTinterfaces yy4)):(_, (YYNTtypeclause yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce45 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTmoduledefinition yyr, yyvs)};
private yyprod45 yyvals = yybadprod 45 yyvals;
private yyprod46 yyvs =  do { let {!yyr = reduce46 }; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod47 ((_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce47 yy1 yy2}; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod47 yyvals = yybadprod 47 yyvals;
private yyprod48 yyvs =  do { let {!yyr = reduce48 }; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod49 ((_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce49 yy1 yy2}; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod49 yyvals = yybadprod 49 yyvals;
private yyprod50 ((_, (YYTok yy4)):(_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce50 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod50 yyvals = yybadprod 50 yyvals;
private yyprod51 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce51 yy1 yy2 yy3}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod51 yyvals = yybadprod 51 yyvals;
private yyprod52 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod52 yyvals = yybadprod 52 yyvals;
private yyprod53 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod53 yyvals = yybadprod 53 yyvals;
private yyprod54 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod54 yyvals = yybadprod 54 yyvals;
private yyprod55 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod55 yyvals = yybadprod 55 yyvals;
private yyprod56 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod56 yyvals = yybadprod 56 yyvals;
private yyprod57 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod57 yyvals = yybadprod 57 yyvals;
private yyprod58 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod58 yyvals = yybadprod 58 yyvals;
private yyprod59 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod59 yyvals = yybadprod 59 yyvals;
private yyprod60 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod60 yyvals = yybadprod 60 yyvals;
private yyprod61 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod61 yyvals = yybadprod 61 yyvals;
private yyprod62 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod62 yyvals = yybadprod 62 yyvals;
private yyprod63 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod63 yyvals = yybadprod 63 yyvals;
private yyprod64 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod64 yyvals = yybadprod 64 yyvals;
private yyprod65 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod65 yyvals = yybadprod 65 yyvals;
private yyprod66 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod66 yyvals = yybadprod 66 yyvals;
private yyprod67 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod67 yyvals = yybadprod 67 yyvals;
private yyprod68 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod68 yyvals = yybadprod 68 yyvals;
private yyprod69 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod69 yyvals = yybadprod 69 yyvals;
private yyprod70 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod70 yyvals = yybadprod 70 yyvals;
private yyprod71 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod71 yyvals = yybadprod 71 yyvals;
private yyprod72 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod72 yyvals = yybadprod 72 yyvals;
private yyprod73 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod73 yyvals = yybadprod 73 yyvals;
private yyprod74 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod74 yyvals = yybadprod 74 yyvals;
private yyprod75 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod75 yyvals = yybadprod 75 yyvals;
private yyprod76 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod76 yyvals = yybadprod 76 yyvals;
private yyprod77 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod77 yyvals = yybadprod 77 yyvals;
private yyprod78 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod78 yyvals = yybadprod 78 yyvals;
private yyprod79 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod79 yyvals = yybadprod 79 yyvals;
private yyprod80 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod80 yyvals = yybadprod 80 yyvals;
private yyprod81 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod81 yyvals = yybadprod 81 yyvals;
private yyprod82 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod82 yyvals = yybadprod 82 yyvals;
private yyprod83 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod83 yyvals = yybadprod 83 yyvals;
private yyprod84 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod84 yyvals = yybadprod 84 yyvals;
private yyprod85 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod85 yyvals = yybadprod 85 yyvals;
private yyprod86 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod86 yyvals = yybadprod 86 yyvals;
private yyprod87 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod87 yyvals = yybadprod 87 yyvals;
private yyprod88 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod88 yyvals = yybadprod 88 yyvals;
private yyprod89 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod89 yyvals = yybadprod 89 yyvals;
private yyprod90 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod90 yyvals = yybadprod 90 yyvals;
private yyprod91 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod91 yyvals = yybadprod 91 yyvals;
private yyprod92 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod92 yyvals = yybadprod 92 yyvals;
private yyprod93 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod93 yyvals = yybadprod 93 yyvals;
private yyprod94 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod94 yyvals = yybadprod 94 yyvals;
private yyprod95 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod95 yyvals = yybadprod 95 yyvals;
private yyprod96 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod96 yyvals = yybadprod 96 yyvals;
private yyprod97 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod97 yyvals = yybadprod 97 yyvals;
private yyprod98 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod98 yyvals = yybadprod 98 yyvals;
private yyprod99 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod99 yyvals = yybadprod 99 yyvals;
private yyprod100 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod100 yyvals = yybadprod 100 yyvals;
private yyprod101 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod101 yyvals = yybadprod 101 yyvals;
private yyprod102 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod102 yyvals = yybadprod 102 yyvals;
private yyprod103 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod103 yyvals = yybadprod 103 yyvals;
private yyprod104 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod104 yyvals = yybadprod 104 yyvals;
private yyprod105 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod105 yyvals = yybadprod 105 yyvals;
private yyprod106 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod106 yyvals = yybadprod 106 yyvals;
private yyprod107 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod107 yyvals = yybadprod 107 yyvals;
private yyprod108 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod108 yyvals = yybadprod 108 yyvals;
private yyprod109 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod109 yyvals = yybadprod 109 yyvals;
private yyprod110 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod110 yyvals = yybadprod 110 yyvals;
private yyprod111 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod111 yyvals = yybadprod 111 yyvals;
private yyprod112 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod112 yyvals = yybadprod 112 yyvals;
private yyprod113 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod113 yyvals = yybadprod 113 yyvals;
private yyprod114 ((_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce114 yy1}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod114 yyvals = yybadprod 114 yyvals;
private yyprod115 ((_, (YYNTjtokens yy2)):(_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce115 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod115 yyvals = yybadprod 115 yyvals;
private yyprod116 ((_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce116 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod116 yyvals = yybadprod 116 yyvals;
private yyprod117 ((_, (YYNTjtokens yy4)):(_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce117 yy1 yy2 yy3 yy4}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod117 yyvals = yybadprod 117 yyvals;
private yyprod118 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce118 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod118 yyvals = yybadprod 118 yyvals;
private yyprod119 ((_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce119 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod119 yyvals = yybadprod 119 yyvals;
private yyprod120 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce120 yy1}; YYM.pure (YYNTdocumentation yyr, yyvs)};
private yyprod120 yyvals = yybadprod 120 yyvals;
private yyprod121 ((_, (YYNTtypedef yy1)):yyvs) =  do { let {!yyr = reduce121 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod121 yyvals = yybadprod 121 yyvals;
private yyprod122 ((_, (YYNTdatadef yy1)):yyvs) =  do { let {!yyr = reduce122 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod122 yyvals = yybadprod 122 yyvals;
private yyprod123 ((_, (YYNTclassdef yy1)):yyvs) =  do { let {!yyr = reduce123 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod123 yyvals = yybadprod 123 yyvals;
private yyprod124 ((_, (YYNTinstdef yy1)):yyvs) =  do { let {!yyr = reduce124 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod124 yyvals = yybadprod 124 yyvals;
private yyprod125 ((_, (YYNTderivedef yy1)):yyvs) =  do { let {!yyr = reduce125 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod125 yyvals = yybadprod 125 yyvals;
private yyprod126 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTpublicdefinition (yy1), yyvs);
private yyprod126 yyvals = yybadprod 126 yyvals;
private yyprod127 ((_, (YYNTdplocaldef yy1)):yyvs) = YYM.pure (YYNTlocaldefs (yy1), yyvs);
private yyprod127 yyvals = yybadprod 127 yyvals;
private yyprod128 ((_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce128 yy1 yy2}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod128 yyvals = yybadprod 128 yyvals;
private yyprod129 ((_, (YYNTlocaldefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce129 yy1 yy2 yy3}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod129 yyvals = yybadprod 129 yyvals;
private yyprod130 ((_, (YYNTannotation yy1)):yyvs) = YYM.pure (YYNTlocaldef (yy1), yyvs);
private yyprod130 yyvals = yybadprod 130 yyvals;
private yyprod131 ((_, (YYNTnativedef yy1)):yyvs) =  do { let {!yyr = reduce131 yy1}; YYM.pure (YYNTlocaldef yyr, yyvs)};
private yyprod131 yyvals = yybadprod 131 yyvals;
private yyprod132 ((_, (YYNTfundef yy1)):yyvs) = YYM.pure (YYNTlocaldef (yy1), yyvs);
private yyprod132 yyvals = yybadprod 132 yyvals;
private yyprod133 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTplocaldef (yy1), yyvs);
private yyprod133 yyvals = yybadprod 133 yyvals;
private yyprod134 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce134 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod134 yyvals = yybadprod 134 yyvals;
private yyprod135 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce135 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod135 yyvals = yybadprod 135 yyvals;
private yyprod136 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce136 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod136 yyvals = yybadprod 136 yyvals;
private yyprod137 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce137 yy1}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod137 yyvals = yybadprod 137 yyvals;
private yyprod138 ((_, (YYNTdplocaldef yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce138 yy1 yy2}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod138 yyvals = yybadprod 138 yyvals;
private yyprod139 ((_, (YYNTplocaldef yy1)):yyvs) = YYM.pure (YYNTdplocaldef (yy1), yyvs);
private yyprod139 yyvals = yybadprod 139 yyvals;
private yyprod140 ((_, (YYNTannotation yy1)):yyvs) = YYM.pure (YYNTletdef (yy1), yyvs);
private yyprod140 yyvals = yybadprod 140 yyvals;
private yyprod141 ((_, (YYNTfundef yy1)):yyvs) = YYM.pure (YYNTletdef (yy1), yyvs);
private yyprod141 yyvals = yybadprod 141 yyvals;
private yyprod142 ((_, (YYNTletdef yy1)):yyvs) = YYM.pure (YYNTletdefs (yy1), yyvs);
private yyprod142 yyvals = yybadprod 142 yyvals;
private yyprod143 ((_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce143 yy1 yy2}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod143 yyvals = yybadprod 143 yyvals;
private yyprod144 ((_, (YYNTletdefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce144 yy1 yy2 yy3}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod144 yyvals = yybadprod 144 yyvals;
private yyprod145 ((_, (YYNTimportliste yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce145 yy1 yy2 yy3}; YYM.pure (YYNTimport yyr, yyvs)};
private yyprod145 yyvals = yybadprod 145 yyvals;
private yyprod146 ((_, (YYNTimportliste yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce146 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod146 yyvals = yybadprod 146 yyvals;
private yyprod147 ((_, (YYNTimportliste yy4)):(_, (YYTok yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce147 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod147 yyvals = yybadprod 147 yyvals;
private yyprod148 yyvs =  do { let {!yyr = reduce148 }; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod149 ((_, (YYTok yy4)):(_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce149 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod149 yyvals = yybadprod 149 yyvals;
private yyprod150 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce150 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod150 yyvals = yybadprod 150 yyvals;
private yyprod151 ((_, (YYTok yy3)):(_, (YYNTimportspecs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce151 yy1 yy2 yy3}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod151 yyvals = yybadprod 151 yyvals;
private yyprod152 ((_, (YYNTimportliste yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce152 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod152 yyvals = yybadprod 152 yyvals;
private yyprod153 ((_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce153 yy1}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod153 yyvals = yybadprod 153 yyvals;
private yyprod154 ((_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce154 yy1 yy2}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod154 yyvals = yybadprod 154 yyvals;
private yyprod155 ((_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce155 yy1 yy2 yy3}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod155 yyvals = yybadprod 155 yyvals;
private yyprod156 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce156 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod156 yyvals = yybadprod 156 yyvals;
private yyprod157 ((_, (YYTok yy4)):(_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce157 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod157 yyvals = yybadprod 157 yyvals;
private yyprod158 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce158 yy1 yy2 yy3}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod158 yyvals = yybadprod 158 yyvals;
private yyprod159 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce159 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod159 yyvals = yybadprod 159 yyvals;
private yyprod160 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce160 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod160 yyvals = yybadprod 160 yyvals;
private yyprod161 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce161 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod161 yyvals = yybadprod 161 yyvals;
private yyprod162 ((_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce162 yy1}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod162 yyvals = yybadprod 162 yyvals;
private yyprod163 ((_, (YYNTalias yy2)):(_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce163 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod163 yyvals = yybadprod 163 yyvals;
private yyprod164 ((_, (YYNTimportspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce164 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod164 yyvals = yybadprod 164 yyvals;
private yyprod165 ((_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce165 yy1}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod165 yyvals = yybadprod 165 yyvals;
private yyprod166 ((_, (YYNTalias yy2)):(_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce166 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod166 yyvals = yybadprod 166 yyvals;
private yyprod167 ((_, (YYNTmemspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce167 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod167 yyvals = yybadprod 167 yyvals;
private yyprod168 ((_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce168 yy1}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod168 yyvals = yybadprod 168 yyvals;
private yyprod169 ((_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce169 yy1 yy2}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod169 yyvals = yybadprod 169 yyvals;
private yyprod170 ((_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce170 yy1 yy2 yy3}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod170 yyvals = yybadprod 170 yyvals;
private yyprod171 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod171 yyvals = yybadprod 171 yyvals;
private yyprod172 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod172 yyvals = yybadprod 172 yyvals;
private yyprod173 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce173 yy1 ;YYM.pure (YYNTalias yyr, yyvs)};
private yyprod173 yyvals = yybadprod 173 yyvals;
private yyprod174 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarid (yy1), yyvs);
private yyprod174 yyvals = yybadprod 174 yyvals;
private yyprod175 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvaridkw (yy1), yyvs);
private yyprod175 yyvals = yybadprod 175 yyvals;
private yyprod176 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce176 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod176 yyvals = yybadprod 176 yyvals;
private yyprod177 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce177 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod177 yyvals = yybadprod 177 yyvals;
private yyprod178 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce178 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod178 yyvals = yybadprod 178 yyvals;
private yyprod179 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce179 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod179 yyvals = yybadprod 179 yyvals;
private yyprod180 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce180 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod180 yyvals = yybadprod 180 yyvals;
private yyprod181 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce181 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod181 yyvals = yybadprod 181 yyvals;
private yyprod182 ((_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce182 yy1}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod182 yyvals = yybadprod 182 yyvals;
private yyprod183 ((_, (YYNTqvarids yy3)):(_, (YYTok yy2)):(_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce183 yy1 yy2 yy3}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod183 yyvals = yybadprod 183 yyvals;
private yyprod184 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce184 yy1 yy2 yy3}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod184 yyvals = yybadprod 184 yyvals;
private yyprod185 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce185 yy1 yy2}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod185 yyvals = yybadprod 185 yyvals;
private yyprod186 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce186 yy1}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod186 yyvals = yybadprod 186 yyvals;
private yyprod187 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce187 yy1 yy2 yy3}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod187 yyvals = yybadprod 187 yyvals;
private yyprod188 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce188 yy1 yy2}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod188 yyvals = yybadprod 188 yyvals;
private yyprod189 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce189 yy1}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod189 yyvals = yybadprod 189 yyvals;
private yyprod190 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod190 yyvals = yybadprod 190 yyvals;
private yyprod191 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod191 yyvals = yybadprod 191 yyvals;
private yyprod192 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce192 yy1 yy2 yy3}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod192 yyvals = yybadprod 192 yyvals;
private yyprod193 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce193 yy1 yy2}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod193 yyvals = yybadprod 193 yyvals;
private yyprod194 ((_, (YYNTvarop yy1)):yyvs) =  do { let {!yyr = reduce194 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod194 yyvals = yybadprod 194 yyvals;
private yyprod195 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce195 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod195 yyvals = yybadprod 195 yyvals;
private yyprod196 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNToperator (yy1), yyvs);
private yyprod196 yyvals = yybadprod 196 yyvals;
private yyprod197 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod197 yyvals = yybadprod 197 yyvals;
private yyprod198 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod198 yyvals = yybadprod 198 yyvals;
private yyprod199 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce199 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod199 yyvals = yybadprod 199 yyvals;
private yyprod200 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce200 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod200 yyvals = yybadprod 200 yyvals;
private yyprod201 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce201 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod201 yyvals = yybadprod 201 yyvals;
private yyprod202 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce202 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod202 yyvals = yybadprod 202 yyvals;
private yyprod203 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce203 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod203 yyvals = yybadprod 203 yyvals;
private yyprod204 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce204 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod204 yyvals = yybadprod 204 yyvals;
private yyprod205 ((_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce205 yy1}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod205 yyvals = yybadprod 205 yyvals;
private yyprod206 ((_, (YYNToperators yy2)):(_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce206 yy1 yy2}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod206 yyvals = yybadprod 206 yyvals;
private yyprod207 ((_, (YYNToperators yy2)):(_, (YYNTfixity yy1)):yyvs) =  do { let {!yyr = reduce207 yy1 yy2}; YYM.pure (YYNTinfix yyr, yyvs)};
private yyprod207 yyvals = yybadprod 207 yyvals;
private yyprod208 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTannoitems yy1)):yyvs) =  do { let {!yyr = reduce208 yy1 yy2 yy3}; YYM.pure (YYNTannotation yyr, yyvs)};
private yyprod208 yyvals = yybadprod 208 yyvals;
private yyprod209 ((_, (YYNTvarid yy1)):yyvs) = YYM.pure (YYNTannoitem (yy1), yyvs);
private yyprod209 yyvals = yybadprod 209 yyvals;
private yyprod210 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce210 yy1 yy2 yy3 ;YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod210 yyvals = yybadprod 210 yyvals;
private yyprod211 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce211 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod211 yyvals = yybadprod 211 yyvals;
private yyprod212 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce212 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod212 yyvals = yybadprod 212 yyvals;
private yyprod213 ((_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce213 yy1}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod213 yyvals = yybadprod 213 yyvals;
private yyprod214 ((_, (YYNTannoitems yy3)):(_, (YYTok yy2)):(_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce214 yy1 yy2 yy3}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod214 yyvals = yybadprod 214 yyvals;
private yyprod215 ((_, (YYNTimpurenativedef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce215 yy1 yy2}; YYM.pure (YYNTnativedef yyr, yyvs)};
private yyprod215 yyvals = yybadprod 215 yyvals;
private yyprod216 ((_, (YYNTimpurenativedef yy1)):yyvs) = YYM.pure (YYNTnativedef (yy1), yyvs);
private yyprod216 yyvals = yybadprod 216 yyvals;
private yyprod217 ((_, (YYNTannoitem yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod217 yyvals = yybadprod 217 yyvals;
private yyprod218 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod218 yyvals = yybadprod 218 yyvals;
private yyprod219 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod219 yyvals = yybadprod 219 yyvals;
private yyprod220 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce220 yy1 ;YYM.pure (YYNTfitem yyr, yyvs)};
private yyprod220 yyvals = yybadprod 220 yyvals;
private yyprod221 ((_, (YYNTnativename yy1)):yyvs) = YYM.pure (YYNTjitem (yy1), yyvs);
private yyprod221 yyvals = yybadprod 221 yyvals;
private yyprod222 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce222 yy1 ;YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod222 yyvals = yybadprod 222 yyvals;
private yyprod223 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce223 yy1}; YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod223 yyvals = yybadprod 223 yyvals;
private yyprod224 ((_, (YYNTgargs yy3)):(_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce224 yy1 yy2 yy3}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod224 yyvals = yybadprod 224 yyvals;
private yyprod225 ((_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce225 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod225 yyvals = yybadprod 225 yyvals;
private yyprod226 ((_, (YYNTgargs yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce226 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod226 yyvals = yybadprod 226 yyvals;
private yyprod227 ((_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce227 yy1}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod227 yyvals = yybadprod 227 yyvals;
private yyprod228 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce228 yy1 yy2 yy3}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod228 yyvals = yybadprod 228 yyvals;
private yyprod229 ((_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce229 yy1}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod229 yyvals = yybadprod 229 yyvals;
private yyprod230 ((_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce230 yy1}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod230 yyvals = yybadprod 230 yyvals;
private yyprod231 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce231 yy1 yy2 yy3}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod231 yyvals = yybadprod 231 yyvals;
private yyprod232 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTmethodspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce232 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimpurenativedef yyr, yyvs)};
private yyprod232 yyvals = yybadprod 232 yyvals;
private yyprod233 ((_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce233 yy1}; YYM.pure (YYNTboundvars yyr, yyvs)};
private yyprod233 yyvals = yybadprod 233 yyvals;
private yyprod234 ((_, (YYNTboundvars yy2)):(_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce234 yy1 yy2}; YYM.pure (YYNTboundvars yyr, yyvs)};
private yyprod234 yyvals = yybadprod 234 yyvals;
private yyprod235 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce235 yy1}; YYM.pure (YYNTboundvar yyr, yyvs)};
private yyprod235 yyvals = yybadprod 235 yyvals;
private yyprod236 ((_, (YYNTforall yy1)):yyvs) = YYM.pure (YYNTsigma (yy1), yyvs);
private yyprod236 yyvals = yybadprod 236 yyvals;
private yyprod237 ((_, (YYNTrho yy1)):yyvs) =  do { let {!yyr = reduce237 yy1}; YYM.pure (YYNTsigma yyr, yyvs)};
private yyprod237 yyvals = yybadprod 237 yyvals;
private yyprod238 ((_, (YYNTrho yy4)):(_, (YYNTmbdot yy3)):(_, (YYNTboundvars yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce238 yy1 yy2 yy3 yy4}; YYM.pure (YYNTforall yyr, yyvs)};
private yyprod238 yyvals = yybadprod 238 yyvals;
private yyprod239 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTmbdot (yy1), yyvs);
private yyprod239 yyvals = yybadprod 239 yyvals;
private yyprod240 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce240 yy1 ;YYM.pure (YYNTmbdot yyr, yyvs)};
private yyprod240 yyvals = yybadprod 240 yyvals;
private yyprod241 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { yyr <- reduce241 yy1 yy2 yy3 ;YYM.pure (YYNTrho yyr, yyvs)};
private yyprod241 yyvals = yybadprod 241 yyvals;
private yyprod242 ((_, (YYNTrhofun yy1)):yyvs) = YYM.pure (YYNTrho (yy1), yyvs);
private yyprod242 yyvals = yybadprod 242 yyvals;
private yyprod243 ((_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce243 yy1}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod243 yyvals = yybadprod 243 yyvals;
private yyprod244 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce244 yy1 yy2 yy3}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod244 yyvals = yybadprod 244 yyvals;
private yyprod245 ((_, (YYNTtapp yy1)):yyvs) = YYM.pure (YYNTtau (yy1), yyvs);
private yyprod245 yyvals = yybadprod 245 yyvals;
private yyprod246 ((_, (YYNTforall yy1)):yyvs) =  do { let {!yyr = reduce246 yy1}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod246 yyvals = yybadprod 246 yyvals;
private yyprod247 ((_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce247 yy1 yy2 yy3}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod247 yyvals = yybadprod 247 yyvals;
private yyprod248 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce248 yy1}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod248 yyvals = yybadprod 248 yyvals;
private yyprod249 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce249 yy1 yy2 yy3}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod249 yyvals = yybadprod 249 yyvals;
private yyprod250 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce250 yy1}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod250 yyvals = yybadprod 250 yyvals;
private yyprod251 ((_, (YYNTtauSB yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce251 yy1 yy2 yy3}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod251 yyvals = yybadprod 251 yyvals;
private yyprod252 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { let {!yyr = reduce252 yy1}; YYM.pure (YYNTtapp yyr, yyvs)};
private yyprod252 yyvals = yybadprod 252 yyvals;
private yyprod253 ((_, (YYNTtyvar yy1)):yyvs) = YYM.pure (YYNTsimpletype (yy1), yyvs);
private yyprod253 yyvals = yybadprod 253 yyvals;
private yyprod254 ((_, (YYNTtyname yy1)):yyvs) =  do { let {!yyr = reduce254 yy1}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod254 yyvals = yybadprod 254 yyvals;
private yyprod255 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce255 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod255 yyvals = yybadprod 255 yyvals;
private yyprod256 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce256 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod256 yyvals = yybadprod 256 yyvals;
private yyprod257 ((_, (YYTok yy5)):(_, (YYNTtauSB yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce257 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod257 yyvals = yybadprod 257 yyvals;
private yyprod258 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce258 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod258 yyvals = yybadprod 258 yyvals;
private yyprod259 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce259 yy1}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod259 yyvals = yybadprod 259 yyvals;
private yyprod260 ((_, (YYTok yy5)):(_, (YYNTkind yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce260 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod260 yyvals = yybadprod 260 yyvals;
private yyprod261 ((_, (YYNTqconid yy1)):yyvs) = YYM.pure (YYNTtyname (yy1), yyvs);
private yyprod261 yyvals = yybadprod 261 yyvals;
private yyprod262 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce262 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod262 yyvals = yybadprod 262 yyvals;
private yyprod263 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce263 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod263 yyvals = yybadprod 263 yyvals;
private yyprod264 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce264 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod264 yyvals = yybadprod 264 yyvals;
private yyprod265 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce265 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod265 yyvals = yybadprod 265 yyvals;
private yyprod266 ((_, (YYNTkind yy3)):(_, (YYTok yy2)):(_, (YYNTsimplekind yy1)):yyvs) =  do { let {!yyr = reduce266 yy1 yy2 yy3}; YYM.pure (YYNTkind yyr, yyvs)};
private yyprod266 yyvals = yybadprod 266 yyvals;
private yyprod267 ((_, (YYNTsimplekind yy1)):yyvs) = YYM.pure (YYNTkind (yy1), yyvs);
private yyprod267 yyvals = yybadprod 267 yyvals;
private yyprod268 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce268 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod268 yyvals = yybadprod 268 yyvals;
private yyprod269 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce269 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod269 yyvals = yybadprod 269 yyvals;
private yyprod270 ((_, (YYTok yy3)):(_, (YYNTkind yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce270 yy1 yy2 yy3}; YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod270 yyvals = yybadprod 270 yyvals;
private yyprod271 ((_, (YYNTtyvar yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce271 yy1 yy2}; YYM.pure (YYNTscontext yyr, yyvs)};
private yyprod271 yyvals = yybadprod 271 yyvals;
private yyprod272 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce272 yy1}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod272 yyvals = yybadprod 272 yyvals;
private yyprod273 ((_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce273 yy1 yy2}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod273 yyvals = yybadprod 273 yyvals;
private yyprod274 ((_, (YYNTscontexts yy3)):(_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce274 yy1 yy2 yy3}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod274 yyvals = yybadprod 274 yyvals;
private yyprod275 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce275 yy1}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod275 yyvals = yybadprod 275 yyvals;
private yyprod276 ((_, (YYTok yy3)):(_, (YYNTscontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce276 yy1 yy2 yy3}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod276 yyvals = yybadprod 276 yyvals;
private yyprod277 ((_, (YYNTwheredef yy6)):(_, (YYNTtyvar yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce277 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod277 yyvals = yybadprod 277 yyvals;
private yyprod278 ((_, (YYNTwheredef yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce278 yy1 yy2 yy3 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod278 yyvals = yybadprod 278 yyvals;
private yyprod279 ((_, (YYNTsimpletype yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce279 yy1 yy2}; YYM.pure (YYNTsicontext yyr, yyvs)};
private yyprod279 yyvals = yybadprod 279 yyvals;
private yyprod280 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce280 yy1}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod280 yyvals = yybadprod 280 yyvals;
private yyprod281 ((_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce281 yy1 yy2}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod281 yyvals = yybadprod 281 yyvals;
private yyprod282 ((_, (YYNTsicontexts yy3)):(_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce282 yy1 yy2 yy3}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod282 yyvals = yybadprod 282 yyvals;
private yyprod283 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce283 yy1}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod283 yyvals = yybadprod 283 yyvals;
private yyprod284 ((_, (YYTok yy3)):(_, (YYNTsicontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce284 yy1 yy2 yy3}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod284 yyvals = yybadprod 284 yyvals;
private yyprod285 ((_, (YYNTsimpletype yy4)):(_, (YYNTtyname yy3)):(_, (YYTok yy2)):(_, (YYNTicontext yy1)):yyvs) =  do { let {!yyr = reduce285 yy1 yy2 yy3 yy4}; YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod285 yyvals = yybadprod 285 yyvals;
private yyprod286 ((_, (YYNTicontext yy1)):yyvs) =  do { yyr <- reduce286 yy1 ;YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod286 yyvals = yybadprod 286 yyvals;
private yyprod287 ((_, (YYNTwheredef yy3)):(_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce287 yy1 yy2 yy3}; YYM.pure (YYNTinstdef yyr, yyvs)};
private yyprod287 yyvals = yybadprod 287 yyvals;
private yyprod288 ((_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce288 yy1 yy2}; YYM.pure (YYNTderivedef yyr, yyvs)};
private yyprod288 yyvals = yybadprod 288 yyvals;
private yyprod289 ((_, (YYNTwheredef yy2)):(_, (YYNTdatainit yy1)):yyvs) =  do { let {!yyr = reduce289 yy1 yy2}; YYM.pure (YYNTdatadef yyr, yyvs)};
private yyprod289 yyvals = yybadprod 289 yyvals;
private yyprod290 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce290 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod290 yyvals = yybadprod 290 yyvals;
private yyprod291 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce291 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod291 yyvals = yybadprod 291 yyvals;
private yyprod292 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce292 yy1}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod292 yyvals = yybadprod 292 yyvals;
private yyprod293 ((_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce293 yy1}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod293 yyvals = yybadprod 293 yyvals;
private yyprod294 ((_, (YYNTgargs yy2)):(_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce294 yy1 yy2}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod294 yyvals = yybadprod 294 yyvals;
private yyprod295 ((_, (YYTok yy3)):(_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce295 yy1 yy2 yy3}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod295 yyvals = yybadprod 295 yyvals;
private yyprod296 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce296 yy1 yy2}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod296 yyvals = yybadprod 296 yyvals;
private yyprod297 ((_, (YYNTnativespec yy5)):(_, (YYNTnativepur yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce297 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod297 yyvals = yybadprod 297 yyvals;
private yyprod298 ((_, (YYNTnativespec yy6)):(_, (YYNTnativepur yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce298 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod298 yyvals = yybadprod 298 yyvals;
private yyprod299 ((_, (YYNTdalts yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce299 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod299 yyvals = yybadprod 299 yyvals;
private yyprod300 ((_, (YYNTdalts yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce300 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod300 yyvals = yybadprod 300 yyvals;
private yyprod301 ((_, (YYNTdalt yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce301 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod301 yyvals = yybadprod 301 yyvals;
private yyprod302 ((_, (YYNTdalt yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce302 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod302 yyvals = yybadprod 302 yyvals;
private yyprod303 ((_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce303 yy1}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod303 yyvals = yybadprod 303 yyvals;
private yyprod304 ((_, (YYNTdvars yy2)):(_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce304 yy1 yy2}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod304 yyvals = yybadprod 304 yyvals;
private yyprod305 ((_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce305 yy1}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod305 yyvals = yybadprod 305 yyvals;
private yyprod306 ((_, (YYNTdalts yy3)):(_, (YYTok yy2)):(_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce306 yy1 yy2 yy3}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod306 yyvals = yybadprod 306 yyvals;
private yyprod307 ((_, (YYNTvisdalt yy1)):yyvs) = YYM.pure (YYNTdalt (yy1), yyvs);
private yyprod307 yyvals = yybadprod 307 yyvals;
private yyprod308 ((_, (YYTok yy2)):(_, (YYNTvisdalt yy1)):yyvs) =  do { let {!yyr = reduce308 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod308 yyvals = yybadprod 308 yyvals;
private yyprod309 ((_, (YYNTvisdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce309 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod309 yyvals = yybadprod 309 yyvals;
private yyprod310 ((_, (YYNTstrictdalt yy1)):yyvs) = YYM.pure (YYNTvisdalt (yy1), yyvs);
private yyprod310 yyvals = yybadprod 310 yyvals;
private yyprod311 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce311 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod311 yyvals = yybadprod 311 yyvals;
private yyprod312 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce312 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod312 yyvals = yybadprod 312 yyvals;
private yyprod313 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce313 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod313 yyvals = yybadprod 313 yyvals;
private yyprod314 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce314 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod314 yyvals = yybadprod 314 yyvals;
private yyprod315 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce315 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod315 yyvals = yybadprod 315 yyvals;
private yyprod316 ((_, (YYNTsimpledalt yy1)):yyvs) = YYM.pure (YYNTstrictdalt (yy1), yyvs);
private yyprod316 yyvals = yybadprod 316 yyvals;
private yyprod317 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce317 yy1}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod317 yyvals = yybadprod 317 yyvals;
private yyprod318 ((_, (YYTok yy4)):(_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce318 yy1 yy2 yy3 yy4}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod318 yyvals = yybadprod 318 yyvals;
private yyprod319 ((_, (YYNTcontypes yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce319 yy1 yy2}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod319 yyvals = yybadprod 319 yyvals;
private yyprod320 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { yyr <- reduce320 yy1 ;YYM.pure (YYNTcontypes yyr, yyvs)};
private yyprod320 yyvals = yybadprod 320 yyvals;
private yyprod321 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce321 yy1}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod321 yyvals = yybadprod 321 yyvals;
private yyprod322 ((_, (YYNTsimpletypes yy2)):(_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce322 yy1 yy2}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod322 yyvals = yybadprod 322 yyvals;
private yyprod323 ((_, (YYNTconfld yy1)):yyvs) = YYM.pure (YYNTconflds (yy1), yyvs);
private yyprod323 yyvals = yybadprod 323 yyvals;
private yyprod324 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce324 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod324 yyvals = yybadprod 324 yyvals;
private yyprod325 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce325 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod325 yyvals = yybadprod 325 yyvals;
private yyprod326 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce326 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod326 yyvals = yybadprod 326 yyvals;
private yyprod327 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce327 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod327 yyvals = yybadprod 327 yyvals;
private yyprod328 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTfldids yy1)):yyvs) =  do { let {!yyr = reduce328 yy1 yy2 yy3}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod328 yyvals = yybadprod 328 yyvals;
private yyprod329 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYNTfldids yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce329 yy1 yy2 yy3 yy4}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod329 yyvals = yybadprod 329 yyvals;
private yyprod330 ((_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce330 yy1}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod330 yyvals = yybadprod 330 yyvals;
private yyprod331 ((_, (YYNTfldids yy3)):(_, (YYTok yy2)):(_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce331 yy1 yy2 yy3}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod331 yyvals = yybadprod 331 yyvals;
private yyprod332 ((_, (YYNTstrictfldid yy1)):yyvs) = YYM.pure (YYNTfldid (yy1), yyvs);
private yyprod332 yyvals = yybadprod 332 yyvals;
private yyprod333 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce333 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod333 yyvals = yybadprod 333 yyvals;
private yyprod334 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce334 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod334 yyvals = yybadprod 334 yyvals;
private yyprod335 ((_, (YYNTplainfldid yy1)):yyvs) = YYM.pure (YYNTstrictfldid (yy1), yyvs);
private yyprod335 yyvals = yybadprod 335 yyvals;
private yyprod336 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce336 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod336 yyvals = yybadprod 336 yyvals;
private yyprod337 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce337 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod337 yyvals = yybadprod 337 yyvals;
private yyprod338 ((_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce338 yy1 ;YYM.pure (YYNTplainfldid yyr, yyvs)};
private yyprod338 yyvals = yybadprod 338 yyvals;
private yyprod339 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce339 yy1 yy2 yy3 yy4}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod339 yyvals = yybadprod 339 yyvals;
private yyprod340 ((_, (YYNTsigma yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce340 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod340 yyvals = yybadprod 340 yyvals;
private yyprod341 yyvs =  do { let {!yyr = reduce341 }; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod342 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce342 yy1 yy2 yy3}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod342 yyvals = yybadprod 342 yyvals;
private yyprod343 ((_, (YYTok yy4)):(_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce343 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod343 yyvals = yybadprod 343 yyvals;
private yyprod344 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce344 yy1 yy2 yy3}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod344 yyvals = yybadprod 344 yyvals;
private yyprod345 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce345 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod345 yyvals = yybadprod 345 yyvals;
private yyprod346 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce346 yy1 yy2 yy3}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod346 yyvals = yybadprod 346 yyvals;
private yyprod347 ((_, (YYNTguards yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce347 yy1 yy2}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod347 yyvals = yybadprod 347 yyvals;
private yyprod348 ((_, (YYNTwherelet yy2)):(_, (YYNTfundef yy1)):yyvs) =  do { yyr <- reduce348 yy1 yy2 ;YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod348 yyvals = yybadprod 348 yyvals;
private yyprod349 ((_, (YYNTbinex yy1)):yyvs) =  do { yyr <- reduce349 yy1 ;YYM.pure (YYNTfunhead yyr, yyvs)};
private yyprod349 yyvals = yybadprod 349 yyvals;
private yyprod350 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce350 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod350 yyvals = yybadprod 350 yyvals;
private yyprod351 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce351 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod351 yyvals = yybadprod 351 yyvals;
private yyprod352 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce352 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod352 yyvals = yybadprod 352 yyvals;
private yyprod353 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce353 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod353 yyvals = yybadprod 353 yyvals;
private yyprod354 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce354 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod354 yyvals = yybadprod 354 yyvals;
private yyprod355 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce355 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod355 yyvals = yybadprod 355 yyvals;
private yyprod356 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce356 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod356 yyvals = yybadprod 356 yyvals;
private yyprod357 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce357 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod357 yyvals = yybadprod 357 yyvals;
private yyprod358 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce358 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod358 yyvals = yybadprod 358 yyvals;
private yyprod359 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce359 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod359 yyvals = yybadprod 359 yyvals;
private yyprod360 ((_, (YYNTexpr yy1)):yyvs) = YYM.pure (YYNTpattern (yy1), yyvs);
private yyprod360 yyvals = yybadprod 360 yyvals;
private yyprod361 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod361 yyvals = yybadprod 361 yyvals;
private yyprod362 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod362 yyvals = yybadprod 362 yyvals;
private yyprod363 ((_, (YYNTgqual yy1)):yyvs) = YYM.pure (YYNTlcqual (yy1), yyvs);
private yyprod363 yyvals = yybadprod 363 yyvals;
private yyprod364 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce364 yy1 yy2 yy3 ;YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod364 yyvals = yybadprod 364 yyvals;
private yyprod365 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce365 yy1 yy2 yy3 yy4}; YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod365 yyvals = yybadprod 365 yyvals;
private yyprod366 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce366 yy1}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod366 yyvals = yybadprod 366 yyvals;
private yyprod367 ((_, (YYNTlcquals yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce367 yy1 yy2 yy3}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod367 yyvals = yybadprod 367 yyvals;
private yyprod368 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce368 yy1 yy2}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod368 yyvals = yybadprod 368 yyvals;
private yyprod369 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce369 yy1}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod369 yyvals = yybadprod 369 yyvals;
private yyprod370 ((_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce370 yy1 yy2}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod370 yyvals = yybadprod 370 yyvals;
private yyprod371 ((_, (YYNTdodefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce371 yy1 yy2 yy3}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod371 yyvals = yybadprod 371 yyvals;
private yyprod372 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce372 yy1}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod372 yyvals = yybadprod 372 yyvals;
private yyprod373 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce373 yy1 yy2 yy3}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod373 yyvals = yybadprod 373 yyvals;
private yyprod374 ((_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce374 yy1}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod374 yyvals = yybadprod 374 yyvals;
private yyprod375 ((_, (YYNTgquals yy3)):(_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce375 yy1 yy2 yy3}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod375 yyvals = yybadprod 375 yyvals;
private yyprod376 ((_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce376 yy1 yy2}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod376 yyvals = yybadprod 376 yyvals;
private yyprod377 ((_, (YYNTexpr yy4)):(_, (YYNTaeq yy3)):(_, (YYNTgquals yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce377 yy1 yy2 yy3 yy4}; YYM.pure (YYNTguard yyr, yyvs)};
private yyprod377 yyvals = yybadprod 377 yyvals;
private yyprod378 ((_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce378 yy1}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod378 yyvals = yybadprod 378 yyvals;
private yyprod379 ((_, (YYNTguards yy2)):(_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce379 yy1 yy2}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod379 yyvals = yybadprod 379 yyvals;
private yyprod380 ((_, (YYNTexpr yy3)):(_, (YYNTaeq yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce380 yy1 yy2 yy3}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod380 yyvals = yybadprod 380 yyvals;
private yyprod381 ((_, (YYNTguards yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce381 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod381 yyvals = yybadprod 381 yyvals;
private yyprod382 ((_, (YYNTwherelet yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce382 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod382 yyvals = yybadprod 382 yyvals;
private yyprod383 ((_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce383 yy1}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod383 yyvals = yybadprod 383 yyvals;
private yyprod384 ((_, (YYNTcalts yy3)):(_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce384 yy1 yy2 yy3}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod384 yyvals = yybadprod 384 yyvals;
private yyprod385 ((_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce385 yy1 yy2}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod385 yyvals = yybadprod 385 yyvals;
private yyprod386 ((_, (YYNTlambdabody yy3)):(_, (YYNTapats yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce386 yy1 yy2 yy3}; YYM.pure (YYNTlambda yyr, yyvs)};
private yyprod386 yyvals = yybadprod 386 yyvals;
private yyprod387 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTlambdabody (yy1), yyvs);
private yyprod387 yyvals = yybadprod 387 yyvals;
private yyprod388 ((_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce388 yy1 yy2}; YYM.pure (YYNTlambdabody yyr, yyvs)};
private yyprod388 yyvals = yybadprod 388 yyvals;
private yyprod389 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce389 yy1 yy2 yy3}; YYM.pure (YYNTexpr yyr, yyvs)};
private yyprod389 yyvals = yybadprod 389 yyvals;
private yyprod390 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTexpr (yy1), yyvs);
private yyprod390 yyvals = yybadprod 390 yyvals;
private yyprod391 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce391 yy1 yy2}; YYM.pure (YYNTthenx yyr, yyvs)};
private yyprod391 yyvals = yybadprod 391 yyvals;
private yyprod392 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTthenx (yy1), yyvs);
private yyprod392 yyvals = yybadprod 392 yyvals;
private yyprod393 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce393 yy1 yy2}; YYM.pure (YYNTelsex yyr, yyvs)};
private yyprod393 yyvals = yybadprod 393 yyvals;
private yyprod394 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTelsex (yy1), yyvs);
private yyprod394 yyvals = yybadprod 394 yyvals;
private yyprod395 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce395 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod395 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod395 yyvals = yybadprod 395 yyvals;
private yyprod396 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce396 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod396 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod396 yyvals = yybadprod 396 yyvals;
private yyprod397 ((_, (YYNTtopex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce397 yy1 yy2}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod397 yyvals = yybadprod 397 yyvals;
private yyprod398 ((_, (YYNTtopex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod398 yyvals = yybadprod 398 yyvals;
private yyprod399 ((_, (YYNTexpr yy6)):(_, (YYNTelsex yy5)):(_, (YYNTexpr yy4)):(_, (YYNTthenx yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce399 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod399 yyvals = yybadprod 399 yyvals;
private yyprod400 ((_, (YYTok yy6)):(_, (YYNTcalts yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce400 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod400 yyvals = yybadprod 400 yyvals;
private yyprod401 ((_, (YYNTexpr yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce401 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod401 yyvals = yybadprod 401 yyvals;
private yyprod402 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTtopex (yy1), yyvs);
private yyprod402 yyvals = yybadprod 402 yyvals;
private yyprod403 ((_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce403 yy1}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod403 yyvals = yybadprod 403 yyvals;
private yyprod404 ((_, (YYNTunex yy1)):yyvs) = YYM.pure (YYNTappex (yy1), yyvs);
private yyprod404 yyvals = yybadprod 404 yyvals;
private yyprod405 ((_, (YYNTunex yy2)):(_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce405 yy1 yy2}; YYM.pure (YYNTappex yyr, yyvs)};
private yyprod405 yyvals = yybadprod 405 yyvals;
private yyprod406 ((_, (YYNTprimary yy1)):yyvs) = YYM.pure (YYNTunex (yy1), yyvs);
private yyprod406 yyvals = yybadprod 406 yyvals;
private yyprod407 ((_, (YYNTunex yy2)):(_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce407 yy1 yy2}; YYM.pure (YYNTunex yyr, yyvs)};
private yyprod407 yyvals = yybadprod 407 yyvals;
private yyprod408 ((_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce408 yy1}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod408 yyvals = yybadprod 408 yyvals;
private yyprod409 ((_, (YYNTapats yy2)):(_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce409 yy1 yy2}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod409 yyvals = yybadprod 409 yyvals;
private yyprod410 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce410 yy1}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod410 yyvals = yybadprod 410 yyvals;
private yyprod411 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce411 yy1 yy2}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod411 yyvals = yybadprod 411 yyvals;
private yyprod412 ((_, (YYNTterm yy1)):yyvs) = YYM.pure (YYNTprimary (yy1), yyvs);
private yyprod412 yyvals = yybadprod 412 yyvals;
private yyprod413 ((_, (YYTok yy4)):(_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce413 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod413 yyvals = yybadprod 413 yyvals;
private yyprod414 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce414 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod414 yyvals = yybadprod 414 yyvals;
private yyprod415 ((_, (YYNToperator yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { yyr <- reduce415 yy1 yy2 yy3 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod415 yyvals = yybadprod 415 yyvals;
private yyprod416 ((_, (YYNTunop yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce416 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod416 yyvals = yybadprod 416 yyvals;
private yyprod417 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce417 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod417 yyvals = yybadprod 417 yyvals;
private yyprod418 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce418 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod418 yyvals = yybadprod 418 yyvals;
private yyprod419 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce419 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod419 yyvals = yybadprod 419 yyvals;
private yyprod420 ((_, (YYTok yy4)):(_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce420 yy1 yy2 yy3 yy4}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod420 yyvals = yybadprod 420 yyvals;
private yyprod421 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce421 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod421 yyvals = yybadprod 421 yyvals;
private yyprod422 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce422 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod422 yyvals = yybadprod 422 yyvals;
private yyprod423 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce423 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod423 yyvals = yybadprod 423 yyvals;
private yyprod424 ((_, (YYTok yy5)):(_, (YYNTgetfields yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce424 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod424 yyvals = yybadprod 424 yyvals;
private yyprod425 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce425 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod425 yyvals = yybadprod 425 yyvals;
private yyprod426 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce426 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod426 yyvals = yybadprod 426 yyvals;
private yyprod427 ((_, (YYNTliteral yy1)):yyvs) = YYM.pure (YYNTterm (yy1), yyvs);
private yyprod427 yyvals = yybadprod 427 yyvals;
private yyprod428 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce428 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod428 yyvals = yybadprod 428 yyvals;
private yyprod429 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce429 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod429 yyvals = yybadprod 429 yyvals;
private yyprod430 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce430 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod430 yyvals = yybadprod 430 yyvals;
private yyprod431 ((_, (YYTok yy4)):(_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce431 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod431 yyvals = yybadprod 431 yyvals;
private yyprod432 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce432 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod432 yyvals = yybadprod 432 yyvals;
private yyprod433 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce433 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod433 yyvals = yybadprod 433 yyvals;
private yyprod434 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce434 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod434 yyvals = yybadprod 434 yyvals;
private yyprod435 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce435 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod435 yyvals = yybadprod 435 yyvals;
private yyprod436 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce436 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod436 yyvals = yybadprod 436 yyvals;
private yyprod437 ((_, (YYTok yy4)):(_, (YYNTexpr yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce437 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod437 yyvals = yybadprod 437 yyvals;
private yyprod438 ((_, (YYTok yy4)):(_, (YYNToperator yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce438 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod438 yyvals = yybadprod 438 yyvals;
private yyprod439 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce439 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod439 yyvals = yybadprod 439 yyvals;
private yyprod440 ((_, (YYTok yy5)):(_, (YYNTexprSC yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce440 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod440 yyvals = yybadprod 440 yyvals;
private yyprod441 ((_, (YYTok yy5)):(_, (YYNTexprSS yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce441 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod441 yyvals = yybadprod 441 yyvals;
private yyprod442 ((_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce442 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod442 yyvals = yybadprod 442 yyvals;
private yyprod443 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce443 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod443 yyvals = yybadprod 443 yyvals;
private yyprod444 ((_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce444 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod444 yyvals = yybadprod 444 yyvals;
private yyprod445 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce445 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod445 yyvals = yybadprod 445 yyvals;
private yyprod446 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce446 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod446 yyvals = yybadprod 446 yyvals;
private yyprod447 ((_, (YYTok yy5)):(_, (YYNTlcquals yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce447 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod447 yyvals = yybadprod 447 yyvals;
private yyprod448 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce448 yy1}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod448 yyvals = yybadprod 448 yyvals;
private yyprod449 ((_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce449 yy1 yy2}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod449 yyvals = yybadprod 449 yyvals;
private yyprod450 ((_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce450 yy1}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod450 yyvals = yybadprod 450 yyvals;
private yyprod451 ((_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { yyr <- reduce451 yy1 yy2 yy3 ;YYM.pure (YYNTfields yyr, yyvs)};
private yyprod451 yyvals = yybadprod 451 yyvals;
private yyprod452 ((_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce452 yy1 yy2}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod452 yyvals = yybadprod 452 yyvals;
private yyprod453 ((_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce453 yy1}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod453 yyvals = yybadprod 453 yyvals;
private yyprod454 ((_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce454 yy1 yy2 yy3}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod454 yyvals = yybadprod 454 yyvals;
private yyprod455 ((_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce455 yy1 yy2}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod455 yyvals = yybadprod 455 yyvals;
private yyprod456 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce456 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod456 yyvals = yybadprod 456 yyvals;
private yyprod457 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce457 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod457 yyvals = yybadprod 457 yyvals;
private yyprod458 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce458 yy1}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod458 yyvals = yybadprod 458 yyvals;
private yyprod459 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce459 yy1 yy2 yy3}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod459 yyvals = yybadprod 459 yyvals;
private yyprod460 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce460 yy1}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod460 yyvals = yybadprod 460 yyvals;
private yyprod461 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce461 yy1}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod461 yyvals = yybadprod 461 yyvals;
private yyprod462 ((_, (YYNTexprSC yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce462 yy1 yy2 yy3}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod462 yyvals = yybadprod 462 yyvals;
private yyprod463 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce463 yy1 yy2}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod463 yyvals = yybadprod 463 yyvals;
private yyprod464 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce464 yy1}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod464 yyvals = yybadprod 464 yyvals;
private yyprod465 ((_, (YYNTexprSS yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce465 yy1 yy2 yy3}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod465 yyvals = yybadprod 465 yyvals;
private yyprod466 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce466 yy1 yy2}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod466 yyvals = yybadprod 466 yyvals;
;

private yyprods = let 
    sub1 = [      (1, yyprod1),
      (2, yyprod2),
      (3, yyprod3),
      (4, yyprod4),
      (5, yyprod5),
      (6, yyprod6),
      (7, yyprod7),
      (8, yyprod8),
      (9, yyprod9),
      (10, yyprod10),
      (11, yyprod11),
      (12, yyprod12),
      (13, yyprod13),
      (14, yyprod14),
      (15, yyprod15),
      (16, yyprod16),
      (17, yyprod17),
      (18, yyprod18),
      (19, yyprod19),
      (20, yyprod20),
      (21, yyprod21),
      (22, yyprod22),
      (23, yyprod23),
      (24, yyprod24),
      (25, yyprod25),
      (26, yyprod26),
      (27, yyprod27),
      (28, yyprod28),
      (29, yyprod29),
      (30, yyprod30),
      (31, yyprod31),
      (32, yyprod32),
      (33, yyprod33),
      (34, yyprod34),
      (35, yyprod35),
      (36, yyprod36),
      (37, yyprod37),
      (38, yyprod38),
      (39, yyprod39),
      (40, yyprod40),
      (41, yyprod41),
      (42, yyprod42),
      (43, yyprod43),
      (44, yyprod44),
      (45, yyprod45),
      (46, yyprod46),
      (47, yyprod47),
      (48, yyprod48),
      (49, yyprod49),
      (50, yyprod50),
      (51, yyprod51),
      (52, yyprod52),
      (53, yyprod53),
      (54, yyprod54),
      (55, yyprod55),
      (56, yyprod56),
      (57, yyprod57),
      (58, yyprod58),
      (59, yyprod59),
      (60, yyprod60),
      (61, yyprod61),
      (62, yyprod62),
      (63, yyprod63),
      (64, yyprod64)];
    sub2 = [      (65, yyprod65),
      (66, yyprod66),
      (67, yyprod67),
      (68, yyprod68),
      (69, yyprod69),
      (70, yyprod70),
      (71, yyprod71),
      (72, yyprod72),
      (73, yyprod73),
      (74, yyprod74),
      (75, yyprod75),
      (76, yyprod76),
      (77, yyprod77),
      (78, yyprod78),
      (79, yyprod79),
      (80, yyprod80),
      (81, yyprod81),
      (82, yyprod82),
      (83, yyprod83),
      (84, yyprod84),
      (85, yyprod85),
      (86, yyprod86),
      (87, yyprod87),
      (88, yyprod88),
      (89, yyprod89),
      (90, yyprod90),
      (91, yyprod91),
      (92, yyprod92),
      (93, yyprod93),
      (94, yyprod94),
      (95, yyprod95),
      (96, yyprod96),
      (97, yyprod97),
      (98, yyprod98),
      (99, yyprod99),
      (100, yyprod100),
      (101, yyprod101),
      (102, yyprod102),
      (103, yyprod103),
      (104, yyprod104),
      (105, yyprod105),
      (106, yyprod106),
      (107, yyprod107),
      (108, yyprod108),
      (109, yyprod109),
      (110, yyprod110),
      (111, yyprod111),
      (112, yyprod112),
      (113, yyprod113),
      (114, yyprod114),
      (115, yyprod115),
      (116, yyprod116),
      (117, yyprod117),
      (118, yyprod118),
      (119, yyprod119),
      (120, yyprod120),
      (121, yyprod121),
      (122, yyprod122),
      (123, yyprod123),
      (124, yyprod124),
      (125, yyprod125),
      (126, yyprod126),
      (127, yyprod127),
      (128, yyprod128)];
    sub3 = [      (129, yyprod129),
      (130, yyprod130),
      (131, yyprod131),
      (132, yyprod132),
      (133, yyprod133),
      (134, yyprod134),
      (135, yyprod135),
      (136, yyprod136),
      (137, yyprod137),
      (138, yyprod138),
      (139, yyprod139),
      (140, yyprod140),
      (141, yyprod141),
      (142, yyprod142),
      (143, yyprod143),
      (144, yyprod144),
      (145, yyprod145),
      (146, yyprod146),
      (147, yyprod147),
      (148, yyprod148),
      (149, yyprod149),
      (150, yyprod150),
      (151, yyprod151),
      (152, yyprod152),
      (153, yyprod153),
      (154, yyprod154),
      (155, yyprod155),
      (156, yyprod156),
      (157, yyprod157),
      (158, yyprod158),
      (159, yyprod159),
      (160, yyprod160),
      (161, yyprod161),
      (162, yyprod162),
      (163, yyprod163),
      (164, yyprod164),
      (165, yyprod165),
      (166, yyprod166),
      (167, yyprod167),
      (168, yyprod168),
      (169, yyprod169),
      (170, yyprod170),
      (171, yyprod171),
      (172, yyprod172),
      (173, yyprod173),
      (174, yyprod174),
      (175, yyprod175),
      (176, yyprod176),
      (177, yyprod177),
      (178, yyprod178),
      (179, yyprod179),
      (180, yyprod180),
      (181, yyprod181),
      (182, yyprod182),
      (183, yyprod183),
      (184, yyprod184),
      (185, yyprod185),
      (186, yyprod186),
      (187, yyprod187),
      (188, yyprod188),
      (189, yyprod189),
      (190, yyprod190),
      (191, yyprod191),
      (192, yyprod192)];
    sub4 = [      (193, yyprod193),
      (194, yyprod194),
      (195, yyprod195),
      (196, yyprod196),
      (197, yyprod197),
      (198, yyprod198),
      (199, yyprod199),
      (200, yyprod200),
      (201, yyprod201),
      (202, yyprod202),
      (203, yyprod203),
      (204, yyprod204),
      (205, yyprod205),
      (206, yyprod206),
      (207, yyprod207),
      (208, yyprod208),
      (209, yyprod209),
      (210, yyprod210),
      (211, yyprod211),
      (212, yyprod212),
      (213, yyprod213),
      (214, yyprod214),
      (215, yyprod215),
      (216, yyprod216),
      (217, yyprod217),
      (218, yyprod218),
      (219, yyprod219),
      (220, yyprod220),
      (221, yyprod221),
      (222, yyprod222),
      (223, yyprod223),
      (224, yyprod224),
      (225, yyprod225),
      (226, yyprod226),
      (227, yyprod227),
      (228, yyprod228),
      (229, yyprod229),
      (230, yyprod230),
      (231, yyprod231),
      (232, yyprod232),
      (233, yyprod233),
      (234, yyprod234),
      (235, yyprod235),
      (236, yyprod236),
      (237, yyprod237),
      (238, yyprod238),
      (239, yyprod239),
      (240, yyprod240),
      (241, yyprod241),
      (242, yyprod242),
      (243, yyprod243),
      (244, yyprod244),
      (245, yyprod245),
      (246, yyprod246),
      (247, yyprod247),
      (248, yyprod248),
      (249, yyprod249),
      (250, yyprod250),
      (251, yyprod251),
      (252, yyprod252),
      (253, yyprod253),
      (254, yyprod254),
      (255, yyprod255),
      (256, yyprod256)];
    sub5 = [      (257, yyprod257),
      (258, yyprod258),
      (259, yyprod259),
      (260, yyprod260),
      (261, yyprod261),
      (262, yyprod262),
      (263, yyprod263),
      (264, yyprod264),
      (265, yyprod265),
      (266, yyprod266),
      (267, yyprod267),
      (268, yyprod268),
      (269, yyprod269),
      (270, yyprod270),
      (271, yyprod271),
      (272, yyprod272),
      (273, yyprod273),
      (274, yyprod274),
      (275, yyprod275),
      (276, yyprod276),
      (277, yyprod277),
      (278, yyprod278),
      (279, yyprod279),
      (280, yyprod280),
      (281, yyprod281),
      (282, yyprod282),
      (283, yyprod283),
      (284, yyprod284),
      (285, yyprod285),
      (286, yyprod286),
      (287, yyprod287),
      (288, yyprod288),
      (289, yyprod289),
      (290, yyprod290),
      (291, yyprod291),
      (292, yyprod292),
      (293, yyprod293),
      (294, yyprod294),
      (295, yyprod295),
      (296, yyprod296),
      (297, yyprod297),
      (298, yyprod298),
      (299, yyprod299),
      (300, yyprod300),
      (301, yyprod301),
      (302, yyprod302),
      (303, yyprod303),
      (304, yyprod304),
      (305, yyprod305),
      (306, yyprod306),
      (307, yyprod307),
      (308, yyprod308),
      (309, yyprod309),
      (310, yyprod310),
      (311, yyprod311),
      (312, yyprod312),
      (313, yyprod313),
      (314, yyprod314),
      (315, yyprod315),
      (316, yyprod316),
      (317, yyprod317),
      (318, yyprod318),
      (319, yyprod319),
      (320, yyprod320)];
    sub6 = [      (321, yyprod321),
      (322, yyprod322),
      (323, yyprod323),
      (324, yyprod324),
      (325, yyprod325),
      (326, yyprod326),
      (327, yyprod327),
      (328, yyprod328),
      (329, yyprod329),
      (330, yyprod330),
      (331, yyprod331),
      (332, yyprod332),
      (333, yyprod333),
      (334, yyprod334),
      (335, yyprod335),
      (336, yyprod336),
      (337, yyprod337),
      (338, yyprod338),
      (339, yyprod339),
      (340, yyprod340),
      (341, yyprod341),
      (342, yyprod342),
      (343, yyprod343),
      (344, yyprod344),
      (345, yyprod345),
      (346, yyprod346),
      (347, yyprod347),
      (348, yyprod348),
      (349, yyprod349),
      (350, yyprod350),
      (351, yyprod351),
      (352, yyprod352),
      (353, yyprod353),
      (354, yyprod354),
      (355, yyprod355),
      (356, yyprod356),
      (357, yyprod357),
      (358, yyprod358),
      (359, yyprod359),
      (360, yyprod360),
      (361, yyprod361),
      (362, yyprod362),
      (363, yyprod363),
      (364, yyprod364),
      (365, yyprod365),
      (366, yyprod366),
      (367, yyprod367),
      (368, yyprod368),
      (369, yyprod369),
      (370, yyprod370),
      (371, yyprod371),
      (372, yyprod372),
      (373, yyprod373),
      (374, yyprod374),
      (375, yyprod375),
      (376, yyprod376),
      (377, yyprod377),
      (378, yyprod378),
      (379, yyprod379),
      (380, yyprod380),
      (381, yyprod381),
      (382, yyprod382),
      (383, yyprod383),
      (384, yyprod384)];
    sub7 = [      (385, yyprod385),
      (386, yyprod386),
      (387, yyprod387),
      (388, yyprod388),
      (389, yyprod389),
      (390, yyprod390),
      (391, yyprod391),
      (392, yyprod392),
      (393, yyprod393),
      (394, yyprod394),
      (395, yyprod395),
      (396, yyprod396),
      (397, yyprod397),
      (398, yyprod398),
      (399, yyprod399),
      (400, yyprod400),
      (401, yyprod401),
      (402, yyprod402),
      (403, yyprod403),
      (404, yyprod404),
      (405, yyprod405),
      (406, yyprod406),
      (407, yyprod407),
      (408, yyprod408),
      (409, yyprod409),
      (410, yyprod410),
      (411, yyprod411),
      (412, yyprod412),
      (413, yyprod413),
      (414, yyprod414),
      (415, yyprod415),
      (416, yyprod416),
      (417, yyprod417),
      (418, yyprod418),
      (419, yyprod419),
      (420, yyprod420),
      (421, yyprod421),
      (422, yyprod422),
      (423, yyprod423),
      (424, yyprod424),
      (425, yyprod425),
      (426, yyprod426),
      (427, yyprod427),
      (428, yyprod428),
      (429, yyprod429),
      (430, yyprod430),
      (431, yyprod431),
      (432, yyprod432),
      (433, yyprod433),
      (434, yyprod434),
      (435, yyprod435),
      (436, yyprod436),
      (437, yyprod437),
      (438, yyprod438),
      (439, yyprod439),
      (440, yyprod440),
      (441, yyprod441),
      (442, yyprod442),
      (443, yyprod443),
      (444, yyprod444),
      (445, yyprod445),
      (446, yyprod446),
      (447, yyprod447),
      (448, yyprod448)];
    sub8 = [      (449, yyprod449),
      (450, yyprod450),
      (451, yyprod451),
      (452, yyprod452),
      (453, yyprod453),
      (454, yyprod454),
      (455, yyprod455),
      (456, yyprod456),
      (457, yyprod457),
      (458, yyprod458),
      (459, yyprod459),
      (460, yyprod460),
      (461, yyprod461),
      (462, yyprod462),
      (463, yyprod463),
      (464, yyprod464),
      (465, yyprod465),
      (466, yyprod466)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8);
private yyacts  = let 
    sub1 = [      (0, yyaction0),
      (1, yyaction1),
      (2, yyaction2),
      (3, yyaction3),
      (4, yyaction4),
      (5, yyaction5),
      (6, yyaction6),
      (7, yyaction7),
      (8, yyaction8),
      (9, yyaction9),
      (10, yyaction10),
      (11, yyaction11),
      (12, yyaction12),
      (13, yyaction13),
      (14, yyaction14),
      (15, yyaction15),
      (16, yyaction16),
      (17, yyaction17),
      (18, yyaction18),
      (19, yyaction19),
      (20, yyaction20),
      (21, yyaction21),
      (22, yyaction22),
      (23, yyaction23),
      (24, yyaction24),
      (25, yyaction25),
      (26, yyaction26),
      (27, yyaction27),
      (28, yyaction28),
      (29, yyaction29),
      (30, yyaction30),
      (31, yyaction31),
      (32, yyaction32),
      (33, yyaction33),
      (34, yyaction34),
      (35, yyaction35),
      (36, yyaction36),
      (37, yyaction37),
      (38, yyaction38),
      (39, yyaction39),
      (40, yyaction40),
      (41, yyaction41),
      (42, yyaction42),
      (43, yyaction43),
      (44, yyaction44),
      (45, yyaction45),
      (46, yyaction46),
      (47, yyaction47),
      (48, yyaction48),
      (49, yyaction49),
      (50, yyaction50),
      (51, yyaction51),
      (52, yyaction52),
      (53, yyaction53),
      (54, yyaction54),
      (55, yyaction55),
      (56, yyaction56),
      (57, yyaction57),
      (58, yyaction58),
      (59, yyaction59),
      (60, yyaction60),
      (61, yyaction61),
      (62, yyaction62),
      (63, yyaction63)];
    sub2 = [      (64, yyaction64),
      (65, yyaction65),
      (66, yyaction66),
      (67, yyaction67),
      (68, yyaction68),
      (69, yyaction69),
      (70, yyaction70),
      (71, yyaction71),
      (72, yyaction72),
      (73, yyaction73),
      (74, yyaction74),
      (75, yyaction75),
      (76, yyaction76),
      (77, yyaction77),
      (78, yyaction78),
      (79, yyaction79),
      (80, yyaction80),
      (81, yyaction81),
      (82, yyaction82),
      (83, yyaction83),
      (84, yyaction84),
      (85, yyaction85),
      (86, yyaction86),
      (87, yyaction87),
      (88, yyaction88),
      (89, yyaction89),
      (90, yyaction90),
      (91, yyaction91),
      (92, yyaction92),
      (93, yyaction93),
      (94, yyaction94),
      (95, yyaction95),
      (96, yyaction96),
      (97, yyaction97),
      (98, yyaction98),
      (99, yyaction99),
      (100, yyaction100),
      (101, yyaction101),
      (102, yyaction102),
      (103, yyaction103),
      (104, yyaction104),
      (105, yyaction105),
      (106, yyaction106),
      (107, yyaction107),
      (108, yyaction108),
      (109, yyaction109),
      (110, yyaction110),
      (111, yyaction111),
      (112, yyaction112),
      (113, yyaction113),
      (114, yyaction114),
      (115, yyaction115),
      (116, yyaction116),
      (117, yyaction117),
      (118, yyaction118),
      (119, yyaction119),
      (120, yyaction120),
      (121, yyaction121),
      (122, yyaction122),
      (123, yyaction123),
      (124, yyaction124),
      (125, yyaction125),
      (126, yyaction126),
      (127, yyaction127)];
    sub3 = [      (128, yyaction128),
      (129, yyaction129),
      (130, yyaction130),
      (131, yyaction131),
      (132, yyaction132),
      (133, yyaction133),
      (134, yyaction134),
      (135, yyaction135),
      (136, yyaction136),
      (137, yyaction137),
      (138, yyaction138),
      (139, yyaction139),
      (140, yyaction140),
      (141, yyaction141),
      (142, yyaction142),
      (143, yyaction143),
      (144, yyaction144),
      (145, yyaction145),
      (146, yyaction146),
      (147, yyaction147),
      (148, yyaction148),
      (149, yyaction149),
      (150, yyaction150),
      (151, yyaction151),
      (152, yyaction152),
      (153, yyaction153),
      (154, yyaction154),
      (155, yyaction155),
      (156, yyaction156),
      (157, yyaction157),
      (158, yyaction158),
      (159, yyaction159),
      (160, yyaction160),
      (161, yyaction161),
      (162, yyaction162),
      (163, yyaction163),
      (164, yyaction164),
      (165, yyaction165),
      (166, yyaction166),
      (167, yyaction167),
      (168, yyaction168),
      (169, yyaction169),
      (170, yyaction170),
      (171, yyaction171),
      (172, yyaction172),
      (173, yyaction173),
      (174, yyaction174),
      (175, yyaction175),
      (176, yyaction176),
      (177, yyaction177),
      (178, yyaction178),
      (179, yyaction179),
      (180, yyaction180),
      (181, yyaction181),
      (182, yyaction182),
      (183, yyaction183),
      (184, yyaction184),
      (185, yyaction185),
      (186, yyaction186),
      (187, yyaction187),
      (188, yyaction188),
      (189, yyaction189),
      (190, yyaction190),
      (191, yyaction191)];
    sub4 = [      (192, yyaction192),
      (193, yyaction193),
      (194, yyaction194),
      (195, yyaction195),
      (196, yyaction196),
      (197, yyaction197),
      (198, yyaction198),
      (199, yyaction199),
      (200, yyaction200),
      (201, yyaction201),
      (202, yyaction202),
      (203, yyaction203),
      (204, yyaction204),
      (205, yyaction205),
      (206, yyaction206),
      (207, yyaction207),
      (208, yyaction208),
      (209, yyaction209),
      (210, yyaction210),
      (211, yyaction211),
      (212, yyaction212),
      (213, yyaction213),
      (214, yyaction214),
      (215, yyaction215),
      (216, yyaction216),
      (217, yyaction217),
      (218, yyaction218),
      (219, yyaction219),
      (220, yyaction220),
      (221, yyaction221),
      (222, yyaction222),
      (223, yyaction223),
      (224, yyaction224),
      (225, yyaction225),
      (226, yyaction226),
      (227, yyaction227),
      (228, yyaction228),
      (229, yyaction229),
      (230, yyaction230),
      (231, yyaction231),
      (232, yyaction232),
      (233, yyaction233),
      (234, yyaction234),
      (235, yyaction235),
      (236, yyaction236),
      (237, yyaction237),
      (238, yyaction238),
      (239, yyaction239),
      (240, yyaction240),
      (241, yyaction241),
      (242, yyaction242),
      (243, yyaction243),
      (244, yyaction244),
      (245, yyaction245),
      (246, yyaction246),
      (247, yyaction247),
      (248, yyaction248),
      (249, yyaction249),
      (250, yyaction250),
      (251, yyaction251),
      (252, yyaction252),
      (253, yyaction253),
      (254, yyaction254),
      (255, yyaction255)];
    sub5 = [      (256, yyaction256),
      (257, yyaction257),
      (258, yyaction258),
      (259, yyaction259),
      (260, yyaction260),
      (261, yyaction261),
      (262, yyaction262),
      (263, yyaction263),
      (264, yyaction264),
      (265, yyaction265),
      (266, yyaction266),
      (267, yyaction267),
      (268, yyaction268),
      (269, yyaction269),
      (270, yyaction270),
      (271, yyaction271),
      (272, yyaction272),
      (273, yyaction273),
      (274, yyaction274),
      (275, yyaction275),
      (276, yyaction276),
      (277, yyaction277),
      (278, yyaction278),
      (279, yyaction279),
      (280, yyaction280),
      (281, yyaction281),
      (282, yyaction282),
      (283, yyaction283),
      (284, yyaction284),
      (285, yyaction285),
      (286, yyaction286),
      (287, yyaction287),
      (288, yyaction288),
      (289, yyaction289),
      (290, yyaction290),
      (291, yyaction291),
      (292, yyaction292),
      (293, yyaction293),
      (294, yyaction294),
      (295, yyaction295),
      (296, yyaction296),
      (297, yyaction297),
      (298, yyaction298),
      (299, yyaction299),
      (300, yyaction300),
      (301, yyaction301),
      (302, yyaction302),
      (303, yyaction303),
      (304, yyaction304),
      (305, yyaction305),
      (306, yyaction306),
      (307, yyaction307),
      (308, yyaction308),
      (309, yyaction309),
      (310, yyaction310),
      (311, yyaction311),
      (312, yyaction312),
      (313, yyaction313),
      (314, yyaction314),
      (315, yyaction315),
      (316, yyaction316),
      (317, yyaction317),
      (318, yyaction318),
      (319, yyaction319)];
    sub6 = [      (320, yyaction320),
      (321, yyaction321),
      (322, yyaction322),
      (323, yyaction323),
      (324, yyaction324),
      (325, yyaction325),
      (326, yyaction326),
      (327, yyaction327),
      (328, yyaction328),
      (329, yyaction329),
      (330, yyaction330),
      (331, yyaction331),
      (332, yyaction332),
      (333, yyaction333),
      (334, yyaction334),
      (335, yyaction335),
      (336, yyaction336),
      (337, yyaction337),
      (338, yyaction338),
      (339, yyaction339),
      (340, yyaction340),
      (341, yyaction341),
      (342, yyaction342),
      (343, yyaction343),
      (344, yyaction344),
      (345, yyaction345),
      (346, yyaction346),
      (347, yyaction347),
      (348, yyaction348),
      (349, yyaction349),
      (350, yyaction350),
      (351, yyaction351),
      (352, yyaction352),
      (353, yyaction353),
      (354, yyaction354),
      (355, yyaction355),
      (356, yyaction356),
      (357, yyaction357),
      (358, yyaction358),
      (359, yyaction359),
      (360, yyaction360),
      (361, yyaction361),
      (362, yyaction362),
      (363, yyaction363),
      (364, yyaction364),
      (365, yyaction365),
      (366, yyaction366),
      (367, yyaction367),
      (368, yyaction368),
      (369, yyaction369),
      (370, yyaction370),
      (371, yyaction371),
      (372, yyaction372),
      (373, yyaction373),
      (374, yyaction374),
      (375, yyaction375),
      (376, yyaction376),
      (377, yyaction377),
      (378, yyaction378),
      (379, yyaction379),
      (380, yyaction380),
      (381, yyaction381),
      (382, yyaction382),
      (383, yyaction383)];
    sub7 = [      (384, yyaction384),
      (385, yyaction385),
      (386, yyaction386),
      (387, yyaction387),
      (388, yyaction388),
      (389, yyaction389),
      (390, yyaction390),
      (391, yyaction391),
      (392, yyaction392),
      (393, yyaction393),
      (394, yyaction394),
      (395, yyaction395),
      (396, yyaction396),
      (397, yyaction397),
      (398, yyaction398),
      (399, yyaction399),
      (400, yyaction400),
      (401, yyaction401),
      (402, yyaction402),
      (403, yyaction403),
      (404, yyaction404),
      (405, yyaction405),
      (406, yyaction406),
      (407, yyaction407),
      (408, yyaction408),
      (409, yyaction409),
      (410, yyaction410),
      (411, yyaction411),
      (412, yyaction412),
      (413, yyaction413),
      (414, yyaction414),
      (415, yyaction415),
      (416, yyaction416),
      (417, yyaction417),
      (418, yyaction418),
      (419, yyaction419),
      (420, yyaction420),
      (421, yyaction421),
      (422, yyaction422),
      (423, yyaction423),
      (424, yyaction424),
      (425, yyaction425),
      (426, yyaction426),
      (427, yyaction427),
      (428, yyaction428),
      (429, yyaction429),
      (430, yyaction430),
      (431, yyaction431),
      (432, yyaction432),
      (433, yyaction433),
      (434, yyaction434),
      (435, yyaction435),
      (436, yyaction436),
      (437, yyaction437),
      (438, yyaction438),
      (439, yyaction439),
      (440, yyaction440),
      (441, yyaction441),
      (442, yyaction442),
      (443, yyaction443),
      (444, yyaction444),
      (445, yyaction445),
      (446, yyaction446),
      (447, yyaction447)];
    sub8 = [      (448, yyaction448),
      (449, yyaction449),
      (450, yyaction450),
      (451, yyaction451),
      (452, yyaction452),
      (453, yyaction453),
      (454, yyaction454),
      (455, yyaction455),
      (456, yyaction456),
      (457, yyaction457),
      (458, yyaction458),
      (459, yyaction459),
      (460, yyaction460),
      (461, yyaction461),
      (462, yyaction462),
      (463, yyaction463),
      (464, yyaction464),
      (465, yyaction465),
      (466, yyaction466),
      (467, yyaction467),
      (468, yyaction468),
      (469, yyaction469),
      (470, yyaction470),
      (471, yyaction471),
      (472, yyaction472),
      (473, yyaction473),
      (474, yyaction474),
      (475, yyaction475),
      (476, yyaction476),
      (477, yyaction477),
      (478, yyaction478),
      (479, yyaction479),
      (480, yyaction480),
      (481, yyaction481),
      (482, yyaction482),
      (483, yyaction483),
      (484, yyaction484),
      (485, yyaction485),
      (486, yyaction486),
      (487, yyaction487),
      (488, yyaction488),
      (489, yyaction489),
      (490, yyaction490),
      (491, yyaction491),
      (492, yyaction492),
      (493, yyaction493),
      (494, yyaction494),
      (495, yyaction495),
      (496, yyaction496),
      (497, yyaction497),
      (498, yyaction498),
      (499, yyaction499),
      (500, yyaction500),
      (501, yyaction501),
      (502, yyaction502),
      (503, yyaction503),
      (504, yyaction504),
      (505, yyaction505),
      (506, yyaction506),
      (507, yyaction507),
      (508, yyaction508),
      (509, yyaction509),
      (510, yyaction510),
      (511, yyaction511)];
    sub9 = [      (512, yyaction512),
      (513, yyaction513),
      (514, yyaction514),
      (515, yyaction515),
      (516, yyaction516),
      (517, yyaction517),
      (518, yyaction518),
      (519, yyaction519),
      (520, yyaction520),
      (521, yyaction521),
      (522, yyaction522),
      (523, yyaction523),
      (524, yyaction524),
      (525, yyaction525),
      (526, yyaction526),
      (527, yyaction527),
      (528, yyaction528),
      (529, yyaction529),
      (530, yyaction530),
      (531, yyaction531),
      (532, yyaction532),
      (533, yyaction533),
      (534, yyaction534),
      (535, yyaction535),
      (536, yyaction536),
      (537, yyaction537),
      (538, yyaction538),
      (539, yyaction539),
      (540, yyaction540),
      (541, yyaction541),
      (542, yyaction542),
      (543, yyaction543),
      (544, yyaction544),
      (545, yyaction545),
      (546, yyaction546),
      (547, yyaction547),
      (548, yyaction548),
      (549, yyaction549),
      (550, yyaction550),
      (551, yyaction551),
      (552, yyaction552),
      (553, yyaction553),
      (554, yyaction554),
      (555, yyaction555),
      (556, yyaction556),
      (557, yyaction557),
      (558, yyaction558),
      (559, yyaction559),
      (560, yyaction560),
      (561, yyaction561),
      (562, yyaction562),
      (563, yyaction563),
      (564, yyaction564),
      (565, yyaction565),
      (566, yyaction566),
      (567, yyaction567),
      (568, yyaction568),
      (569, yyaction569),
      (570, yyaction570),
      (571, yyaction571),
      (572, yyaction572),
      (573, yyaction573),
      (574, yyaction574),
      (575, yyaction575)];
    sub10 = [      (576, yyaction576),
      (577, yyaction577),
      (578, yyaction578),
      (579, yyaction579),
      (580, yyaction580),
      (581, yyaction581),
      (582, yyaction582),
      (583, yyaction583),
      (584, yyaction584),
      (585, yyaction585),
      (586, yyaction586),
      (587, yyaction587),
      (588, yyaction588),
      (589, yyaction589),
      (590, yyaction590),
      (591, yyaction591),
      (592, yyaction592),
      (593, yyaction593),
      (594, yyaction594),
      (595, yyaction595),
      (596, yyaction596),
      (597, yyaction597),
      (598, yyaction598),
      (599, yyaction599),
      (600, yyaction600),
      (601, yyaction601),
      (602, yyaction602),
      (603, yyaction603),
      (604, yyaction604),
      (605, yyaction605),
      (606, yyaction606),
      (607, yyaction607),
      (608, yyaction608),
      (609, yyaction609),
      (610, yyaction610),
      (611, yyaction611),
      (612, yyaction612),
      (613, yyaction613),
      (614, yyaction614),
      (615, yyaction615),
      (616, yyaction616),
      (617, yyaction617),
      (618, yyaction618),
      (619, yyaction619),
      (620, yyaction620),
      (621, yyaction621),
      (622, yyaction622),
      (623, yyaction623),
      (624, yyaction624),
      (625, yyaction625),
      (626, yyaction626),
      (627, yyaction627),
      (628, yyaction628),
      (629, yyaction629),
      (630, yyaction630),
      (631, yyaction631),
      (632, yyaction632),
      (633, yyaction633),
      (634, yyaction634),
      (635, yyaction635),
      (636, yyaction636),
      (637, yyaction637),
      (638, yyaction638),
      (639, yyaction639)];
    sub11 = [      (640, yyaction640),
      (641, yyaction641),
      (642, yyaction642),
      (643, yyaction643),
      (644, yyaction644),
      (645, yyaction645),
      (646, yyaction646),
      (647, yyaction647),
      (648, yyaction648),
      (649, yyaction649),
      (650, yyaction650),
      (651, yyaction651),
      (652, yyaction652),
      (653, yyaction653),
      (654, yyaction654),
      (655, yyaction655),
      (656, yyaction656),
      (657, yyaction657),
      (658, yyaction658),
      (659, yyaction659),
      (660, yyaction660),
      (661, yyaction661),
      (662, yyaction662),
      (663, yyaction663),
      (664, yyaction664),
      (665, yyaction665),
      (666, yyaction666),
      (667, yyaction667),
      (668, yyaction668),
      (669, yyaction669),
      (670, yyaction670),
      (671, yyaction671),
      (672, yyaction672),
      (673, yyaction673),
      (674, yyaction674),
      (675, yyaction675),
      (676, yyaction676),
      (677, yyaction677),
      (678, yyaction678),
      (679, yyaction679),
      (680, yyaction680),
      (681, yyaction681),
      (682, yyaction682),
      (683, yyaction683),
      (684, yyaction684),
      (685, yyaction685),
      (686, yyaction686),
      (687, yyaction687),
      (688, yyaction688),
      (689, yyaction689),
      (690, yyaction690),
      (691, yyaction691),
      (692, yyaction692),
      (693, yyaction693),
      (694, yyaction694),
      (695, yyaction695),
      (696, yyaction696),
      (697, yyaction697),
      (698, yyaction698),
      (699, yyaction699),
      (700, yyaction700),
      (701, yyaction701),
      (702, yyaction702),
      (703, yyaction703)];
    sub12 = [      (704, yyaction704),
      (705, yyaction705),
      (706, yyaction706),
      (707, yyaction707),
      (708, yyaction708),
      (709, yyaction709),
      (710, yyaction710),
      (711, yyaction711),
      (712, yyaction712),
      (713, yyaction713),
      (714, yyaction714),
      (715, yyaction715),
      (716, yyaction716),
      (717, yyaction717),
      (718, yyaction718),
      (719, yyaction719),
      (720, yyaction720),
      (721, yyaction721),
      (722, yyaction722),
      (723, yyaction723),
      (724, yyaction724),
      (725, yyaction725),
      (726, yyaction726),
      (727, yyaction727),
      (728, yyaction728)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyrecs  = let 
    sub1 = [      (0, yybadstart 0 "a module"),
      (1, yyparsing  1 "a sequence of doc comments"),
      (2, yyparsing  2 "a module clause"),
      (3, yyexpect 3(yyfromId PACKAGE)),
      (4, yyparsing  4 "a module"),
      (5, yyrecover 5),
      (6, yyparsing  6 "a module"),
      (7, yyparsing  7 "a module clause"),
      (8, yybadstart 8 "the next definition"),
      (9, yyparsing  9 "a sequence of doc comments"),
      (10, yyexpect 10(yyfromId DOCUMENTATION)),
      (11, yyparsing  11 "a variable name"),
      (12, yyparsing  12 "a module name"),
      (13, yyparsing  13 "a module name"),
      (14, yyparsing  14 "a variable name"),
      (15, yyparsing  15 "a variable name"),
      (16, yyparsing  16 "a variable name"),
      (17, yyparsing  17 "a variable name"),
      (18, yyparsing  18 "a variable name"),
      (19, yyparsing  19 "a variable name"),
      (20, yyparsing  20 "a module name"),
      (21, yyexpect 21(yyfromCh '.')),
      (22, yyparsing  22 "a module clause"),
      (23, yyparsing  23 "a module clause"),
      (24, yyparsing  24 "a qualified variable name"),
      (25, yyparsing  25 "a qualified constructor or type name"),
      (26, yyparsing  26 "a qualified variable name"),
      (27, yyparsing  27 "a literal"),
      (28, yyparsing  28 "a literal"),
      (29, yyparsing  29 "a top level expression"),
      (30, yyparsing  30 "a top level expression"),
      (31, yyexpect 31(yyfromCh '{')),
      (32, yyexpect 32(yyfromCh '{')),
      (33, yyparsing  33 "a literal"),
      (34, yyparsing  34 "a literal"),
      (35, yyparsing  35 "a literal"),
      (36, yyparsing  36 "a literal"),
      (37, yyparsing  37 "a literal"),
      (38, yyparsing  38 "a literal"),
      (39, yyparsing  39 "a literal"),
      (40, yyparsing  40 "a literal"),
      (41, yyparsing  41 "binary expression"),
      (42, yyparsing  42 "a term"),
      (43, yyparsing  43 "a term"),
      (44, yyparsing  44 "an unary operator"),
      (45, yyparsing  45 "an unary operator"),
      (46, yyparsing  46 "a lambda abstraction"),
      (47, yyparsing  47 "a term"),
      (48, yyparsing  48 "a module"),
      (49, yyparsing  49 "a frege script"),
      (50, yyparsing  50 "a term"),
      (51, yyparsing  51 "a term"),
      (52, yyparsing  52 "unary expression"),
      (53, yyparsing  53 "an expression"),
      (54, yyparsing  54 "a term"),
      (55, yyparsing  55 "a top level expression"),
      (56, yyparsing  56 "binary expression"),
      (57, yyparsing  57 "a top level expression"),
      (58, yyparsing  58 "function application"),
      (59, yyparsing  59 "unary expression"),
      (60, yyexpect 60(yyfromCh '{')),
      (61, yyparsing  61 "a primary expression"),
      (62, yyparsing  62 "a word"),
      (63, yyexpect 63(yyfromCh '{'))];
    sub2 = [      (64, yyparsing  64 "a module"),
      (65, yyexpect 65(yyfromCh '(')),
      (66, yyparsing  66 "words"),
      (67, yyparsing  67 "a module clause"),
      (68, yyexpect 68(yyfromId PACKAGE)),
      (69, yyparsing  69 "the next definition"),
      (70, yyparsing  70 "a sequence of doc comments"),
      (71, yyparsing  71 "a module name"),
      (72, yyparsing  72 "a module name"),
      (73, yyparsing  73 "a module clause"),
      (74, yyparsing  74 "a variable or an operator"),
      (75, yyparsing  75 "a qualified constructor or type name"),
      (76, yyparsing  76 "a qualified variable name"),
      (77, yyparsing  77 "a variable or an operator"),
      (78, yyparsing  78 "a qualified variable name"),
      (79, yybadstart 79 "then branch"),
      (80, yyexpect 80(yyfromId OF)),
      (81, yyparsing  81 "a top level expression"),
      (82, yyparsing  82 "a primary expression"),
      (83, yyparsing  83 "binary expression"),
      (84, yyparsing  84 "an operator"),
      (85, yyparsing  85 "binary expression"),
      (86, yyparsing  86 "a term"),
      (87, yybadstart 87 "a sequence of one or more ','"),
      (88, yyparsing  88 "a term"),
      (89, yyparsing  89 "a term"),
      (90, yyparsing  90 "unary expression"),
      (91, yyexpect 91(yyfromCh ')')),
      (92, yybadstart 92 "an operator"),
      (93, yyparsing  93 "a term"),
      (94, yyparsing  94 "a term"),
      (95, yyparsing  95 "a term"),
      (96, yyparsing  96 "a lambda abstraction"),
      (97, yyparsing  97 "lambda patterns"),
      (98, yyparsing  98 "a term"),
      (99, yyparsing  99 "unary expression"),
      (100, yyparsing  100 "an expression"),
      (101, yyparsing  101 "binary expression"),
      (102, yyparsing  102 "binary expression"),
      (103, yyparsing  103 "function application"),
      (104, yyparsing  104 "a primary expression"),
      (105, yyexpect 105(yyfromId VARID)),
      (106, yyparsing  106 "a module"),
      (107, yyparsing  107 "a variable name"),
      (108, yyparsing  108 "documentation"),
      (109, yyparsing  109 "a module import"),
      (110, yyexpect 110(yyfromId INTCONST)),
      (111, yyexpect 111(yyfromId INTCONST)),
      (112, yyexpect 112(yyfromId INTCONST)),
      (113, yyparsing  113 "specification for module class "),
      (114, yyexpect 114(yyfromId CONID)),
      (115, yyexpect 115(yyfromId CONID)),
      (116, yyparsing  116 "a type class declaration"),
      (117, yyparsing  117 "an instance declaration"),
      (118, yyparsing  118 "a protected or private declaration"),
      (119, yyexpect 119(yyfromId CONID)),
      (120, yyparsing  120 "an instance derivation"),
      (121, yyparsing  121 "a protected or private declaration"),
      (122, yyparsing  122 "a protected or private declaration"),
      (123, yyparsing  123 "a protected or private declaration"),
      (124, yyexpect 124(yyfromId NATIVE)),
      (125, yyparsing  125 "an annotated item"),
      (126, yyparsing  126 "a module"),
      (127, yybadstart 127 "the next definition")];
    sub3 = [      (128, yyparsing  128 "a declaration"),
      (129, yyparsing  129 "a declaration"),
      (130, yyparsing  130 "a declaration"),
      (131, yyparsing  131 "a top level declaration"),
      (132, yyparsing  132 "a declaration"),
      (133, yyparsing  133 "a top level declaration"),
      (134, yyparsing  134 "a top level declaration"),
      (135, yyparsing  135 "a top level declaration"),
      (136, yyparsing  136 "a declaration"),
      (137, yyparsing  137 "a declaration"),
      (138, yyparsing  138 "a declaration"),
      (139, yyparsing  139 "a declaration"),
      (140, yyparsing  140 "a declaration"),
      (141, yyparsing  141 "a local declaration"),
      (142, yyparsing  142 "a local declaration"),
      (143, yybadstart 143 "a where clause"),
      (144, yyparsing  144 "an annotated item"),
      (145, yyparsing  145 "a fixity declaration"),
      (146, yyexpect 146(yyfromId DCOLON)),
      (147, yyparsing  147 "a list of items to annotate"),
      (148, yyparsing  148 "a declaration of a native item"),
      (149, yybadstart 149 "declarations local to a class, instance or type"),
      (150, yyparsing  150 "a function or pattern binding"),
      (151, yyparsing  151 "left hand side of a function or pattern binding"),
      (152, yyparsing  152 "a module clause"),
      (153, yyparsing  153 "words"),
      (154, yyparsing  154 "a module clause"),
      (155, yyparsing  155 "a module clause"),
      (156, yyparsing  156 "a module name"),
      (157, yyparsing  157 "a qualified constructor or type name"),
      (158, yyparsing  158 "a qualified variable name"),
      (159, yyparsing  159 "then branch"),
      (160, yyexpect 160(yyfromId THEN)),
      (161, yyparsing  161 "a top level expression"),
      (162, yyexpect 162(yyfromCh '{')),
      (163, yyparsing  163 "a function or pattern binding"),
      (164, yybadstart 164 "a where clause"),
      (165, yybadstart 165 "the next definition"),
      (166, yyexpect 166(yyfromCh '}')),
      (167, yyexpect 167(yyfromCh '{')),
      (168, yyparsing  168 "a list comprehension qualifier"),
      (169, yybadstart 169 "the next definition"),
      (170, yyparsing  170 "a list comprehension qualifier"),
      (171, yyexpect 171(yyfromCh '}')),
      (172, yyparsing  172 "a term"),
      (173, yyparsing  173 "a sequence of one or more ','"),
      (174, yyparsing  174 "a term"),
      (175, yyparsing  175 "a term"),
      (176, yyparsing  176 "a term"),
      (177, yyparsing  177 "a term"),
      (178, yyexpect 178(yyfromCh ')')),
      (179, yyparsing  179 "a term"),
      (180, yyparsing  180 "a term"),
      (181, yyparsing  181 "an operator"),
      (182, yyparsing  182 "binary expression"),
      (183, yyexpect 183(yyfromCh ')')),
      (184, yyparsing  184 "list of expressions separated by ','"),
      (185, yyparsing  185 "a term"),
      (186, yyparsing  186 "a term"),
      (187, yyparsing  187 "a term"),
      (188, yyparsing  188 "a lambda body"),
      (189, yyparsing  189 "a lambda body"),
      (190, yyparsing  190 "a lambda abstraction"),
      (191, yyparsing  191 "lambda patterns")];
    sub4 = [      (192, yyparsing  192 "a variable name"),
      (193, yyparsing  193 "a term"),
      (194, yyparsing  194 "field"),
      (195, yyexpect 195(yyfromCh '}')),
      (196, yyparsing  196 "field list"),
      (197, yyparsing  197 "a type variable"),
      (198, yyparsing  198 "a qualified constructor or type name"),
      (199, yyexpect 199(yyfromId VARID)),
      (200, yyparsing  200 "a non function type"),
      (201, yyparsing  201 "a non function type"),
      (202, yyparsing  202 "a type constructor"),
      (203, yyparsing  203 "an expression"),
      (204, yyparsing  204 "a qualified type"),
      (205, yyparsing  205 "a qualified type"),
      (206, yyparsing  206 "a constrained type"),
      (207, yyparsing  207 "a constrained type"),
      (208, yyparsing  208 "a type application"),
      (209, yyparsing  209 "non function types"),
      (210, yyparsing  210 "a non function type"),
      (211, yyparsing  211 "a non function type"),
      (212, yyparsing  212 "binary expression"),
      (213, yyparsing  213 "binary expression"),
      (214, yyparsing  214 "a primary expression"),
      (215, yyexpect 215(yyfromId VARID)),
      (216, yyparsing  216 "a primary expression"),
      (217, yyparsing  217 "a primary expression"),
      (218, yyparsing  218 "a primary expression"),
      (219, yyparsing  219 "a primary expression"),
      (220, yyexpect 220(yyfromCh '}')),
      (221, yyparsing  221 "field list"),
      (222, yyexpect 222(yyfromCh '}')),
      (223, yyparsing  223 "a module import"),
      (224, yyparsing  224 "the start of a fixity declaration"),
      (225, yyparsing  225 "the start of a fixity declaration"),
      (226, yyparsing  226 "the start of a fixity declaration"),
      (227, yybadstart 227 "the type this module derives from"),
      (228, yyparsing  228 "the frege name of the native method"),
      (229, yyparsing  229 "an annotated item"),
      (230, yyparsing  230 "the frege name of the native method"),
      (231, yyparsing  231 "the frege name of the native method"),
      (232, yyparsing  232 "the frege name of the native method"),
      (233, yyparsing  233 "a specification of a native item"),
      (234, yyexpect 234(yyfromId DCOLON)),
      (235, yyparsing  235 "a data definition"),
      (236, yyparsing  236 "a data definition"),
      (237, yyparsing  237 "type class context"),
      (238, yybadstart 238 "a type variable"),
      (239, yyparsing  239 "type class context"),
      (240, yybadstart 240 "declarations local to a class, instance or type"),
      (241, yyparsing  241 "instance context"),
      (242, yyparsing  242 "instance constraint"),
      (243, yyparsing  243 "instance context"),
      (244, yyparsing  244 "instance head"),
      (245, yybadstart 245 "declarations local to a class, instance or type"),
      (246, yyparsing  246 "a protected or private declaration"),
      (247, yyparsing  247 "a type declaration"),
      (248, yyparsing  248 "an instance derivation"),
      (249, yyparsing  249 "a declaration of a native item"),
      (250, yyparsing  250 "a protected or private declaration"),
      (251, yyparsing  251 "a protected or private declaration"),
      (252, yyparsing  252 "a protected or private declaration"),
      (253, yyparsing  253 "a declaration of a native item"),
      (254, yyparsing  254 "an annotated item"),
      (255, yyparsing  255 "an annotated item")];
    sub5 = [      (256, yyparsing  256 "an annotated item"),
      (257, yyparsing  257 "declarations"),
      (258, yyparsing  258 "a declaration"),
      (259, yyexpect 259(yyfromCh '{')),
      (260, yyparsing  260 "a function or pattern binding"),
      (261, yyparsing  261 "an operator"),
      (262, yyparsing  262 "an operator"),
      (263, yyparsing  263 "an operator"),
      (264, yyparsing  264 "some operators"),
      (265, yyparsing  265 "a fixity declaration"),
      (266, yyparsing  266 "an annotation"),
      (267, yyparsing  267 "a list of items to annotate"),
      (268, yyexpect 268(yyfromCh '{')),
      (269, yyparsing  269 "a data definition"),
      (270, yyparsing  270 "a guarded expression"),
      (271, yyparsing  271 "a function or pattern binding"),
      (272, yyparsing  272 "a function or pattern binding"),
      (273, yyparsing  273 "guarded expressions"),
      (274, yyparsing  274 "a qualified variable name"),
      (275, yyexpect 275(yyfromCh ')')),
      (276, yyparsing  276 "a qualified variable name"),
      (277, yyparsing  277 "a list of qualified variable names"),
      (278, yyparsing  278 "a qualified variable name"),
      (279, yyparsing  279 "a module clause"),
      (280, yyparsing  280 "then branch"),
      (281, yybadstart 281 "else branch"),
      (282, yyparsing  282 "a top level expression"),
      (283, yyparsing  283 "declarations in a let expression or where clause"),
      (284, yyexpect 284(yyfromId IN)),
      (285, yyparsing  285 "a list comprehension qualifier"),
      (286, yyparsing  286 "a guard qualifier"),
      (287, yyparsing  287 "a list comprehension qualifier"),
      (288, yyparsing  288 "do expression qualifiers"),
      (289, yyparsing  289 "a primary expression"),
      (290, yyparsing  290 "list of expressions separated by ';'"),
      (291, yyexpect 291(yyfromCh ')')),
      (292, yyparsing  292 "list of expressions separated by ','"),
      (293, yyexpect 293(yyfromCh ')')),
      (294, yyparsing  294 "a term"),
      (295, yyparsing  295 "a term"),
      (296, yyparsing  296 "a term"),
      (297, yyparsing  297 "list of expressions separated by ','"),
      (298, yyparsing  298 "list comprehension qualifiers"),
      (299, yyexpect 299(yyfromCh ']')),
      (300, yyparsing  300 "a term"),
      (301, yyexpect 301(yyfromCh ']')),
      (302, yyparsing  302 "a lambda body"),
      (303, yyparsing  303 "field"),
      (304, yyparsing  304 "a term"),
      (305, yyparsing  305 "field list"),
      (306, yyexpect 306(yyfromId CONID)),
      (307, yyparsing  307 "a type variable bound in a forall"),
      (308, yybadstart 308 "'.' or 'â¢'"),
      (309, yyparsing  309 "type variables bound in a forall"),
      (310, yyparsing  310 "a type variable"),
      (311, yyexpect 311(yyfromCh ')')),
      (312, yyparsing  312 "a type constructor"),
      (313, yyparsing  313 "a non function type"),
      (314, yyparsing  314 "a non function type"),
      (315, yyparsing  315 "a non function type"),
      (316, yyexpect 316(yyfromCh ')')),
      (317, yyparsing  317 "a type constructor"),
      (318, yyexpect 318(yyfromCh ']')),
      (319, yyparsing  319 "a type")];
    sub6 = [      (320, yyparsing  320 "a constrained type"),
      (321, yyparsing  321 "non function types"),
      (322, yyparsing  322 "a primary expression"),
      (323, yyexpect 323(yyfromCh '}')),
      (324, yyexpect 324(yyfromCh ']')),
      (325, yyparsing  325 "a primary expression"),
      (326, yyexpect 326(yyfromCh '}')),
      (327, yyparsing  327 "a primary expression"),
      (328, yyparsing  328 "a primary expression"),
      (329, yyparsing  329 "field list"),
      (330, yyparsing  330 "a module"),
      (331, yyparsing  331 "a module import"),
      (332, yyparsing  332 "a module import"),
      (333, yyparsing  333 "an import list"),
      (334, yyparsing  334 "an import list"),
      (335, yyparsing  335 "a module import"),
      (336, yyexpect 336(yyfromCh '(')),
      (337, yyparsing  337 "the type this module derives from"),
      (338, yybadstart 338 "the interfaces this module implements"),
      (339, yyexpect 339(yyfromCh ')')),
      (340, yyexpect 340(yyfromCh ')')),
      (341, yyexpect 341(yyfromCh ')')),
      (342, yyparsing  342 "a valid java identifier"),
      (343, yyparsing  343 "a valid java identifier"),
      (344, yybadstart 344 "a valid java identifier"),
      (345, yyparsing  345 "a valid java identifier"),
      (346, yyparsing  346 "a valid java identifier"),
      (347, yyparsing  347 "native generic type arguments"),
      (348, yyparsing  348 "a native item"),
      (349, yyparsing  349 "a valid java identifier"),
      (350, yyparsing  350 "a native item"),
      (351, yyparsing  351 "a native item"),
      (352, yybadstart 352 "native generic type arguments"),
      (353, yyparsing  353 "a specification of a native item"),
      (354, yyparsing  354 "a declaration of a native item"),
      (355, yyexpect 355(yyfromId VARID)),
      (356, yyparsing  356 "a data definition"),
      (357, yyparsing  357 "a sequence of type variables"),
      (358, yyexpect 358(yyfromCh '=')),
      (359, yyparsing  359 "a data definition"),
      (360, yyexpect 360(yyfromCh '=')),
      (361, yyparsing  361 "simple constraints"),
      (362, yyexpect 362(yyfromCh ')')),
      (363, yyparsing  363 "simple constraint"),
      (364, yyexpect 364(yyfromId CONID)),
      (365, yyparsing  365 "a type class declaration"),
      (366, yyparsing  366 "instance constraints"),
      (367, yyexpect 367(yyfromCh ')')),
      (368, yyparsing  368 "instance constraint"),
      (369, yyparsing  369 "instance head"),
      (370, yyparsing  370 "an instance declaration"),
      (371, yyparsing  371 "a type declaration"),
      (372, yyexpect 372(yyfromCh '=')),
      (373, yyparsing  373 "an annotated item"),
      (374, yyparsing  374 "an annotated item"),
      (375, yyparsing  375 "an annotated item"),
      (376, yyparsing  376 "declarations"),
      (377, yyparsing  377 "a where clause"),
      (378, yyparsing  378 "some operators"),
      (379, yyparsing  379 "an annotation"),
      (380, yyparsing  380 "a list of items to annotate"),
      (381, yyparsing  381 "declarations local to a class, instance or type"),
      (382, yyparsing  382 "a guard qualifier"),
      (383, yyparsing  383 "guard qualifiers")];
    sub7 = [      (384, yybadstart 384 "'='"),
      (385, yyparsing  385 "a function or pattern binding"),
      (386, yyparsing  386 "guarded expressions"),
      (387, yyparsing  387 "a qualified variable name"),
      (388, yyparsing  388 "a qualified variable name"),
      (389, yyparsing  389 "a module clause"),
      (390, yyparsing  390 "a list of qualified variable names"),
      (391, yyparsing  391 "else branch"),
      (392, yyexpect 392(yyfromId ELSE)),
      (393, yyparsing  393 "a top level expression"),
      (394, yyparsing  394 "a pattern"),
      (395, yyparsing  395 "case alternative"),
      (396, yybadstart 396 "a where clause"),
      (397, yyexpect 397(yyfromCh '}')),
      (398, yyparsing  398 "declarations in a let expression or where clause"),
      (399, yyparsing  399 "a top level expression"),
      (400, yyexpect 400(yyfromCh '}')),
      (401, yyparsing  401 "a guard qualifier"),
      (402, yyparsing  402 "a list comprehension qualifier"),
      (403, yyparsing  403 "do expression qualifiers"),
      (404, yyparsing  404 "list of expressions separated by ';'"),
      (405, yyparsing  405 "a term"),
      (406, yyparsing  406 "a term"),
      (407, yyparsing  407 "list comprehension qualifiers"),
      (408, yyparsing  408 "a term"),
      (409, yyparsing  409 "a term"),
      (410, yyparsing  410 "field"),
      (411, yyparsing  411 "field list"),
      (412, yyparsing  412 "'.' or 'â¢'"),
      (413, yyparsing  413 "'.' or 'â¢'"),
      (414, yyparsing  414 "a qualified type"),
      (415, yyparsing  415 "type variables bound in a forall"),
      (416, yyparsing  416 "a type variable"),
      (417, yyparsing  417 "a type constructor"),
      (418, yyparsing  418 "a non function type"),
      (419, yyparsing  419 "a non function type"),
      (420, yyparsing  420 "a non function type"),
      (421, yyparsing  421 "a non function type"),
      (422, yyparsing  422 "a type constructor"),
      (423, yyparsing  423 "a non function type"),
      (424, yyparsing  424 "a type"),
      (425, yyparsing  425 "a type"),
      (426, yyparsing  426 "a constrained type"),
      (427, yyparsing  427 "a primary expression"),
      (428, yyexpect 428(yyfromCh '}')),
      (429, yyparsing  429 "a primary expression"),
      (430, yyparsing  430 "a primary expression"),
      (431, yyparsing  431 "a primary expression"),
      (432, yyparsing  432 "a primary expression"),
      (433, yyparsing  433 "field"),
      (434, yyparsing  434 "a primary expression"),
      (435, yyparsing  435 "a primary expression"),
      (436, yyparsing  436 "field"),
      (437, yyparsing  437 "field"),
      (438, yyparsing  438 "field list"),
      (439, yyparsing  439 "a module import"),
      (440, yyparsing  440 "a module import"),
      (441, yyparsing  441 "an import list"),
      (442, yyparsing  442 "an import item"),
      (443, yyparsing  443 "a qualified variable name"),
      (444, yyparsing  444 "an import specification"),
      (445, yyparsing  445 "an import list"),
      (446, yyexpect 446(yyfromCh ')')),
      (447, yyparsing  447 "a list of import items")];
    sub8 = [      (448, yyparsing  448 "an import specification"),
      (449, yyparsing  449 "an import item"),
      (450, yyparsing  450 "an import item"),
      (451, yyparsing  451 "an import item"),
      (452, yyparsing  452 "an import item"),
      (453, yyparsing  453 "an import list"),
      (454, yyparsing  454 "the type this module derives from"),
      (455, yyparsing  455 "the interfaces this module implements"),
      (456, yyexpect 456(yyfromId WHERE)),
      (457, yyparsing  457 "an annotated item"),
      (458, yyparsing  458 "an annotated item"),
      (459, yyparsing  459 "an annotated item"),
      (460, yybadstart 460 "a valid java identifier"),
      (461, yyparsing  461 "a valid java identifier"),
      (462, yybadstart 462 "a valid java identifier"),
      (463, yyparsing  463 "native generic type arguments"),
      (464, yyparsing  464 "a list of types"),
      (465, yyexpect 465(yyfromCh '}')),
      (466, yyparsing  466 "a specification of a native item"),
      (467, yyparsing  467 "a method type with optional throws clause"),
      (468, yyparsing  468 "method types with optional throws clauses"),
      (469, yyparsing  469 "a declaration of a native item"),
      (470, yyexpect 470(yyfromId DCOLON)),
      (471, yyparsing  471 "a variant of an algebraic datatype"),
      (472, yyparsing  472 "a variant of an algebraic datatype"),
      (473, yyparsing  473 "a variant of an algebraic datatype"),
      (474, yyparsing  474 "a variant of an algebraic datatype"),
      (475, yyparsing  475 "a variant of an algebraic datatype"),
      (476, yyexpect 476(yyfromId CONID)),
      (477, yyexpect 477(yyfromId CONID)),
      (478, yyparsing  478 "a data definition"),
      (479, yyparsing  479 "a variant of an algebraic datatype"),
      (480, yyparsing  480 "a variant of an algebraic datatype"),
      (481, yyparsing  481 "a variant of an algebraic datatype"),
      (482, yyparsing  482 "a sequence of type variables"),
      (483, yyparsing  483 "a data definition"),
      (484, yyparsing  484 "a native data type"),
      (485, yyexpect 485(yyfromId NATIVE)),
      (486, yyexpect 486(yyfromId NATIVE)),
      (487, yyparsing  487 "a data definition"),
      (488, yyparsing  488 "a data definition"),
      (489, yyparsing  489 "an algebraic datatype"),
      (490, yyparsing  490 "a data definition"),
      (491, yyparsing  491 "simple constraints"),
      (492, yyparsing  492 "type class context"),
      (493, yybadstart 493 "a type variable"),
      (494, yyparsing  494 "instance constraints"),
      (495, yyparsing  495 "instance context"),
      (496, yybadstart 496 "a sequence of one or more ','"),
      (497, yyexpect 497(yyfromCh ']')),
      (498, yyparsing  498 "instance head"),
      (499, yyparsing  499 "a type declaration"),
      (500, yyparsing  500 "a type declaration"),
      (501, yyparsing  501 "a where clause"),
      (502, yyexpect 502(yyfromCh '}')),
      (503, yyparsing  503 "a protected or private local declaration"),
      (504, yyparsing  504 "a protected or private local declaration"),
      (505, yyparsing  505 "a protected or private local declaration"),
      (506, yyparsing  506 "declarations local to a class, instance or type"),
      (507, yyparsing  507 "a commented local declaration"),
      (508, yyparsing  508 "a protected or private local declaration"),
      (509, yyexpect 509(yyfromCh '}')),
      (510, yybadstart 510 "the next definition"),
      (511, yyparsing  511 "a commented local declaration")];
    sub9 = [      (512, yyparsing  512 "guard qualifiers"),
      (513, yyparsing  513 "'='"),
      (514, yyparsing  514 "'='"),
      (515, yyparsing  515 "a guarded expression"),
      (516, yyparsing  516 "a qualified variable name"),
      (517, yyparsing  517 "a list of qualified variable names"),
      (518, yyparsing  518 "else branch"),
      (519, yyparsing  519 "a top level expression"),
      (520, yyparsing  520 "case alternative"),
      (521, yyparsing  521 "case alternative"),
      (522, yyparsing  522 "list of case alternatives"),
      (523, yyparsing  523 "case alternative"),
      (524, yyparsing  524 "a top level expression"),
      (525, yyparsing  525 "a top level expression"),
      (526, yyparsing  526 "a list comprehension qualifier"),
      (527, yyparsing  527 "list of expressions separated by ';'"),
      (528, yyparsing  528 "list comprehension qualifiers"),
      (529, yyparsing  529 "a qualified type"),
      (530, yyparsing  530 "a type kind"),
      (531, yyparsing  531 "a type kind"),
      (532, yyparsing  532 "a type kind"),
      (533, yyexpect 533(yyfromCh ')')),
      (534, yyparsing  534 "a type kind"),
      (535, yyexpect 535(yyfromCh ')')),
      (536, yyparsing  536 "a list of types separated by '|'"),
      (537, yyexpect 537(yyfromCh ')')),
      (538, yyparsing  538 "a non function type"),
      (539, yyparsing  539 "a primary expression"),
      (540, yyparsing  540 "a primary expression"),
      (541, yyparsing  541 "a primary expression"),
      (542, yyparsing  542 "field"),
      (543, yyparsing  543 "field"),
      (544, yyparsing  544 "a module import"),
      (545, yyparsing  545 "an import item"),
      (546, yyparsing  546 "a qualified variable name"),
      (547, yyparsing  547 "an import specification"),
      (548, yyparsing  548 "an import list"),
      (549, yyparsing  549 "a list of import items"),
      (550, yyparsing  550 "a simple name for a member or import item"),
      (551, yyparsing  551 "a simple name for a member or import item"),
      (552, yyparsing  552 "a simple name for a member or import item"),
      (553, yyparsing  553 "an import specification"),
      (554, yyexpect 554(yyfromCh ')')),
      (555, yyparsing  555 "the interfaces this module implements"),
      (556, yyexpect 556(yyfromCh '{')),
      (557, yyparsing  557 "specification for module class "),
      (558, yyparsing  558 "a valid java identifier"),
      (559, yyparsing  559 "a valid java identifier"),
      (560, yyparsing  560 "a list of types"),
      (561, yyparsing  561 "native generic type arguments"),
      (562, yyparsing  562 "a method type with optional throws clause"),
      (563, yyparsing  563 "method types with optional throws clauses"),
      (564, yyparsing  564 "a variant of an algebraic datatype"),
      (565, yyparsing  565 "constructor types"),
      (566, yyparsing  566 "a variant of an algebraic datatype"),
      (567, yyparsing  567 "a variant of an algebraic datatype"),
      (568, yyparsing  568 "a variant of an algebraic datatype"),
      (569, yyparsing  569 "a variant of an algebraic datatype"),
      (570, yyparsing  570 "a variant of an algebraic datatype"),
      (571, yyparsing  571 "a variant of an algebraic datatype"),
      (572, yyparsing  572 "a variant of an algebraic datatype"),
      (573, yyparsing  573 "a variant of an algebraic datatype"),
      (574, yyparsing  574 "a data definition"),
      (575, yyparsing  575 "a native data type")];
    sub10 = [      (576, yyparsing  576 "a native data type"),
      (577, yybadstart 577 "native generic type arguments"),
      (578, yyparsing  578 "a data definition"),
      (579, yyparsing  579 "an algebraic datatype"),
      (580, yyparsing  580 "a data definition"),
      (581, yyparsing  581 "a data definition"),
      (582, yyparsing  582 "simple constraints"),
      (583, yybadstart 583 "declarations local to a class, instance or type"),
      (584, yyparsing  584 "instance constraints"),
      (585, yyparsing  585 "instance head"),
      (586, yyparsing  586 "a type declaration"),
      (587, yyparsing  587 "a where clause"),
      (588, yyparsing  588 "a protected or private local declaration"),
      (589, yyparsing  589 "a protected or private local declaration"),
      (590, yyparsing  590 "a protected or private local declaration"),
      (591, yyparsing  591 "a commented local declaration"),
      (592, yyparsing  592 "declarations local to a class, instance or type"),
      (593, yyparsing  593 "local declarations"),
      (594, yyparsing  594 "guard qualifiers"),
      (595, yyparsing  595 "a guarded expression"),
      (596, yyparsing  596 "case alternative"),
      (597, yyparsing  597 "list of case alternatives"),
      (598, yyexpect 598(yyfromCh ')')),
      (599, yyparsing  599 "a type variable"),
      (600, yyparsing  600 "a type kind"),
      (601, yyparsing  601 "a non function type"),
      (602, yyparsing  602 "a list of types separated by '|'"),
      (603, yyparsing  603 "a non function type"),
      (604, yyparsing  604 "a member import specification"),
      (605, yyparsing  605 "an import item"),
      (606, yyexpect 606(yyfromCh ')')),
      (607, yyparsing  607 "a member import specification"),
      (608, yyparsing  608 "a list of member imports"),
      (609, yyparsing  609 "a list of import items"),
      (610, yyparsing  610 "an import list"),
      (611, yyparsing  611 "java code"),
      (612, yyparsing  612 "a list of types"),
      (613, yyparsing  613 "a method type with optional throws clause"),
      (614, yyparsing  614 "method types with optional throws clauses"),
      (615, yyparsing  615 "a field specification"),
      (616, yyparsing  616 "a field specification"),
      (617, yyexpect 617(yyfromId VARID)),
      (618, yyexpect 618(yyfromId VARID)),
      (619, yyparsing  619 "a constructor field"),
      (620, yyparsing  620 "a field specification"),
      (621, yyexpect 621(yyfromCh '}')),
      (622, yyparsing  622 "constructor fields"),
      (623, yyexpect 623(yyfromId DCOLON)),
      (624, yyparsing  624 "field specifications"),
      (625, yyparsing  625 "a field specification"),
      (626, yyparsing  626 "a field specification"),
      (627, yyparsing  627 "a native generic type"),
      (628, yyparsing  628 "an algebraic datatype"),
      (629, yyparsing  629 "a data definition"),
      (630, yyparsing  630 "a type class declaration"),
      (631, yyparsing  631 "local declarations"),
      (632, yyparsing  632 "a type kind"),
      (633, yyparsing  633 "a type kind"),
      (634, yyparsing  634 "a list of types separated by '|'"),
      (635, yyparsing  635 "a member import specification"),
      (636, yyparsing  636 "an import item"),
      (637, yyparsing  637 "a member import specification"),
      (638, yyparsing  638 "a list of member imports"),
      (639, yyparsing  639 "java token")];
    sub11 = [      (640, yyparsing  640 "java token"),
      (641, yyparsing  641 "java token"),
      (642, yyparsing  642 "java token"),
      (643, yyparsing  643 "java token"),
      (644, yyparsing  644 "java token"),
      (645, yyparsing  645 "java token"),
      (646, yyparsing  646 "java token"),
      (647, yyparsing  647 "java token"),
      (648, yyparsing  648 "java token"),
      (649, yyparsing  649 "java token"),
      (650, yyparsing  650 "java token"),
      (651, yyparsing  651 "java token"),
      (652, yyparsing  652 "java token"),
      (653, yyparsing  653 "java token"),
      (654, yyparsing  654 "java token"),
      (655, yyparsing  655 "java token"),
      (656, yyparsing  656 "java token"),
      (657, yyparsing  657 "java token"),
      (658, yyparsing  658 "java token"),
      (659, yyparsing  659 "java token"),
      (660, yyparsing  660 "java token"),
      (661, yyparsing  661 "java token"),
      (662, yyparsing  662 "java token"),
      (663, yyparsing  663 "java token"),
      (664, yyparsing  664 "java token"),
      (665, yyparsing  665 "java token"),
      (666, yyparsing  666 "java token"),
      (667, yyparsing  667 "java token"),
      (668, yyparsing  668 "java token"),
      (669, yyparsing  669 "java token"),
      (670, yyparsing  670 "java token"),
      (671, yyparsing  671 "java token"),
      (672, yyparsing  672 "java token"),
      (673, yyparsing  673 "java token"),
      (674, yyparsing  674 "java token"),
      (675, yyparsing  675 "java token"),
      (676, yyparsing  676 "java token"),
      (677, yyparsing  677 "java token"),
      (678, yyparsing  678 "java token"),
      (679, yyparsing  679 "java token"),
      (680, yyparsing  680 "java token"),
      (681, yyparsing  681 "java token"),
      (682, yyparsing  682 "java token"),
      (683, yyparsing  683 "java token"),
      (684, yyparsing  684 "java token"),
      (685, yyparsing  685 "java token"),
      (686, yyparsing  686 "java token"),
      (687, yyparsing  687 "java token"),
      (688, yyparsing  688 "java token"),
      (689, yyparsing  689 "java token"),
      (690, yyparsing  690 "java tokens"),
      (691, yyparsing  691 "java code"),
      (692, yyparsing  692 "java token"),
      (693, yyparsing  693 "java token"),
      (694, yyparsing  694 "java token"),
      (695, yyparsing  695 "java token"),
      (696, yyparsing  696 "java token"),
      (697, yyparsing  697 "java token"),
      (698, yyparsing  698 "java token"),
      (699, yyparsing  699 "java token"),
      (700, yyparsing  700 "java token"),
      (701, yyparsing  701 "java token"),
      (702, yyparsing  702 "java token"),
      (703, yyexpect 703(yyfromCh '}'))];
    sub12 = [      (704, yyparsing  704 "java tokens"),
      (705, yyparsing  705 "a field specification"),
      (706, yyparsing  706 "a field specification"),
      (707, yyparsing  707 "a field specification"),
      (708, yyparsing  708 "a field specification"),
      (709, yyexpect 709(yyfromId DCOLON)),
      (710, yyparsing  710 "a variant of an algebraic datatype"),
      (711, yyparsing  711 "constructor fields"),
      (712, yyparsing  712 "constructor fields"),
      (713, yyparsing  713 "a constructor field"),
      (714, yyparsing  714 "field specifications"),
      (715, yyparsing  715 "a list of member imports"),
      (716, yyparsing  716 "java tokens"),
      (717, yyexpect 717(yyfromCh '}')),
      (718, yyparsing  718 "java code"),
      (719, yyparsing  719 "java tokens"),
      (720, yyparsing  720 "a constructor field"),
      (721, yyparsing  721 "constructor fields"),
      (722, yyparsing  722 "constructor fields"),
      (723, yyparsing  723 "a constructor field"),
      (724, yyparsing  724 "field specifications"),
      (725, yyparsing  725 "java tokens"),
      (726, yyparsing  726 "java tokens"),
      (727, yyparsing  727 "a constructor field"),
      (728, yyparsing  728 "java tokens")];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyeacts = let 
    sub1 = [      (5, yyAccept),
      (8, (-28)),
      (9, (-18)),
      (11, (-175)),
      (12, (-13)),
      (14, (-180)),
      (15, (-181)),
      (16, (-178)),
      (17, (-176)),
      (18, (-177)),
      (19, (-179)),
      (20, (-16)),
      (22, (-21)),
      (24, (-186)),
      (25, (-189)),
      (27, (-350)),
      (28, (-351)),
      (33, (-354)),
      (34, (-353)),
      (35, (-356)),
      (36, (-357)),
      (37, (-358)),
      (38, (-352)),
      (39, (-359)),
      (40, (-355)),
      (44, (-198)),
      (45, (-197)),
      (47, (-428)),
      (48, (-3)),
      (49, (-4)),
      (50, (-426)),
      (51, (-429)),
      (53, (-390)),
      (54, (-427)),
      (55, (-402)),
      (56, (-398)),
      (57, (-403)),
      (58, (-404)),
      (59, (-406)),
      (61, (-412)),
      (62, (-25)),
      (69, (-29)),
      (70, (-19)),
      (71, (-15)),
      (73, (-23)),
      (74, (-190)),
      (75, (-188)),
      (77, (-191)),
      (78, (-185)),
      (83, (-397)),
      (84, (-196)),
      (86, (-432)),
      (93, (-443)),
      (99, (-407)),
      (103, (-405)),
      (108, (-120)),
      (126, (-1)),
      (127, (-30)),
      (128, (-33)),
      (129, (-35)),
      (130, (-36)),
      (131, (-44)),
      (132, (-122)),
      (133, (-41))];
    sub2 = [      (134, (-42)),
      (135, (-43)),
      (136, (-121)),
      (137, (-123)),
      (138, (-124)),
      (139, (-125)),
      (140, (-126)),
      (141, (-130)),
      (142, (-131)),
      (143, (-132)),
      (144, (-209)),
      (148, (-216)),
      (149, (-341)),
      (153, (-27)),
      (154, (-20)),
      (156, (-14)),
      (157, (-187)),
      (158, (-184)),
      (159, (-392)),
      (163, (-140)),
      (170, (-363)),
      (172, (-436)),
      (173, (-449)),
      (175, (-442)),
      (177, (-435)),
      (179, (-434)),
      (180, (-433)),
      (187, (-444)),
      (189, (-387)),
      (190, (-386)),
      (191, (-409)),
      (192, (-174)),
      (193, (-430)),
      (197, (-259)),
      (202, (-261)),
      (203, (-389)),
      (204, (-236)),
      (205, (-237)),
      (206, (-243)),
      (207, (-242)),
      (208, (-252)),
      (209, (-321)),
      (210, (-253)),
      (211, (-254)),
      (212, (-395)),
      (213, (-396)),
      (214, (-414)),
      (217, (-415)),
      (218, (-416)),
      (223, (-148)),
      (224, (-199)),
      (225, (-201)),
      (226, (-200)),
      (228, (-219)),
      (230, (-220)),
      (231, (-218)),
      (232, (-217)),
      (239, (-275)),
      (240, (-341)),
      (243, (-283)),
      (244, (-286)),
      (245, (-341)),
      (246, (-40)),
      (248, (-288))];
    sub3 = [      (250, (-37)),
      (251, (-38)),
      (252, (-39)),
      (253, (-215)),
      (257, (-31)),
      (258, (-34)),
      (260, (-348)),
      (261, (-203)),
      (262, (-204)),
      (263, (-202)),
      (264, (-205)),
      (265, (-207)),
      (269, (-289)),
      (272, (-347)),
      (273, (-378)),
      (276, (-195)),
      (278, (-194)),
      (279, (-22)),
      (280, (-391)),
      (289, (-413)),
      (294, (-437)),
      (295, (-439)),
      (296, (-438)),
      (297, (-462)),
      (300, (-445)),
      (302, (-388)),
      (304, (-431)),
      (307, (-235)),
      (312, (-263)),
      (314, (-246)),
      (315, (-245)),
      (317, (-262)),
      (321, (-322)),
      (328, (-420)),
      (330, (-2)),
      (332, (-148)),
      (333, (-148)),
      (335, (-145)),
      (342, (-6)),
      (343, (-7)),
      (345, (-8)),
      (346, (-12)),
      (348, (-221)),
      (349, (-5)),
      (350, (-222)),
      (351, (-223)),
      (353, (-226)),
      (363, (-271)),
      (365, (-278)),
      (368, (-279)),
      (370, (-287)),
      (376, (-32)),
      (378, (-206)),
      (379, (-208)),
      (380, (-214)),
      (385, (-346)),
      (386, (-379)),
      (388, (-193)),
      (389, (-24)),
      (391, (-394)),
      (394, (-360)),
      (398, (-144)),
      (401, (-373)),
      (402, (-364))];
    sub4 = [      (403, (-371)),
      (405, (-441)),
      (406, (-440)),
      (408, (-447)),
      (409, (-446)),
      (410, (-459)),
      (411, (-451)),
      (412, (-240)),
      (413, (-239)),
      (415, (-234)),
      (417, (-265)),
      (418, (-255)),
      (422, (-264)),
      (423, (-258)),
      (424, (-243)),
      (425, (-244)),
      (426, (-241)),
      (430, (-424)),
      (431, (-425)),
      (432, (-419)),
      (433, (-456)),
      (434, (-417)),
      (435, (-418)),
      (436, (-457)),
      (438, (-454)),
      (439, (-148)),
      (440, (-147)),
      (441, (-152)),
      (445, (-150)),
      (449, (-156)),
      (450, (-159)),
      (451, (-160)),
      (452, (-161)),
      (454, (-47)),
      (457, (-212)),
      (458, (-210)),
      (459, (-211)),
      (461, (-11)),
      (463, (-296)),
      (464, (-248)),
      (466, (-224)),
      (467, (-229)),
      (468, (-230)),
      (469, (-232)),
      (471, (-317)),
      (478, (-302)),
      (479, (-307)),
      (480, (-310)),
      (481, (-316)),
      (482, (-304)),
      (484, (-292)),
      (488, (-300)),
      (489, (-305)),
      (492, (-276)),
      (495, (-284)),
      (499, (-339)),
      (501, (-344)),
      (506, (-342)),
      (508, (-133)),
      (511, (-139)),
      (513, (-361)),
      (514, (-362)),
      (516, (-192)),
      (517, (-183))];
    sub5 = [      (518, (-393)),
      (519, (-399)),
      (520, (-381)),
      (523, (-382)),
      (524, (-400)),
      (525, (-401)),
      (527, (-465)),
      (528, (-367)),
      (529, (-238)),
      (530, (-269)),
      (531, (-268)),
      (538, (-247)),
      (539, (-423)),
      (540, (-421)),
      (541, (-422)),
      (544, (-146)),
      (547, (-164)),
      (548, (-151)),
      (550, (-171)),
      (551, (-172)),
      (552, (-173)),
      (553, (-163)),
      (555, (-49)),
      (557, (-45)),
      (558, (-9)),
      (559, (-10)),
      (561, (-295)),
      (565, (-320)),
      (566, (-319)),
      (567, (-309)),
      (568, (-312)),
      (569, (-313)),
      (570, (-311)),
      (571, (-315)),
      (572, (-314)),
      (573, (-308)),
      (574, (-301)),
      (575, (-290)),
      (576, (-291)),
      (577, (-293)),
      (578, (-297)),
      (581, (-299)),
      (582, (-274)),
      (583, (-341)),
      (584, (-282)),
      (585, (-285)),
      (586, (-340)),
      (587, (-345)),
      (588, (-134)),
      (589, (-135)),
      (590, (-136)),
      (591, (-138)),
      (592, (-343)),
      (594, (-375)),
      (595, (-377)),
      (596, (-380)),
      (597, (-384)),
      (599, (-260)),
      (601, (-256)),
      (603, (-257)),
      (605, (-158)),
      (609, (-155)),
      (610, (-149)),
      (612, (-249))];
    sub6 = [      (613, (-228)),
      (614, (-231)),
      (620, (-338)),
      (625, (-332)),
      (626, (-335)),
      (627, (-294)),
      (628, (-306)),
      (629, (-298)),
      (630, (-277)),
      (631, (-129)),
      (632, (-270)),
      (633, (-266)),
      (634, (-251)),
      (635, (-167)),
      (636, (-157)),
      (637, (-166)),
      (639, (-52)),
      (640, (-53)),
      (641, (-54)),
      (642, (-55)),
      (643, (-56)),
      (644, (-57)),
      (645, (-58)),
      (646, (-59)),
      (647, (-60)),
      (648, (-61)),
      (649, (-62)),
      (650, (-63)),
      (651, (-64)),
      (652, (-65)),
      (653, (-66)),
      (654, (-67)),
      (655, (-68)),
      (656, (-69)),
      (657, (-70)),
      (658, (-71)),
      (659, (-72)),
      (660, (-73)),
      (661, (-74)),
      (662, (-75)),
      (663, (-76)),
      (664, (-77)),
      (665, (-78)),
      (666, (-79)),
      (667, (-80)),
      (668, (-81)),
      (669, (-82)),
      (670, (-83)),
      (671, (-84)),
      (672, (-85)),
      (673, (-86)),
      (674, (-87)),
      (675, (-88)),
      (676, (-89)),
      (677, (-90)),
      (678, (-91)),
      (679, (-92)),
      (680, (-93)),
      (681, (-94)),
      (682, (-95)),
      (683, (-96)),
      (684, (-97)),
      (685, (-98)),
      (686, (-99))];
    sub7 = [      (687, (-100)),
      (688, (-109)),
      (689, (-110)),
      (691, (-51)),
      (692, (-107)),
      (693, (-105)),
      (694, (-106)),
      (695, (-101)),
      (696, (-102)),
      (697, (-103)),
      (698, (-104)),
      (699, (-108)),
      (700, (-111)),
      (701, (-112)),
      (702, (-113)),
      (705, (-334)),
      (706, (-333)),
      (707, (-337)),
      (708, (-336)),
      (710, (-318)),
      (715, (-170)),
      (718, (-50)),
      (719, (-115)),
      (721, (-327)),
      (722, (-326)),
      (723, (-328)),
      (724, (-331)),
      (725, (-119)),
      (727, (-329)),
      (728, (-117))];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);


decodeArr s1 s2 = arrayFromIndexList (zip (un s1) (un s2))
    where
        un :: String -> [Int]
        un s = (map ord . unpacked) s

private yygo0 = decodeArr "\u0001\u0002\u0003\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018" "\u0005\u0005\u0005\u0007\u0007\u0007\u0006\u0006\u0006\u0006\u0006"
private yygo1 = decodeArr "\u0011\u0012\u0013\u001c\u001d" "\t\t\t\n\n"
private yygo2 = decodeArr "\r\u000e\u000f\u0010Â¯Â°Â±Â²Â³Â´Âµ" "\u0014\u0014\u0014\u0016\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo4 = decodeArr "\u0004Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "022233344666666666671155558888899::<<;;;;;;;;;;;;;;======================"
private yygo6 = decodeArr "\u0019\u001a\u001b" "BAA"
private yygo8 = decodeArr "\u001c\u001d" "EE"
private yygo10 = decodeArr "\u0011\u0012\u0013" "FFF"
private yygo13 = decodeArr "\r\u000e\u000fÂ¯Â°Â±Â²Â³Â´Âµ" "GGG\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo23 = decodeArr "\r\u000e\u000f\u0010Â¯Â°Â±Â²Â³Â´Âµ" "\u0014\u0014\u0014I\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo26 = decodeArr "Â¾Â¿ÃÃ" "NNMM"
private yygo29 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667OO55558888899::<<;;;;;;;;;;;;;;======================"
private yygo30 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667PP55558888899::<<;;;;;;;;;;;;;;======================"
private yygo41 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo42 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇ" "222333YZZ66666666667XX\\\\\\\\8888899::<<;;;;;;;;;;;;;;======================[["
private yygo43 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "2223334466666666667^^55558888899::<<;;;;;;;;;;;;;;======================___"
private yygo46 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666aa``<<;;;;;;;;;;;;;;======================"
private yygo52 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo57 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666gg<<;;;;;;;;;;;;;;======================"
private yygo64 = decodeArr "\u001e\u001f !\"#$%&'()*+,-xyz{|}~\u0082\u0083\u0084\u0091\u0092\u0093Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "~~~\u007f\u007f\u007f\u007f\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0087\u0080\u0083\u0083\u0083\u0083\u0083\u0083\u008c\u008c\u008c\u0085\u0085\u0085\u009022233344\u0091\u0091\u0091\u0086\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo66 = decodeArr "\u0019\u001a\u001b" "B\u0099\u0099"
private yygo67 = decodeArr "\r\u000e\u000f\u0010Â¯Â°Â±Â²Â³Â´Âµ" "\u0014\u0014\u0014\u009a\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo72 = decodeArr "\r\u000e\u000fÂ¯Â°Â±Â²Â³Â´Âµ" "\u009c\u009c\u009c\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo76 = decodeArr "Â¾Â¿ÃÃ" "\u009e\u009eMM"
private yygo79 = decodeArr "ÆÆ" "Â¡Â¡"
private yygo81 = decodeArr "\u008c\u008d\u008e\u008f\u0090Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Â¥Â¥Â¦Â¦Â¦\u009022233344Â£\u0093\u0093\u0093\u0093\u0092\u0092Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo82 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å±Å²Å³Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666Â©Â©Â©Â«Â«Â«ÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo85 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo87 = decodeArr "ÇÇ" "Â­Â­"
private yygo89 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Â²Â²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo90 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo92 = decodeArr "Ã" "Â·"
private yygo96 = decodeArr "ÆÆÆ" "Â½Â¾Â¾"
private yygo97 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666aaÂ¿Â¿<<;;;;;;;;;;;;;;======================"
private yygo98 = decodeArr "Â®ÇÇÇÇÇ" "ÃÃÃÃÃÃ"
private yygo100 = decodeArr "Â»Â¼Â½Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo101 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo102 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo104 = decodeArr "ÃÃÃ" "ÃÃÃ"
private yygo105 = decodeArr "ÇÇÇÇÇÇ" "ÃÃÃÃÃÃ"
private yygo106 = decodeArr "\u001e\u001f !\"#$%&'()*+,-xyz{|}~\u0082\u0083\u0084\u0091\u0092\u0093Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÃÃÃ\u007f\u007f\u007f\u007f\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0087\u0080\u0083\u0083\u0083\u0083\u0083\u0083\u008c\u008c\u008c\u0085\u0085\u0085\u009022233344\u0091\u0091\u0091\u0086\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo109 = decodeArr "\r\u000e\u000f\u0010Â¯Â°Â±Â²Â³Â´Âµ" "\u0014\u0014\u0014Ã\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo113 = decodeArr "Â®ÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£" "\u0090Ã¦Ã§Ã§Ã¨Ã¨Ã¨Ã¨Ã©Ã©Ã©Ã©ÃªÃªÃªÃª"
private yygo116 = decodeArr "Â»Â¼Â½ÄÄÄ" "Ã®Ã®Ã®Ã¯Ã°Ã°"
private yygo117 = decodeArr "Â»Â¼Â½ÄÄÄÄÄ" "Ã²Ã²Ã²Ã³Ã´Ã´ÃµÃµ"
private yygo118 = decodeArr "Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®" "Ã¶\u0095\u0095\u0095\u0095\u0095\u0095"
private yygo120 = decodeArr "Â»Â¼Â½ÄÄÄÄÄ" "Ã²Ã²Ã²Ã³Ã´Ã´Ã¸Ã¸"
private yygo121 = decodeArr "yz{|}~\u0082\u0083\u0084Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÃºÃºÃºÃºÃºÃº\u008c\u008c\u008c\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo122 = decodeArr "yz{|}~\u0082\u0083\u0084Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Ã»Ã»Ã»Ã»Ã»Ã»\u008c\u008c\u008c\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo123 = decodeArr "yz{|}~\u0082\u0083\u0084Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Ã¼Ã¼Ã¼Ã¼Ã¼Ã¼\u008c\u008c\u008c\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo124 = decodeArr "Ã¨" "Ã½"
private yygo125 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇ" "222333Ã¿ÄÄ66666666667XX\\\\\\\\8888899::<<;;;;;;;;;;;;;;======================[["
private yygo127 = decodeArr "\u001c\u001d" "ÄÄ"
private yygo128 = decodeArr "!\"#$%&'()*+,-xyz{|}~\u0082\u0083\u0084\u0091\u0092\u0093Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÄÄÄÄ\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0087\u0080\u0083\u0083\u0083\u0083\u0083\u0083\u008c\u008c\u008c\u0085\u0085\u0085\u009022233344\u0091\u0091\u0091\u0086\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo143 = decodeArr "ÅÅ" "ÄÄ"
private yygo145 = decodeArr "ÃÃÃÃÃÃ" "ÄÄÄÄÄÄ"
private yygo149 = decodeArr "ÅÅÅ" "ÄÄÄ"
private yygo150 = decodeArr "Å¹ÅºÅ»" "ÄÄÄ"
private yygo152 = decodeArr "Â¶Â·Â¾Â¿ÃÃÃÃÃÃÃ" "ÄÄÄÄÄÄÄÄÄMM"
private yygo155 = decodeArr "\r\u000e\u000f\u0010Â¯Â°Â±Â²Â³Â´Âµ" "\u0014\u0014\u0014Ä\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo161 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÄÄ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo164 = decodeArr "ÅÅ" "ÄÄ"
private yygo165 = decodeArr "\u001c\u001d" "ÄÄ"
private yygo169 = decodeArr "\u001c\u001d" "Ä Ä "
private yygo174 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "2223334466666666667Ä¢Ä¢55558888899::<<;;;;;;;;;;;;;;======================Ä£Ä£Ä£"
private yygo176 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "2223334466666666667Ä¤Ä¤55558888899::<<;;;;;;;;;;;;;;======================Ä¥Ä¥Ä¥"
private yygo181 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo182 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo184 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "2223334466666666667Ä¤Ä¤55558888899::<<;;;;;;;;;;;;;;======================Ä©Ä©Ä©"
private yygo185 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å®Å¯Å°Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666ÄªÄªÄªÄ«Ä«Ä«ÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo186 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Ä­Ä­55558888899::<<;;;;;;;;;;;;;;======================"
private yygo188 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Ä®Ä®55558888899::<<;;;;;;;;;;;;;;======================"
private yygo199 = decodeArr "Ã©ÃªÃ«" "Ä´Ä´Äµ"
private yygo200 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅÇÇ" "ÃÃÃÄºÄ¹Ä¹Ä¹Ä»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄ¼Ä¼"
private yygo201 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÄ¾Ä¾Ä¾Ä»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo209 = decodeArr "Â»Â¼Â½Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅÅ"
private yygo215 = decodeArr "ÇÇÇÇÇÇ" "ÅÅÅÃÃÃ"
private yygo216 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÅÅ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo223 = decodeArr "\u0094\u0095\u0096\u0097\u0098Â®" "ÅÅÅÅÅÅ"
private yygo227 = decodeArr "./" "ÅÅ"
private yygo229 = decodeArr "ÃÃÃ" "ÅÅÅ"
private yygo233 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b\fÃÃÃÃÃÃÄ§Ä¨" "ÅÅÅÅÅÅÅÅÅÅÅÅ Å Å Å¡Å¡"
private yygo235 = decodeArr "ÄÄÄ¯Ä°" "Å¥Å¥Å¦Å¦"
private yygo236 = decodeArr "ÄÄÄ¯Ä°" "Å¥Å¥Å¨Å¨"
private yygo237 = decodeArr "Â»Â¼Â½ÄÄÄÄ" "Ã®Ã®Ã®Å©ÅªÅªÅª"
private yygo238 = decodeArr "ÄÄ" "Å«Å«"
private yygo240 = decodeArr "ÅÅÅ" "Å­Å­Å­"
private yygo241 = decodeArr "Â»Â¼Â½ÄÄÄÄ" "Ã²Ã²Ã²Å®Å¯Å¯Å¯"
private yygo242 = decodeArr "Â»Â¼Â½Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄ" "ÃÃÃÅ°Å°Å°Å°Å°Å°ÃÃÃÃÃÃÃ"
private yygo245 = decodeArr "ÅÅÅ" "Å²Å²Å²"
private yygo247 = decodeArr "ÄÄÄ¯Ä°" "Å¥Å¥Å´Å´"
private yygo249 = decodeArr "Â®ÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£" "\u0090Ã¦Ã§Ã§Ã¨Ã¨Ã¨Ã¨Ã©Ã©Ã©Ã©ÃªÃªÃªÃª"
private yygo254 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo255 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Â²Â²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo256 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo257 = decodeArr "\u001e\u001f !\"#$%&'()*+,-xyz{|}~\u0082\u0083\u0084\u0091\u0092\u0093Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¨ÄÄÄÄ Ä¡Ä©ÄªÄ«Ä¬Ä­Ä®ÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Å¸Å¸Å¸\u007f\u007f\u007f\u007f\u0082\u0082\u0082\u0082\u0081\u0081\u0081\u0081\u0087\u0080\u0083\u0083\u0083\u0083\u0083\u0083\u008c\u008c\u008c\u0085\u0085\u0085\u009022233344\u0091\u0091\u0091\u0086\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u0089\u0089\u008a\u008b\u0084\u0095\u0095\u0095\u0095\u0095\u0095\u0088\u0088\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo264 = decodeArr "ÃÃÃÃÃÃ" "ÄÄÄÄÅºÅº"
private yygo266 = decodeArr "Â»Â¼Â½Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÅ»Å»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo267 = decodeArr "Â®ÃÃÃÃÃÃ" "\u0090\u0093\u0093\u0093\u0093Å¼Å¼"
private yygo270 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å´ÅµÅ¶Å·Å¸ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666Å¿Å¿ÆÆÆ7Å¾Å¾55558888899::<<;;;;;;;;;;;;;;======================"
private yygo271 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo273 = decodeArr "Å¹ÅºÅ»" "ÄÆÆ"
private yygo274 = decodeArr "Â¾Â¿ÃÃ" "ÆÆMM"
private yygo281 = decodeArr "ÆÆ" "ÆÆ"
private yygo282 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å¨Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666ÆÆÆÆÆÆÆ7ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo283 = decodeArr "\u008c\u008d\u008e\u008f\u0090Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Â¥Â¥ÆÆÆ\u009022233344Â£\u0093\u0093\u0093\u0093\u0092\u0092Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo285 = decodeArr "\u008c\u008d\u008e\u008f\u0090Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Â¥Â¥ÆÆÆ\u009022233344Â£\u0093\u0093\u0093\u0093\u0092\u0092Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo286 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo287 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo288 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å±Å²Å³Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666Â©Â©Â©ÆÆÆÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo303 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo305 = decodeArr "Â®ÇÇÇÇÇ" "ÃÆÆÆÃÃ"
private yygo308 = decodeArr "Ã¯Ã°" "ÆÆ"
private yygo309 = decodeArr "Ã©ÃªÃ«" "ÆÆÄµ"
private yygo319 = decodeArr "Â»Â¼Â½Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÆ©Æ©Æ¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo320 = decodeArr "Â»Â¼Â½Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÆªÆªÆ¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo325 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Æ±Æ±55558888899::<<;;;;;;;;;;;;;;======================"
private yygo327 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Æ´Æ´55558888899::<<;;;;;;;;;;;;;;======================"
private yygo329 = decodeArr "ÇÇÇÇÇÇ" "Æ¶Æ¶Æ¶ÃÃÃ"
private yygo332 = decodeArr "\u0094\u0095\u0096\u0097\u0098Â®" "Æ¸Æ¸Æ¸Æ¸Æ¸Å"
private yygo333 = decodeArr "\u0094\u0095\u0096\u0097\u0098Â®" "Æ¹Æ¹Æ¹Æ¹Æ¹Å"
private yygo334 = decodeArr "\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â¤Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃ" "Æ¾Æ¾Æ¾ÇÇÇÇÇÇÆ¿Æ¿Æ¿ÇÇÇÇÇÇÇÇÇ"
private yygo337 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÇÇÇÄ»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo338 = decodeArr "01" "ÇÇ"
private yygo344 = decodeArr "\u0006\u0007\b\t\n\u000b\f" "ÇÇÇÇÇÇÇ"
private yygo347 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¸Ã¹Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÇÇÇÇÇÄ»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo352 = decodeArr "Ä§Ä¨" "ÇÇ"
private yygo354 = decodeArr "Â»Â¼Â½Ã¤Ã¥Ã¦Ã§Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÇÇÇÇÇÇÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo356 = decodeArr "Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿" "ÇÇÇÇÇÇÇÇ Ç Ç Ç¡Ç¡Ç¡"
private yygo357 = decodeArr "ÄÄÄ¯Ä°" "Å¥Å¥Ç¢Ç¢"
private yygo359 = decodeArr "Ä¢Ä£Ä¤Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿" "Ç§Ç§Ç§Ç¨Ç¨Ç©Ç©Ç©ÇÇÇÇÇ Ç Ç Ç¡Ç¡Ç¡"
private yygo369 = decodeArr "Â»Â¼Â½ÄÄÄÄÄ" "ÃÃÃÇ²Ç²Ç²Ç²Ç²"
private yygo371 = decodeArr "Â»Â¼Â½Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÇ³Ç³ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo377 = decodeArr "\u008c\u008d\u008e\u008f\u0090Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Â¥Â¥Ç¶Ç¶Ç¶\u009022233344Â£\u0093\u0093\u0093\u0093\u0092\u0092Â¤Â¤Â¤\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo381 = decodeArr "x\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008a\u008bÂ®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Ç»Ç½Ç½Ç½Ç¼Ç¼Ç¼Ç¿Ç¿Ç¿Ç¿Ç¾Ç¾Ç¾\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo384 = decodeArr "Å©Åª" "ÈÈ"
private yygo387 = decodeArr "Â¾Â¿ÃÃ" "ÈÈMM"
private yygo390 = decodeArr "Â¶Â·Â¾Â¿ÃÃÃÃÃÃÃ" "ÈÈÄÄÄÄÄÄÄMM"
private yygo393 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÈÈ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo395 = decodeArr "Å©ÅªÅ¹ÅºÅ»" "ÈÈÄÈÈ"
private yygo396 = decodeArr "ÅÅ" "ÈÈ"
private yygo399 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÈÈ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo404 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿ÇÇÇ" "2223334466666666667Ä¢Ä¢55558888899::<<;;;;;;;;;;;;;;======================ÈÈÈ"
private yygo407 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å«Å¬Å­Å®Å¯Å°Å´ÅµÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666ÄªÄªÄªÈÈÈÂªÂª7Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo414 = decodeArr "Â»Â¼Â½Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÈÈÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo416 = decodeArr "ÄÄÄÄÄ" "ÈÈÈÈÈ"
private yygo419 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¸Ã¹Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÇÇÇÈÈÄ»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo420 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÈÈÈÈÈÄ»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo421 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÈÈÈÄ»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo427 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Æ±Æ±55558888899::<<;;;;;;;;;;;;;;======================"
private yygo429 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Æ´Æ´55558888899::<<;;;;;;;;;;;;;;======================"
private yygo439 = decodeArr "\u0094\u0095\u0096\u0097\u0098Â®" "È È È È È Å"
private yygo443 = decodeArr "Â¾Â¿ÃÃ" "NNMM"
private yygo444 = decodeArr "\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â¤Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃ" "ÇÇÇÇÇÇÈ£È£È£ÇÇÇÇÇÇÇÇÇ"
private yygo448 = decodeArr "Â«Â¬Â­Ã" "È©È©È©È¨"
private yygo453 = decodeArr "\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â¤Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃ" "ÈªÈªÈªÇÇÇÇÇÇÆ¿Æ¿Æ¿ÇÇÇÇÇÇÇÇÇ"
private yygo455 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¸Ã¹Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÇÇÇÈ«È«Ä»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo456 = decodeArr "23" "È­È­"
private yygo460 = decodeArr "\u0006\u0007\b\t\n\u000b\f" "È®È®È®È®È®È®È®"
private yygo462 = decodeArr "\u0006\u0007\b\t\n\u000b\f" "È¯È¯È¯È¯È¯È¯È¯"
private yygo471 = decodeArr "Â»Â¼Â½Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅÅ" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÈ¶ÈµÈµ"
private yygo472 = decodeArr "Ä¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿" "È·È·È·È·Ç Ç Ç Ç¡Ç¡Ç¡"
private yygo473 = decodeArr "ÄºÄ»Ä¼Ä½Ä¾Ä¿" "È¸È¸È¸Ç¡Ç¡Ç¡"
private yygo474 = decodeArr "ÄºÄ»Ä¼Ä½Ä¾Ä¿" "È¹È¹È¹Ç¡Ç¡Ç¡"
private yygo475 = decodeArr "ÄºÄ»Ä¼Ä½Ä¾Ä¿" "ÈºÈºÈºÇ¡Ç¡Ç¡"
private yygo476 = decodeArr "Ä½Ä¾Ä¿" "È»È»È»"
private yygo477 = decodeArr "Ä½Ä¾Ä¿" "È¼È¼È¼"
private yygo483 = decodeArr "Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿" "È¾È¾È¾ÇÇÇÇÇ Ç Ç Ç¡Ç¡Ç¡"
private yygo487 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b\fÄ¥Ä¦" "ÉÅÅÅÅÅÅÅÉÉ"
private yygo490 = decodeArr "Ä¢Ä£Ä¤Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿" "ÉÉÉÉÉÇ©Ç©Ç©ÇÇÇÇÇ Ç Ç Ç¡Ç¡Ç¡"
private yygo491 = decodeArr "Â»Â¼Â½ÄÄÄÄ" "Ã®Ã®Ã®Å©ÉÉÉ"
private yygo493 = decodeArr "ÄÄ" "ÉÉ"
private yygo494 = decodeArr "Â»Â¼Â½ÄÄÄÄ" "Ã²Ã²Ã²Å®ÉÉÉ"
private yygo496 = decodeArr "ÇÇ" "Ä¼Ä¼"
private yygo498 = decodeArr "Â»Â¼Â½Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄ" "ÃÃÃÉÉÉÉÉÉÃÃÃÃÃÃÃ"
private yygo500 = decodeArr "Â»Â¼Â½Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÉÉÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo503 = decodeArr "\u0082\u0083\u0084Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÉÉÉ\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo504 = decodeArr "\u0082\u0083\u0084Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÉÉÉ\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo505 = decodeArr "\u0082\u0083\u0084Â®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "ÉÉÉ\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo507 = decodeArr "x\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008a\u008bÂ®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Ç»Ç¼Ç¼Ç¼Ç¿Ç¿Ç¿Ç¿ÉÉÉ\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo510 = decodeArr "\u001c\u001d" "ÉÉ"
private yygo512 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å´ÅµÅ¶Å·Å¸ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666Å¿Å¿ÉÉÉ7Å¾Å¾55558888899::<<;;;;;;;;;;;;;;======================"
private yygo515 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÉÉ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo521 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667ÉÉ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo522 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å¨Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "222333446666666666ÆÆÆÆÉÉÉ7ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo532 = decodeArr "ÄÄÄÄÄ" "ÉÉÈÈÈ"
private yygo542 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Æ±Æ±55558888899::<<;;;;;;;;;;;;;;======================"
private yygo543 = decodeArr "Â¸Â¹ÂºÂ»Â¼Â½ÃÃÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "2223334466666666667Æ´Æ´55558888899::<<;;;;;;;;;;;;;;======================"
private yygo545 = decodeArr "Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Ã" "É É É ÉÉÉÉÉÉÈ¨"
private yygo546 = decodeArr "Â¾Â¿ÃÃ" "\u009e\u009eMM"
private yygo549 = decodeArr "\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â¤Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃ" "É¡É¡É¡ÇÇÇÇÇÇÆ¿Æ¿Æ¿ÇÇÇÇÇÇÇÇÇ"
private yygo560 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¸Ã¹Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÇÇÇÉ¤É¤Ä»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo562 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·Ã¸Ã¹Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÇÇÇÉ¥É¥Ä»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo563 = decodeArr "Â»Â¼Â½Ã¤Ã¥Ã¦Ã§Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÇÇÉ¦É¦ÇÇÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo564 = decodeArr "\u0011\u0012\u0013Â®ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "É«É«É«É¬É­É­É­É­É­É®É®É¯É¯É°É°É°É±É±É±É²"
private yygo577 = decodeArr "Ä§Ä¨" "É³É³"
private yygo579 = decodeArr "Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾Ä¿" "É´É´Ç©Ç©Ç©ÇÇÇÇÇ Ç Ç Ç¡Ç¡Ç¡"
private yygo580 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b\fÄ¥Ä¦" "ÉÅÅÅÅÅÅÅÉµÉµ"
private yygo583 = decodeArr "ÅÅÅ" "É¶É¶É¶"
private yygo593 = decodeArr "x\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008a\u008bÂ®Â¸Â¹ÂºÂ»Â¼Â½ÃÃÃÃÃÃÃÃÃÃÃÃ¨ÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿" "Ç»É·É·É·Ç¼Ç¼Ç¼Ç¿Ç¿Ç¿Ç¿Ç¾Ç¾Ç¾\u009022233344\u008d\u0093\u0093\u0093\u0093\u0092\u0092\u008e\u008e\u0094\u008f\u008f\u008f\u009666666666667\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo600 = decodeArr "ÄÄÄÄÄ" "É¹É¹ÈÈÈ"
private yygo602 = decodeArr "Â»Â¼Â½Ã®ÃµÃ¶Ã·ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃÄºÈÈÈÉºÉºÄ»ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo604 = decodeArr "Â¥Â¦Â§Â«Â¬Â­Ã" "É»É»É»ÉÉÉÈ¨"
private yygo607 = decodeArr "Â«Â¬Â­Ã" "É½É½É½È¨"
private yygo611 = decodeArr "456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvw" "ËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËÊ¿Ê¿Ê¿Ê¿Ê¿Ê¿"
private yygo615 = decodeArr "Â®ÅÅÅÅ" "É¬ËËËÉ²"
private yygo616 = decodeArr "Â®ÅÅÅÅ" "É¬ËËËÉ²"
private yygo617 = decodeArr "Â®Å" "É¬Ë"
private yygo618 = decodeArr "Â®Å" "É¬Ë"
private yygo619 = decodeArr "Â®ÅÅÅÅÅÅÅÅÅ" "É¬ËËÉ°É°É°É±É±É±É²"
private yygo638 = decodeArr "Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Ã" "É É É ËËËÉÉÉÈ¨"
private yygo690 = decodeArr "456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvw" "ËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËË"
private yygo704 = decodeArr "456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvw" "ËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËË"
private yygo711 = decodeArr "\u0011\u0012\u0013Â®ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "É«É«É«É¬ËËËËËÉ®É®É¯É¯É°É°É°É±É±É±É²"
private yygo712 = decodeArr "\u0011\u0012\u0013Â®ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "É«É«É«É¬ËËËËËÉ®É®É¯É¯É°É°É°É±É±É±É²"
private yygo713 = decodeArr "Â»Â¼Â½Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃËËÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo714 = decodeArr "Â®ÅÅÅÅÅÅÅÅÅ" "É¬ËËÉ°É°É°É±É±É±É²"
private yygo716 = decodeArr "456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvw" "ËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËË"
private yygo720 = decodeArr "Â»Â¼Â½Ã¬Ã­Ã®Ã±Ã²Ã³Ã´Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄÅÅ" "ÃÃÃËËÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo726 = decodeArr "456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvw" "ËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËËË"
private yygos = let 
    sub1 = [      (0, yygo0),
      (1, yygo1),
      (2, yygo2),
      (4, yygo4),
      (6, yygo6),
      (8, yygo8),
      (10, yygo10),
      (13, yygo13),
      (23, yygo23),
      (26, yygo26),
      (29, yygo29),
      (30, yygo30),
      (41, yygo41),
      (42, yygo42),
      (43, yygo43),
      (46, yygo46),
      (52, yygo52),
      (57, yygo57),
      (64, yygo64),
      (66, yygo66),
      (67, yygo67),
      (72, yygo72),
      (76, yygo76),
      (79, yygo79),
      (81, yygo81),
      (82, yygo82),
      (85, yygo85),
      (87, yygo87),
      (89, yygo89),
      (90, yygo90),
      (92, yygo92),
      (96, yygo96),
      (97, yygo97),
      (98, yygo98),
      (100, yygo100),
      (101, yygo101),
      (102, yygo102),
      (104, yygo104),
      (105, yygo105),
      (106, yygo106),
      (109, yygo109),
      (113, yygo113),
      (116, yygo116),
      (117, yygo117),
      (118, yygo118),
      (120, yygo120),
      (121, yygo121),
      (122, yygo122),
      (123, yygo123),
      (124, yygo124),
      (125, yygo125),
      (127, yygo127),
      (128, yygo128),
      (143, yygo143),
      (145, yygo145),
      (149, yygo149),
      (150, yygo150),
      (152, yygo152),
      (155, yygo155),
      (161, yygo161),
      (164, yygo164),
      (165, yygo165),
      (169, yygo169),
      (174, yygo174)];
    sub2 = [      (176, yygo176),
      (181, yygo181),
      (182, yygo182),
      (184, yygo184),
      (185, yygo185),
      (186, yygo186),
      (188, yygo188),
      (199, yygo199),
      (200, yygo200),
      (201, yygo201),
      (209, yygo209),
      (215, yygo215),
      (216, yygo216),
      (223, yygo223),
      (227, yygo227),
      (229, yygo229),
      (233, yygo233),
      (235, yygo235),
      (236, yygo236),
      (237, yygo237),
      (238, yygo238),
      (240, yygo240),
      (241, yygo241),
      (242, yygo242),
      (245, yygo245),
      (247, yygo247),
      (249, yygo249),
      (254, yygo254),
      (255, yygo255),
      (256, yygo256),
      (257, yygo257),
      (264, yygo264),
      (266, yygo266),
      (267, yygo267),
      (270, yygo270),
      (271, yygo271),
      (273, yygo273),
      (274, yygo274),
      (281, yygo281),
      (282, yygo282),
      (283, yygo283),
      (285, yygo285),
      (286, yygo286),
      (287, yygo287),
      (288, yygo288),
      (303, yygo303),
      (305, yygo305),
      (308, yygo308),
      (309, yygo309),
      (319, yygo319),
      (320, yygo320),
      (325, yygo325),
      (327, yygo327),
      (329, yygo329),
      (332, yygo332),
      (333, yygo333),
      (334, yygo334),
      (337, yygo337),
      (338, yygo338),
      (344, yygo344),
      (347, yygo347),
      (352, yygo352),
      (354, yygo354),
      (356, yygo356)];
    sub3 = [      (357, yygo357),
      (359, yygo359),
      (369, yygo369),
      (371, yygo371),
      (377, yygo377),
      (381, yygo381),
      (384, yygo384),
      (387, yygo387),
      (390, yygo390),
      (393, yygo393),
      (395, yygo395),
      (396, yygo396),
      (399, yygo399),
      (404, yygo404),
      (407, yygo407),
      (414, yygo414),
      (416, yygo416),
      (419, yygo419),
      (420, yygo420),
      (421, yygo421),
      (427, yygo427),
      (429, yygo429),
      (439, yygo439),
      (443, yygo443),
      (444, yygo444),
      (448, yygo448),
      (453, yygo453),
      (455, yygo455),
      (456, yygo456),
      (460, yygo460),
      (462, yygo462),
      (471, yygo471),
      (472, yygo472),
      (473, yygo473),
      (474, yygo474),
      (475, yygo475),
      (476, yygo476),
      (477, yygo477),
      (483, yygo483),
      (487, yygo487),
      (490, yygo490),
      (491, yygo491),
      (493, yygo493),
      (494, yygo494),
      (496, yygo496),
      (498, yygo498),
      (500, yygo500),
      (503, yygo503),
      (504, yygo504),
      (505, yygo505),
      (507, yygo507),
      (510, yygo510),
      (512, yygo512),
      (515, yygo515),
      (521, yygo521),
      (522, yygo522),
      (532, yygo532),
      (542, yygo542),
      (543, yygo543),
      (545, yygo545),
      (546, yygo546),
      (549, yygo549),
      (560, yygo560),
      (562, yygo562)];
    sub4 = [      (563, yygo563),
      (564, yygo564),
      (577, yygo577),
      (579, yygo579),
      (580, yygo580),
      (583, yygo583),
      (593, yygo593),
      (600, yygo600),
      (602, yygo602),
      (604, yygo604),
      (607, yygo607),
      (611, yygo611),
      (615, yygo615),
      (616, yygo616),
      (617, yygo617),
      (618, yygo618),
      (619, yygo619),
      (638, yygo638),
      (690, yygo690),
      (704, yygo704),
      (711, yygo711),
      (712, yygo712),
      (713, yygo713),
      (714, yygo714),
      (716, yygo716),
      (720, yygo720),
      (726, yygo726)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` genericArrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4);
{-

    this file will be appended to every parser YYgen.fr builds

 -}
 
 
--- the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, yytoks))  -- will this ever happen?
            | act == yyErr    -> do
                            let fun = elemAt yyrecs st
                            toks <- fun yytoks
                            yyloop yyvals toks
            -- shift?
            | act >= 0, yydebug, traceLn (show st ++ ": shift to " ++ show act ++ " on " ++ yyshow yyt) = undefined
            | act >= 0 = yyloop ((act; YYTok yyt)!:yyvals) yyts
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals yytoks
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, []))
            | act == yyErr = do
                yyerror yyEOF ("syntax error on end of file")
                YYM.pure (yyvals, [])
            -- shift?
            | act >= 0 -> error ("Can't shift on end of file in state " ++ show act)
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals []
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case itemAt yyacts n of {
    Just fun -> fun tok;
    Nothing  -> YYAction yyErr;
};

yyeaction n = case elemAt yyeacts n of  {
    0 -> YYAction yyErr;
    this -> YYAction this; 
};

--- nowarn: application of 'yybadprod' will diverge
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



--- drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYAction err
            | yyErr == err, yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | yyErr == err = yydrop i ts
            | otherwise  =  YYM.pure (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.pure [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.pure (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.pure [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts

yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []

yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts

yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []

yyreduce red yyvs = case itemAt yyprods red of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.itemAt popst of
                Just arr -> case elemAt arr red of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.pure ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.pure (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror (yyline yyt) ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.pure (Just x)
        _ -> YYM.pure Nothing;
;
--begin tail
{--
    the parser pass
 -}
pass :: [Token] -> StG (Maybe ParseResult) -- Global -> IO (Maybe ParseResult, Global)
pass = yyparse . substQQ
--end tail
