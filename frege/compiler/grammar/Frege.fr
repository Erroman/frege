--begin top
{- 

    Copyright Â© 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. 

        Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

     -}

{--
    This is the grammar for the Frege language.
-}
module frege.compiler.grammar.Frege; -- where

    {-
       !!! DO NOT CHANGE FILE Frege.fr, IT HAS BEEN CREATED AUTOMATICALLY !!!
    -}

import frege.Prelude hiding(<+>, break);

import frege.control.monad.State(State);

import Data.TreeMap(insert);
import Data.List as DL(elemBy);

import  Compiler.enums.Flags ;
import  Compiler.enums.TokenID(TokenID);
import  Compiler.enums.Visibility;
import  Compiler.enums.Literals;
import  Compiler.enums.CaseKind;

import  Compiler.types.Positions;
import  Compiler.types.Tokens;
import  Compiler.types.Kinds;
import  Compiler.types.SNames;
import  Compiler.types.Packs(magicPack);
import  Compiler.types.ImportDetails;
import  Compiler.types.Types;
import  Compiler.types.SourceDefinitions;
import  Compiler.types.ConstructorField;
import  Compiler.types.Global as G;

import  Compiler.common.Mangle;
import  Compiler.common.Errors as E();
import  Compiler.common.Resolve as R(enclosed);

import Lib.PP (group, break, msgdoc);
import frege.compiler.common.Tuples as T(tuple);
import frege.compiler.common.Desugar;

import frege.compiler.grammar.Lexer (substQQ);


-- this will speed up the parser by a factor of 70, cause yyprods comes out monotyped.
private yyprod1 :: [(Int, YYsi ParseResult Token)]
    -> StG (YYsi ParseResult Token, [(Int, YYsi ParseResult Token)]);


{-
 The following definitions are not strictly necessary, but they help
 to avoid truly crazy type signatures for parse stack items and
 considerably speed up type checking in giving the result types of
 certain nonterminal reduction rules.
 Note that you cannot lie about the type of nonterminal reduction rules.
 Note that types like "Maybe x" on the RHS must be given like so: (Maybe x)
 -}
--end top
type YYM = State;
-- data YYAction = YYShift Int | YYRed Int | YYErr | YYAccept;
!yyAccept = maxBound :: Int;
!yyErr    = minBound :: Int;
{-- positive numbers are *shift* actions, or *accept*
    negative ones are *reduce* actions, or *error* --};
newtype YYAction = YYAction Int;
data YYsi res tok  = 
	  YYStart () | YYAcc res | YYTok tok
	| YYNTaeq Token
	| YYNTalias Token
	| YYNTannoitem Token
	| YYNTannoitems [Token]
	| YYNTannotation [Def]
	| YYNTapats [Exp]
	| YYNTappex Exp
	| YYNTbinex Exp
	| YYNTboundvar String
	| YYNTboundvars [String]
	| YYNTcalt CAltS
	| YYNTcalts [CAltS]
	| YYNTccontext [ContextS]
	| YYNTclassdef Def
	| YYNTcommata Int
	| YYNTconfld [ConField SName]
	| YYNTconflds [ConField SName]
	| YYNTcontypes [ConField SName]
	| YYNTdalt DConS
	| YYNTdalts [DConS]
	| YYNTdatadef Def
	| YYNTdatainit Def
	| YYNTdefinition [Def]
	| YYNTdefinitions [Def]
	| YYNTderivedef Def
	| YYNTdocs String
	| YYNTdocumentation Def
	| YYNTdodefs [Qual]
	| YYNTdplocaldef [Def]
	| YYNTdvars [TauS]
	| YYNTelsex Token
	| YYNTexpr Exp
	| YYNTexprSC [Exp]
	| YYNTexprSS [Exp]
	| YYNTfield (String, Exp)
	| YYNTfields [(String, Exp)]
	| YYNTfitem Token
	| YYNTfixity Def
	| YYNTfldid (Position, String, Visibility, Bool)
	| YYNTfldids [(Position, String, Visibility, Bool)]
	| YYNTforall SigmaS
	| YYNTfundef [Def]
	| YYNTfunhead (Exp, [Pat])
	| YYNTgargs [TauS]
	| YYNTgetfield (Token, Bool,Exp)
	| YYNTgetfields [(Token,Bool,Exp)]
	| YYNTgqual Qual
	| YYNTgquals [Qual]
	| YYNTguard Guard
	| YYNTguards [Guard]
	| YYNTicontext [ContextS]
	| YYNTimport Def
	| YYNTimportitem ImportItem
	| YYNTimportliste ImportList
	| YYNTimportspec ImportItem
	| YYNTimportspecs [ImportItem]
	| YYNTimpurenativedef Def
	| YYNTinfix Def
	| YYNTinstdef Def
	| YYNTinsthead Def
	| YYNTinterfaces [TauS]
	| YYNTjitem String
	| YYNTjtoken Token
	| YYNTjtokens [Token]
	| YYNTkind Kind
	| YYNTlambda Exp
	| YYNTlambdabody Exp
	| YYNTlcqual Qual
	| YYNTlcquals [Qual]
	| YYNTletdef [Def]
	| YYNTletdefs [Def]
	| YYNTliteral Exp
	| YYNTlocaldef [Def]
	| YYNTlocaldefs [Def]
	| YYNTmbdot Token
	| YYNTmemspec ImportItem
	| YYNTmemspecs [ImportItem]
	| YYNTmethodspec (Token, String, Maybe [TauS])
	| YYNTmodule ParseResult
	| YYNTmoduleclause (String, Maybe String, Position)
	| YYNTmoduledefinition Def
	| YYNTmodulename (String, Position)
	| YYNTmodulename1 (String, Position)
	| YYNTnativedef Def
	| YYNTnativename String
	| YYNTnativepur (Bool, Bool)
	| YYNTnativespec (String, Maybe [TauS])
	| YYNToperator Token
	| YYNToperators [String]
	| YYNTopstring String
	| YYNTpattern Pat
	| YYNTplainfldid (Position, String, Visibility, Bool)
	| YYNTplocaldef [Def]
	| YYNTprimary Exp
	| YYNTpublicdefinition [Def]
	| YYNTqconid SName
	| YYNTqualifiers (Token -> SName)
	| YYNTqvarid SName
	| YYNTqvarids [SName]
	| YYNTqvarop SName
	| YYNTrawnativename String
	| YYNTrho RhoS
	| YYNTrhofun RhoS
	| YYNTscontext ContextS
	| YYNTscontexts [ContextS]
	| YYNTsicontext ContextS
	| YYNTsicontexts [ContextS]
	| YYNTsigex SigExs
	| YYNTsigexs [SigExs]
	| YYNTsigma SigmaS
	| YYNTsimpledalt DConS
	| YYNTsimplekind Kind
	| YYNTsimpletype TauS
	| YYNTsimpletypes [TauS]
	| YYNTstrictdalt DConS
	| YYNTstrictfldid (Position, String, Visibility, Bool)
	| YYNTtapp TauS
	| YYNTtau TauS
	| YYNTtauSB [TauS]
	| YYNTtauSC [TauS]
	| YYNTterm Exp
	| YYNTthenx Token
	| YYNTtopdefinition [Def]
	| YYNTtopex Exp
	| YYNTtyname SName
	| YYNTtypeclause (Maybe TauS)
	| YYNTtypedef Def
	| YYNTtyvar TauS
	| YYNTunex Exp
	| YYNTunop Token
	| YYNTvarid Token
	| YYNTvaridkw Token
	| YYNTvarop Token
	| YYNTvisdalt DConS
	| YYNTvisibledefinition [Def]
	| YYNTwheredef [Def]
	| YYNTwherelet [Def]
	| YYNTwheretokens [Token]
	| YYNTword String
	| YYNTwords [String];
showsi (YYStart  _) = "%start ";
	showsi (YYAcc _) = "%accept ";
	showsi (YYTok x) = yyshow x;
	showsi (YYNTaeq _) = "<aeq>";
	showsi (YYNTalias _) = "<alias>";
	showsi (YYNTannoitem _) = "<annoitem>";
	showsi (YYNTannoitems _) = "<annoitems>";
	showsi (YYNTannotation _) = "<annotation>";
	showsi (YYNTapats _) = "<apats>";
	showsi (YYNTappex _) = "<appex>";
	showsi (YYNTbinex _) = "<binex>";
	showsi (YYNTboundvar _) = "<boundvar>";
	showsi (YYNTboundvars _) = "<boundvars>";
	showsi (YYNTcalt _) = "<calt>";
	showsi (YYNTcalts _) = "<calts>";
	showsi (YYNTccontext _) = "<ccontext>";
	showsi (YYNTclassdef _) = "<classdef>";
	showsi (YYNTcommata _) = "<commata>";
	showsi (YYNTconfld _) = "<confld>";
	showsi (YYNTconflds _) = "<conflds>";
	showsi (YYNTcontypes _) = "<contypes>";
	showsi (YYNTdalt _) = "<dalt>";
	showsi (YYNTdalts _) = "<dalts>";
	showsi (YYNTdatadef _) = "<datadef>";
	showsi (YYNTdatainit _) = "<datainit>";
	showsi (YYNTdefinition _) = "<definition>";
	showsi (YYNTdefinitions _) = "<definitions>";
	showsi (YYNTderivedef _) = "<derivedef>";
	showsi (YYNTdocs _) = "<docs>";
	showsi (YYNTdocumentation _) = "<documentation>";
	showsi (YYNTdodefs _) = "<dodefs>";
	showsi (YYNTdplocaldef _) = "<dplocaldef>";
	showsi (YYNTdvars _) = "<dvars>";
	showsi (YYNTelsex _) = "<elsex>";
	showsi (YYNTexpr _) = "<expr>";
	showsi (YYNTexprSC _) = "<exprSC>";
	showsi (YYNTexprSS _) = "<exprSS>";
	showsi (YYNTfield _) = "<field>";
	showsi (YYNTfields _) = "<fields>";
	showsi (YYNTfitem _) = "<fitem>";
	showsi (YYNTfixity _) = "<fixity>";
	showsi (YYNTfldid _) = "<fldid>";
	showsi (YYNTfldids _) = "<fldids>";
	showsi (YYNTforall _) = "<forall>";
	showsi (YYNTfundef _) = "<fundef>";
	showsi (YYNTfunhead _) = "<funhead>";
	showsi (YYNTgargs _) = "<gargs>";
	showsi (YYNTgetfield _) = "<getfield>";
	showsi (YYNTgetfields _) = "<getfields>";
	showsi (YYNTgqual _) = "<gqual>";
	showsi (YYNTgquals _) = "<gquals>";
	showsi (YYNTguard _) = "<guard>";
	showsi (YYNTguards _) = "<guards>";
	showsi (YYNTicontext _) = "<icontext>";
	showsi (YYNTimport _) = "<import>";
	showsi (YYNTimportitem _) = "<importitem>";
	showsi (YYNTimportliste _) = "<importliste>";
	showsi (YYNTimportspec _) = "<importspec>";
	showsi (YYNTimportspecs _) = "<importspecs>";
	showsi (YYNTimpurenativedef _) = "<impurenativedef>";
	showsi (YYNTinfix _) = "<infix>";
	showsi (YYNTinstdef _) = "<instdef>";
	showsi (YYNTinsthead _) = "<insthead>";
	showsi (YYNTinterfaces _) = "<interfaces>";
	showsi (YYNTjitem _) = "<jitem>";
	showsi (YYNTjtoken _) = "<jtoken>";
	showsi (YYNTjtokens _) = "<jtokens>";
	showsi (YYNTkind _) = "<kind>";
	showsi (YYNTlambda _) = "<lambda>";
	showsi (YYNTlambdabody _) = "<lambdabody>";
	showsi (YYNTlcqual _) = "<lcqual>";
	showsi (YYNTlcquals _) = "<lcquals>";
	showsi (YYNTletdef _) = "<letdef>";
	showsi (YYNTletdefs _) = "<letdefs>";
	showsi (YYNTliteral _) = "<literal>";
	showsi (YYNTlocaldef _) = "<localdef>";
	showsi (YYNTlocaldefs _) = "<localdefs>";
	showsi (YYNTmbdot _) = "<mbdot>";
	showsi (YYNTmemspec _) = "<memspec>";
	showsi (YYNTmemspecs _) = "<memspecs>";
	showsi (YYNTmethodspec _) = "<methodspec>";
	showsi (YYNTmodule _) = "<module>";
	showsi (YYNTmoduleclause _) = "<moduleclause>";
	showsi (YYNTmoduledefinition _) = "<moduledefinition>";
	showsi (YYNTmodulename _) = "<modulename>";
	showsi (YYNTmodulename1 _) = "<modulename1>";
	showsi (YYNTnativedef _) = "<nativedef>";
	showsi (YYNTnativename _) = "<nativename>";
	showsi (YYNTnativepur _) = "<nativepur>";
	showsi (YYNTnativespec _) = "<nativespec>";
	showsi (YYNToperator _) = "<operator>";
	showsi (YYNToperators _) = "<operators>";
	showsi (YYNTopstring _) = "<opstring>";
	showsi (YYNTpattern _) = "<pattern>";
	showsi (YYNTplainfldid _) = "<plainfldid>";
	showsi (YYNTplocaldef _) = "<plocaldef>";
	showsi (YYNTprimary _) = "<primary>";
	showsi (YYNTpublicdefinition _) = "<publicdefinition>";
	showsi (YYNTqconid _) = "<qconid>";
	showsi (YYNTqualifiers _) = "<qualifiers>";
	showsi (YYNTqvarid _) = "<qvarid>";
	showsi (YYNTqvarids _) = "<qvarids>";
	showsi (YYNTqvarop _) = "<qvarop>";
	showsi (YYNTrawnativename _) = "<rawnativename>";
	showsi (YYNTrho _) = "<rho>";
	showsi (YYNTrhofun _) = "<rhofun>";
	showsi (YYNTscontext _) = "<scontext>";
	showsi (YYNTscontexts _) = "<scontexts>";
	showsi (YYNTsicontext _) = "<sicontext>";
	showsi (YYNTsicontexts _) = "<sicontexts>";
	showsi (YYNTsigex _) = "<sigex>";
	showsi (YYNTsigexs _) = "<sigexs>";
	showsi (YYNTsigma _) = "<sigma>";
	showsi (YYNTsimpledalt _) = "<simpledalt>";
	showsi (YYNTsimplekind _) = "<simplekind>";
	showsi (YYNTsimpletype _) = "<simpletype>";
	showsi (YYNTsimpletypes _) = "<simpletypes>";
	showsi (YYNTstrictdalt _) = "<strictdalt>";
	showsi (YYNTstrictfldid _) = "<strictfldid>";
	showsi (YYNTtapp _) = "<tapp>";
	showsi (YYNTtau _) = "<tau>";
	showsi (YYNTtauSB _) = "<tauSB>";
	showsi (YYNTtauSC _) = "<tauSC>";
	showsi (YYNTterm _) = "<term>";
	showsi (YYNTthenx _) = "<thenx>";
	showsi (YYNTtopdefinition _) = "<topdefinition>";
	showsi (YYNTtopex _) = "<topex>";
	showsi (YYNTtyname _) = "<tyname>";
	showsi (YYNTtypeclause _) = "<typeclause>";
	showsi (YYNTtypedef _) = "<typedef>";
	showsi (YYNTtyvar _) = "<tyvar>";
	showsi (YYNTunex _) = "<unex>";
	showsi (YYNTunop _) = "<unop>";
	showsi (YYNTvarid _) = "<varid>";
	showsi (YYNTvaridkw _) = "<varidkw>";
	showsi (YYNTvarop _) = "<varop>";
	showsi (YYNTvisdalt _) = "<visdalt>";
	showsi (YYNTvisibledefinition _) = "<visibledefinition>";
	showsi (YYNTwheredef _) = "<wheredef>";
	showsi (YYNTwherelet _) = "<wherelet>";
	showsi (YYNTwheretokens _) = "<wheretokens>";
	showsi (YYNTword _) = "<word>";
	showsi (YYNTwords _) = "<words>";
showst st = joined " " (map (\(_,si) -> showsi si) (reverse st));
!yydebug = (maybe "" id (System.getenv "YYDEBUG")).toLowerCase ~ Â´(1|yes|true|on)Â´;
yytrace s = (if yydebug then trace s else false) `seq` ();
yydbgAccept  s t = yytrace ("in state " ++ show s ++ " accept  " ++ show t ++  "\n" );
private yyaction0 t =   case yychar t of {
  '{' -> YYAction 4;
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    PACKAGE -> YYAction 2;
    PROTECTED -> YYAction 3;
    _ -> (YYAction yyErr);
  };
};
private yyaction1 t =   case yychar t of {
  ';' -> YYAction 8;
  '?' -> YYAction (-16);
  '!' -> YYAction (-16);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-16);
    PACKAGE -> YYAction (-16);
    PRIVATE -> YYAction (-16);
    PROTECTED -> YYAction (-16);
    PUBLIC -> YYAction (-16);
    _ -> (YYAction yyErr);
  };
};
private yyaction2 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction3 t =   case yytoken t of {
    PACKAGE -> YYAction 22;
    _ -> (YYAction yyErr);
  };
private yyaction4 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
yyaccept  (yyvals@((5, (YYNTmodule yy1)):_), yytoks) = yydbgAccept 5 (showst (take 1 yyvals)) `seq`
	([(5, YYAcc yy1)], yytoks);
yyaccept (yyvs,_) = yybadprod 5 yyvs;
private yyaction5 t = (YYAction yyErr);
private yyaction6 t =   case yychar t of {
  ';' -> YYAction 103;
  _ ->   case yytoken t of {
    VARID -> YYAction 101;
    WHERE -> YYAction 102;
    _ -> (YYAction yyErr);
  };
};
private yyaction7 t =   case yytoken t of {
    PACKAGE -> YYAction 106;
    PROTECTED -> YYAction 107;
    _ -> (YYAction yyErr);
  };
private yyaction8 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    _ -> (YYAction yyErr);
  };
private yyaction9 t = YYAction (-17);
private yyaction10 t = YYAction (-171);
private yyaction11 t = YYAction (-12);
private yyaction12 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction13 t = YYAction (-176);
private yyaction14 t = YYAction (-177);
private yyaction15 t = YYAction (-174);
private yyaction16 t = YYAction (-172);
private yyaction17 t = YYAction (-173);
private yyaction18 t = YYAction (-175);
private yyaction19 t = YYAction (-15);
private yyaction20 t =   case yychar t of {
  '.' -> YYAction 110;
  _ -> (YYAction yyErr);
};
private yyaction21 t = YYAction (-20);
private yyaction22 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction23 t =   case yychar t of {
  '-' -> YYAction (-182);
  '.' -> YYAction (-182);
  '(' -> YYAction (-182);
  ',' -> YYAction (-170);
  '|' -> YYAction (-182);
  '[' -> YYAction (-182);
  '?' -> YYAction (-182);
  '!' -> YYAction (-182);
  '=' -> YYAction (-182);
  '_' -> YYAction (-182);
  _ ->   case yytoken t of {
    VARID -> YYAction (-182);
    CONID -> YYAction (-182);
    QUALIFIER -> YYAction (-182);
    TRUE -> YYAction (-182);
    FALSE -> YYAction (-182);
    DO -> YYAction (-182);
    INTCONST -> YYAction (-182);
    STRCONST -> YYAction (-182);
    LONGCONST -> YYAction (-182);
    FLTCONST -> YYAction (-182);
    DBLCONST -> YYAction (-182);
    CHRCONST -> YYAction (-182);
    REGEXP -> YYAction (-182);
    BIGCONST -> YYAction (-182);
    DCOLON -> YYAction (-170);
    SOMEOP -> YYAction (-182);
    _ -> (YYAction yyErr);
  };
};
private yyaction24 t = YYAction (-185);
private yyaction25 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '{' -> YYAction (-406);
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 113;
    QUALIFIER -> YYAction 114;
    _ -> (YYAction yyErr);
  };
};
private yyaction26 t = YYAction (-116);
private yyaction27 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction28 t =   case yytoken t of {
    INTCONST -> YYAction 118;
    _ -> (YYAction yyErr);
  };
private yyaction29 t =   case yytoken t of {
    INTCONST -> YYAction 119;
    _ -> (YYAction yyErr);
  };
private yyaction30 t =   case yytoken t of {
    INTCONST -> YYAction 120;
    _ -> (YYAction yyErr);
  };
private yyaction31 t =   case yychar t of {
  '-' -> YYAction 124;
  '(' -> YYAction 125;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PACKAGE -> YYAction 122;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction32 t =   case yytoken t of {
    CONID -> YYAction 131;
    _ -> (YYAction yyErr);
  };
private yyaction33 t =   case yytoken t of {
    CONID -> YYAction 132;
    _ -> (YYAction yyErr);
  };
private yyaction34 t =   case yychar t of {
  '(' -> YYAction 134;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction35 t =   case yychar t of {
  '(' -> YYAction 138;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction36 t =   case yytoken t of {
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    _ -> (YYAction yyErr);
  };
private yyaction37 t =   case yytoken t of {
    CONID -> YYAction 144;
    _ -> (YYAction yyErr);
  };
private yyaction38 t = YYAction (-346);
private yyaction39 t = YYAction (-347);
private yyaction40 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction41 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction42 t =   case yychar t of {
  '(' -> YYAction 138;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction43 t =   case yychar t of {
  '{' -> YYAction 151;
  _ -> (YYAction yyErr);
};
private yyaction44 t =   case yychar t of {
  '{' -> YYAction 152;
  _ -> (YYAction yyErr);
};
private yyaction45 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 153;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction46 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 153;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction47 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 153;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction48 t =   case yytoken t of {
    NATIVE -> YYAction 153;
    _ -> (YYAction yyErr);
  };
private yyaction49 t = YYAction (-350);
private yyaction50 t = YYAction (-349);
private yyaction51 t = YYAction (-352);
private yyaction52 t = YYAction (-353);
private yyaction53 t = YYAction (-354);
private yyaction54 t = YYAction (-348);
private yyaction55 t = YYAction (-355);
private yyaction56 t = YYAction (-351);
private yyaction57 t =   case yychar t of {
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction58 t =   case yychar t of {
  '-' -> YYAction 159;
  '(' -> YYAction 146;
  ')' -> YYAction 160;
  ',' -> YYAction 161;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction59 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  ']' -> YYAction 167;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction60 t = YYAction (-194);
private yyaction61 t = YYAction (-193);
private yyaction62 t =   case yychar t of {
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction63 t = YYAction (-424);
private yyaction64 t =   case yychar t of {
  '}' -> YYAction 172;
  _ -> (YYAction yyErr);
};
private yyaction65 t =   case yychar t of {
  ';' -> YYAction 173;
  '}' -> YYAction (-27);
  _ -> (YYAction yyErr);
};
private yyaction66 t = YYAction (-30);
private yyaction67 t = YYAction (-31);
private yyaction68 t = YYAction (-32);
private yyaction69 t = YYAction (-40);
private yyaction70 t = YYAction (-118);
private yyaction71 t = YYAction (-37);
private yyaction72 t = YYAction (-38);
private yyaction73 t = YYAction (-39);
private yyaction74 t = YYAction (-117);
private yyaction75 t = YYAction (-119);
private yyaction76 t = YYAction (-120);
private yyaction77 t = YYAction (-121);
private yyaction78 t = YYAction (-122);
private yyaction79 t = YYAction (-126);
private yyaction80 t = YYAction (-127);
private yyaction81 t =   case yychar t of {
  ';' -> YYAction (-128);
  '}' -> YYAction (-128);
  _ ->   case yytoken t of {
    WHERE -> YYAction 174;
    _ -> (YYAction yyErr);
  };
};
private yyaction82 t = YYAction (-205);
private yyaction83 t = YYAction (-422);
private yyaction84 t =   case yychar t of {
  '{' -> YYAction 176;
  '-' -> YYAction (-425);
  ';' -> YYAction (-425);
  '}' -> YYAction (-425);
  '.' -> YYAction (-425);
  '(' -> YYAction (-425);
  ')' -> YYAction (-425);
  ',' -> YYAction (-425);
  '|' -> YYAction (-425);
  '[' -> YYAction (-425);
  ']' -> YYAction (-425);
  '?' -> YYAction (-425);
  '!' -> YYAction (-425);
  '=' -> YYAction (-425);
  '\\' -> YYAction (-425);
  '_' -> YYAction (-425);
  _ ->   case yytoken t of {
    VARID -> YYAction (-425);
    CONID -> YYAction (-425);
    QUALIFIER -> YYAction (-425);
    WHERE -> YYAction (-425);
    TRUE -> YYAction (-425);
    FALSE -> YYAction (-425);
    THEN -> YYAction (-425);
    ELSE -> YYAction (-425);
    OF -> YYAction (-425);
    DO -> YYAction (-425);
    INTCONST -> YYAction (-425);
    STRCONST -> YYAction (-425);
    LONGCONST -> YYAction (-425);
    FLTCONST -> YYAction (-425);
    DBLCONST -> YYAction (-425);
    CHRCONST -> YYAction (-425);
    REGEXP -> YYAction (-425);
    BIGCONST -> YYAction (-425);
    ARROW -> YYAction (-425);
    DCOLON -> YYAction (-425);
    GETS -> YYAction (-425);
    DOTDOT -> YYAction (-425);
    SOMEOP -> YYAction (-425);
    _ -> (YYAction yyErr);
  };
};
private yyaction85 t =   case yychar t of {
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction86 t =   case yychar t of {
  '-' -> YYAction 179;
  _ ->   case yytoken t of {
    VARID -> YYAction 178;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction87 t =   case yytoken t of {
    DCOLON -> YYAction 183;
    _ -> (YYAction yyErr);
  };
private yyaction88 t =   case yychar t of {
  ',' -> YYAction 184;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-209);
    _ -> (YYAction yyErr);
  };
};
private yyaction89 t = YYAction (-212);
private yyaction90 t =   case yychar t of {
  ';' -> YYAction (-337);
  '}' -> YYAction (-337);
  _ ->   case yytoken t of {
    WHERE -> YYAction 185;
    _ -> (YYAction yyErr);
  };
};
private yyaction91 t =   case yychar t of {
  '|' -> YYAction 187;
  '=' -> YYAction 188;
  _ -> (YYAction yyErr);
};
private yyaction92 t =   case yychar t of {
  '-' -> YYAction 192;
  '|' -> YYAction (-345);
  '=' -> YYAction (-345);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 191;
    _ -> (YYAction yyErr);
  };
};
private yyaction93 t = YYAction (-423);
private yyaction94 t = YYAction (-398);
private yyaction95 t = YYAction (-394);
private yyaction96 t =   case yychar t of {
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '_' -> YYAction 63;
  '-' -> YYAction (-399);
  ';' -> YYAction (-399);
  '}' -> YYAction (-399);
  ')' -> YYAction (-399);
  ',' -> YYAction (-399);
  '|' -> YYAction (-399);
  ']' -> YYAction (-399);
  '=' -> YYAction (-399);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    WHERE -> YYAction (-399);
    THEN -> YYAction (-399);
    ELSE -> YYAction (-399);
    OF -> YYAction (-399);
    ARROW -> YYAction (-399);
    DCOLON -> YYAction (-399);
    GETS -> YYAction (-399);
    DOTDOT -> YYAction (-399);
    SOMEOP -> YYAction (-399);
    _ -> (YYAction yyErr);
  };
};
private yyaction97 t = YYAction (-400);
private yyaction98 t =   case yychar t of {
  '.' -> YYAction 194;
  '-' -> YYAction (-402);
  ';' -> YYAction (-402);
  '}' -> YYAction (-402);
  '(' -> YYAction (-402);
  ')' -> YYAction (-402);
  ',' -> YYAction (-402);
  '|' -> YYAction (-402);
  '[' -> YYAction (-402);
  ']' -> YYAction (-402);
  '?' -> YYAction (-402);
  '!' -> YYAction (-402);
  '=' -> YYAction (-402);
  '\\' -> YYAction (-402);
  '_' -> YYAction (-402);
  _ ->   case yytoken t of {
    VARID -> YYAction (-402);
    CONID -> YYAction (-402);
    QUALIFIER -> YYAction (-402);
    WHERE -> YYAction (-402);
    TRUE -> YYAction (-402);
    FALSE -> YYAction (-402);
    THEN -> YYAction (-402);
    ELSE -> YYAction (-402);
    OF -> YYAction (-402);
    DO -> YYAction (-402);
    INTCONST -> YYAction (-402);
    STRCONST -> YYAction (-402);
    LONGCONST -> YYAction (-402);
    FLTCONST -> YYAction (-402);
    DBLCONST -> YYAction (-402);
    CHRCONST -> YYAction (-402);
    REGEXP -> YYAction (-402);
    BIGCONST -> YYAction (-402);
    ARROW -> YYAction (-402);
    DCOLON -> YYAction (-402);
    GETS -> YYAction (-402);
    DOTDOT -> YYAction (-402);
    SOMEOP -> YYAction (-402);
    _ -> (YYAction yyErr);
  };
};
private yyaction99 t =   case yychar t of {
  '{' -> YYAction 195;
  _ -> (YYAction yyErr);
};
private yyaction100 t = YYAction (-408);
private yyaction101 t = YYAction (-24);
private yyaction102 t =   case yychar t of {
  '{' -> YYAction 196;
  _ -> (YYAction yyErr);
};
private yyaction103 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction104 t =   case yychar t of {
  '(' -> YYAction 198;
  _ -> (YYAction yyErr);
};
private yyaction105 t =   case yychar t of {
  '(' -> YYAction (-25);
  _ ->   case yytoken t of {
    VARID -> YYAction 101;
    _ -> (YYAction yyErr);
  };
};
private yyaction106 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction107 t =   case yytoken t of {
    PACKAGE -> YYAction 201;
    _ -> (YYAction yyErr);
  };
private yyaction108 t = YYAction (-18);
private yyaction109 t = YYAction (-14);
private yyaction110 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction111 t = YYAction (-22);
private yyaction112 t = YYAction (-186);
private yyaction113 t = YYAction (-184);
private yyaction114 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '{' -> YYAction (-407);
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 203;
    _ -> (YYAction yyErr);
  };
};
private yyaction115 t = YYAction (-187);
private yyaction116 t = YYAction (-181);
private yyaction117 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-144);
  '}' -> YYAction (-144);
  _ ->   case yytoken t of {
    VARID -> YYAction 205;
    CONID -> YYAction 206;
    PUBLIC -> YYAction 207;
    _ -> (YYAction yyErr);
  };
};
private yyaction118 t = YYAction (-195);
private yyaction119 t = YYAction (-197);
private yyaction120 t = YYAction (-196);
private yyaction121 t = YYAction (-170);
private yyaction122 t =   case yytoken t of {
    TYPE -> YYAction 211;
    WHERE -> YYAction (-42);
    CLASS -> YYAction (-42);
    _ -> (YYAction yyErr);
  };
private yyaction123 t = YYAction (-192);
private yyaction124 t = YYAction (-215);
private yyaction125 t =   case yychar t of {
  '-' -> YYAction 213;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction126 t = YYAction (-216);
private yyaction127 t = YYAction (-214);
private yyaction128 t = YYAction (-213);
private yyaction129 t =   case yychar t of {
  '{' -> YYAction 221;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    SOMEOP -> YYAction 123;
    DCOLON -> YYAction (-223);
    _ -> (YYAction yyErr);
  };
};
private yyaction130 t =   case yytoken t of {
    DCOLON -> YYAction 228;
    _ -> (YYAction yyErr);
  };
private yyaction131 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 231;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> (YYAction yyErr);
  };
};
private yyaction132 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 234;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> (YYAction yyErr);
  };
};
private yyaction133 t =   case yytoken t of {
    CONID -> YYAction 113;
    QUALIFIER -> YYAction 236;
    _ -> (YYAction yyErr);
  };
private yyaction134 t =   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
private yyaction135 t =   case yychar t of {
  '(' -> YYAction 230;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> (YYAction yyErr);
  };
};
private yyaction136 t = YYAction (-271);
private yyaction137 t =   case yychar t of {
  ';' -> YYAction (-337);
  '}' -> YYAction (-337);
  _ ->   case yytoken t of {
    WHERE -> YYAction 185;
    EARROW -> YYAction 240;
    _ -> (YYAction yyErr);
  };
};
private yyaction138 t =   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
private yyaction139 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction140 t = YYAction (-279);
private yyaction141 t =   case yychar t of {
  ';' -> YYAction (-282);
  '}' -> YYAction (-282);
  _ ->   case yytoken t of {
    EARROW -> YYAction 250;
    WHERE -> YYAction (-282);
    _ -> (YYAction yyErr);
  };
};
private yyaction142 t =   case yychar t of {
  ';' -> YYAction (-337);
  '}' -> YYAction (-337);
  _ ->   case yytoken t of {
    WHERE -> YYAction 185;
    _ -> (YYAction yyErr);
  };
};
private yyaction143 t = YYAction (-36);
private yyaction144 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction 252;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> (YYAction yyErr);
  };
};
private yyaction145 t = YYAction (-182);
private yyaction146 t =   case yychar t of {
  '-' -> YYAction 254;
  '(' -> YYAction 146;
  ')' -> YYAction 160;
  ',' -> YYAction 161;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction147 t =   case yychar t of {
  ';' -> YYAction 258;
  _ ->   case yytoken t of {
    THEN -> YYAction 257;
    _ -> (YYAction yyErr);
  };
};
private yyaction148 t =   case yychar t of {
  '-' -> YYAction 192;
  ';' -> YYAction (-386);
  '}' -> YYAction (-386);
  ')' -> YYAction (-386);
  ',' -> YYAction (-386);
  '|' -> YYAction (-386);
  ']' -> YYAction (-386);
  '=' -> YYAction (-386);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 260;
    SOMEOP -> YYAction 191;
    WHERE -> YYAction (-386);
    THEN -> YYAction (-386);
    ELSE -> YYAction (-386);
    OF -> YYAction (-386);
    ARROW -> YYAction (-386);
    GETS -> YYAction (-386);
    DOTDOT -> YYAction (-386);
    _ -> (YYAction yyErr);
  };
};
private yyaction149 t =   case yytoken t of {
    OF -> YYAction 261;
    _ -> (YYAction yyErr);
  };
private yyaction150 t = YYAction (-284);
private yyaction151 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction152 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 266;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction153 t =   case yychar t of {
  '-' -> YYAction 124;
  '(' -> YYAction 125;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction154 t = YYAction (-33);
private yyaction155 t = YYAction (-34);
private yyaction156 t = YYAction (-35);
private yyaction157 t = YYAction (-211);
private yyaction158 t = YYAction (-393);
private yyaction159 t =   case yychar t of {
  '(' -> YYAction 146;
  ')' -> YYAction 271;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction160 t = YYAction (-428);
private yyaction161 t =   case yychar t of {
  ',' -> YYAction 161;
  ')' -> YYAction (-444);
  _ -> (YYAction yyErr);
};
private yyaction162 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  ')' -> YYAction 273;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction163 t =   case yychar t of {
  '(' -> YYAction 146;
  ')' -> YYAction 275;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction164 t =   case yychar t of {
  ')' -> YYAction 276;
  _ -> (YYAction yyErr);
};
private yyaction165 t =   case yychar t of {
  ';' -> YYAction 277;
  ')' -> YYAction 278;
  ',' -> YYAction 279;
  _ -> (YYAction yyErr);
};
private yyaction166 t =   case yychar t of {
  '-' -> YYAction 281;
  ';' -> YYAction (-386);
  ')' -> YYAction (-386);
  ',' -> YYAction (-386);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 260;
    SOMEOP -> YYAction 280;
    _ -> (YYAction yyErr);
  };
};
private yyaction167 t = YYAction (-439);
private yyaction168 t =   case yychar t of {
  ',' -> YYAction 283;
  '|' -> YYAction 284;
  ']' -> YYAction (-457);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-457);
    _ -> (YYAction yyErr);
  };
};
private yyaction169 t =   case yychar t of {
  ']' -> YYAction 286;
  _ ->   case yytoken t of {
    DOTDOT -> YYAction 285;
    _ -> (YYAction yyErr);
  };
};
private yyaction170 t =   case yychar t of {
  '\\' -> YYAction 62;
  _ ->   case yytoken t of {
    ARROW -> YYAction 287;
    _ -> (YYAction yyErr);
  };
};
private yyaction171 t =   case yychar t of {
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '_' -> YYAction 63;
  '\\' -> YYAction (-404);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    ARROW -> YYAction (-404);
    _ -> (YYAction yyErr);
  };
};
private yyaction172 t = YYAction (-3);
private yyaction173 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  '}' -> YYAction (-28);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction174 t =   case yychar t of {
  '{' -> YYAction 292;
  _ -> (YYAction yyErr);
};
private yyaction175 t = YYAction (-344);
private yyaction176 t =   case yychar t of {
  '}' -> YYAction 293;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
};
private yyaction177 t = YYAction (-403);
private yyaction178 t = YYAction (-199);
private yyaction179 t = YYAction (-200);
private yyaction180 t = YYAction (-198);
private yyaction181 t =   case yychar t of {
  '-' -> YYAction 179;
  ';' -> YYAction (-201);
  '}' -> YYAction (-201);
  _ ->   case yytoken t of {
    VARID -> YYAction 178;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction182 t = YYAction (-203);
private yyaction183 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction184 t =   case yychar t of {
  '(' -> YYAction 125;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
};
private yyaction185 t =   case yychar t of {
  '{' -> YYAction 307;
  _ -> (YYAction yyErr);
};
private yyaction186 t = YYAction (-285);
private yyaction187 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction188 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction189 t = YYAction (-343);
private yyaction190 t =   case yychar t of {
  '|' -> YYAction 187;
  ';' -> YYAction (-374);
  '}' -> YYAction (-374);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-374);
    _ -> (YYAction yyErr);
  };
};
private yyaction191 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction192 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction193 t = YYAction (-401);
private yyaction194 t =   case yychar t of {
  '{' -> YYAction 316;
  '[' -> YYAction 317;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 315;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction195 t =   case yytoken t of {
    VARID -> YYAction 320;
    _ -> (YYAction yyErr);
  };
private yyaction196 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    IMPORT -> YYAction 27;
    INFIX -> YYAction 28;
    INFIXR -> YYAction 29;
    INFIXL -> YYAction 30;
    NATIVE -> YYAction 31;
    NEWTYPE -> YYAction 32;
    DATA -> YYAction 33;
    CLASS -> YYAction 34;
    INSTANCE -> YYAction 35;
    ABSTRACT -> YYAction 36;
    TYPE -> YYAction 37;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    DERIVE -> YYAction 42;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 45;
    PROTECTED -> YYAction 46;
    PUBLIC -> YYAction 47;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction197 t = YYAction (-1);
private yyaction198 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    QUALIFIER -> YYAction 324;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction199 t = YYAction (-26);
private yyaction200 t = YYAction (-19);
private yyaction201 t =   case yytoken t of {
    VARID -> YYAction 10;
    CONID -> YYAction 11;
    QUALIFIER -> YYAction 12;
    PACKAGE -> YYAction 13;
    IMPORT -> YYAction 14;
    NATIVE -> YYAction 15;
    DATA -> YYAction 16;
    TYPE -> YYAction 17;
    PURE -> YYAction 18;
    _ -> (YYAction yyErr);
  };
private yyaction202 t = YYAction (-13);
private yyaction203 t = YYAction (-183);
private yyaction204 t = YYAction (-180);
private yyaction205 t =   case yychar t of {
  '(' -> YYAction (-170);
  _ ->   case yytoken t of {
    CONID -> YYAction 330;
    _ -> (YYAction yyErr);
  };
};
private yyaction206 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-144);
  '}' -> YYAction (-144);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PUBLIC -> YYAction 207;
    _ -> (YYAction yyErr);
  };
};
private yyaction207 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-144);
  '}' -> YYAction (-144);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PUBLIC -> YYAction 207;
    _ -> (YYAction yyErr);
  };
};
private yyaction208 t =   case yychar t of {
  ')' -> YYAction 336;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction209 t = YYAction (-141);
private yyaction210 t =   case yychar t of {
  '(' -> YYAction 344;
  _ -> (YYAction yyErr);
};
private yyaction211 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction212 t =   case yytoken t of {
    CLASS -> YYAction 348;
    WHERE -> YYAction (-44);
    _ -> (YYAction yyErr);
  };
private yyaction213 t =   case yychar t of {
  ')' -> YYAction 350;
  _ -> (YYAction yyErr);
};
private yyaction214 t =   case yychar t of {
  ')' -> YYAction 351;
  _ -> (YYAction yyErr);
};
private yyaction215 t =   case yychar t of {
  ')' -> YYAction 352;
  _ -> (YYAction yyErr);
};
private yyaction216 t =   case yychar t of {
  '.' -> YYAction 353;
  ';' -> YYAction (-5);
  '{' -> YYAction (-5);
  '}' -> YYAction (-5);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-5);
    DCOLON -> YYAction (-5);
    _ -> (YYAction yyErr);
  };
};
private yyaction217 t = YYAction (-6);
private yyaction218 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> (YYAction yyErr);
  };
private yyaction219 t =   case yychar t of {
  '.' -> YYAction 355;
  ';' -> YYAction (-7);
  '{' -> YYAction (-7);
  '}' -> YYAction (-7);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-7);
    DCOLON -> YYAction (-7);
    _ -> (YYAction yyErr);
  };
};
private yyaction220 t = YYAction (-11);
private yyaction221 t =   case yychar t of {
  '}' -> YYAction 356;
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction222 t = YYAction (-217);
private yyaction223 t = YYAction (-4);
private yyaction224 t = YYAction (-218);
private yyaction225 t = YYAction (-219);
private yyaction226 t =   case yychar t of {
  '{' -> YYAction 221;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-221);
    _ -> (YYAction yyErr);
  };
};
private yyaction227 t = YYAction (-222);
private yyaction228 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction229 t = YYAction (-255);
private yyaction230 t =   case yytoken t of {
    VARID -> YYAction 363;
    _ -> (YYAction yyErr);
  };
private yyaction231 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    DOCUMENTATION -> YYAction 365;
    PRIVATE -> YYAction 366;
    PROTECTED -> YYAction 367;
    PUBLIC -> YYAction 368;
    _ -> (YYAction yyErr);
  };
};
private yyaction232 t =   case yychar t of {
  '(' -> YYAction 230;
  '=' -> YYAction (-299);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> (YYAction yyErr);
  };
};
private yyaction233 t =   case yychar t of {
  '=' -> YYAction 376;
  _ -> (YYAction yyErr);
};
private yyaction234 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    DOCUMENTATION -> YYAction 365;
    NATIVE -> YYAction 377;
    PRIVATE -> YYAction 366;
    PROTECTED -> YYAction 367;
    PUBLIC -> YYAction 368;
    PURE -> YYAction 378;
    MUTABLE -> YYAction 379;
    _ -> (YYAction yyErr);
  };
};
private yyaction235 t =   case yychar t of {
  '=' -> YYAction 383;
  _ -> (YYAction yyErr);
};
private yyaction236 t =   case yytoken t of {
    CONID -> YYAction 203;
    _ -> (YYAction yyErr);
  };
private yyaction237 t =   case yychar t of {
  ',' -> YYAction 384;
  ')' -> YYAction (-268);
  _ -> (YYAction yyErr);
};
private yyaction238 t =   case yychar t of {
  ')' -> YYAction 385;
  _ -> (YYAction yyErr);
};
private yyaction239 t = YYAction (-267);
private yyaction240 t =   case yytoken t of {
    CONID -> YYAction 386;
    _ -> (YYAction yyErr);
  };
private yyaction241 t = YYAction (-274);
private yyaction242 t =   case yychar t of {
  ',' -> YYAction 387;
  ')' -> YYAction (-276);
  _ -> (YYAction yyErr);
};
private yyaction243 t =   case yychar t of {
  ')' -> YYAction 388;
  _ -> (YYAction yyErr);
};
private yyaction244 t =   case yychar t of {
  '(' -> YYAction 244;
  ')' -> YYAction 391;
  ',' -> YYAction 161;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 389;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    ARROW -> YYAction 390;
    _ -> (YYAction yyErr);
  };
};
private yyaction245 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  ']' -> YYAction 394;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction246 t = YYAction (-257);
private yyaction247 t = YYAction (-275);
private yyaction248 t = YYAction (-249);
private yyaction249 t = YYAction (-250);
private yyaction250 t =   case yychar t of {
  '(' -> YYAction 396;
  '[' -> YYAction 397;
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction251 t = YYAction (-283);
private yyaction252 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction253 t =   case yychar t of {
  '=' -> YYAction 400;
  _ -> (YYAction yyErr);
};
private yyaction254 t =   case yychar t of {
  '(' -> YYAction 146;
  ')' -> YYAction 401;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction255 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  ')' -> YYAction 402;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction256 t =   case yychar t of {
  '(' -> YYAction 146;
  ')' -> YYAction 403;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction257 t = YYAction (-388);
private yyaction258 t =   case yytoken t of {
    THEN -> YYAction 404;
    _ -> (YYAction yyErr);
  };
private yyaction259 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction260 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction261 t =   case yychar t of {
  '{' -> YYAction 407;
  _ -> (YYAction yyErr);
};
private yyaction262 t = YYAction (-136);
private yyaction263 t =   case yychar t of {
  ';' -> YYAction (-137);
  '}' -> YYAction (-137);
  _ ->   case yytoken t of {
    WHERE -> YYAction 174;
    _ -> (YYAction yyErr);
  };
};
private yyaction264 t =   case yychar t of {
  ';' -> YYAction 408;
  '}' -> YYAction (-138);
  _ -> (YYAction yyErr);
};
private yyaction265 t =   case yychar t of {
  '}' -> YYAction 409;
  _ -> (YYAction yyErr);
};
private yyaction266 t =   case yychar t of {
  '{' -> YYAction 410;
  _ -> (YYAction yyErr);
};
private yyaction267 t =   case yychar t of {
  '=' -> YYAction 412;
  ';' -> YYAction (-368);
  '}' -> YYAction (-368);
  ',' -> YYAction (-368);
  ']' -> YYAction (-368);
  _ ->   case yytoken t of {
    GETS -> YYAction 411;
    _ -> (YYAction yyErr);
  };
};
private yyaction268 t =   case yychar t of {
  ';' -> YYAction 413;
  '}' -> YYAction (-365);
  _ -> (YYAction yyErr);
};
private yyaction269 t = YYAction (-359);
private yyaction270 t =   case yychar t of {
  '}' -> YYAction 414;
  _ -> (YYAction yyErr);
};
private yyaction271 t =   case yychar t of {
  '-' -> YYAction (-432);
  '.' -> YYAction (-432);
  '(' -> YYAction (-432);
  ',' -> YYAction (-208);
  '|' -> YYAction (-432);
  '[' -> YYAction (-432);
  '?' -> YYAction (-432);
  '!' -> YYAction (-432);
  '=' -> YYAction (-432);
  '_' -> YYAction (-432);
  _ ->   case yytoken t of {
    VARID -> YYAction (-432);
    CONID -> YYAction (-432);
    QUALIFIER -> YYAction (-432);
    TRUE -> YYAction (-432);
    FALSE -> YYAction (-432);
    DO -> YYAction (-432);
    INTCONST -> YYAction (-432);
    STRCONST -> YYAction (-432);
    LONGCONST -> YYAction (-432);
    FLTCONST -> YYAction (-432);
    DBLCONST -> YYAction (-432);
    CHRCONST -> YYAction (-432);
    REGEXP -> YYAction (-432);
    BIGCONST -> YYAction (-432);
    DCOLON -> YYAction (-208);
    SOMEOP -> YYAction (-432);
    _ -> (YYAction yyErr);
  };
};
private yyaction272 t = YYAction (-445);
private yyaction273 t =   case yychar t of {
  '-' -> YYAction (-431);
  '.' -> YYAction (-431);
  '(' -> YYAction (-431);
  ',' -> YYAction (-206);
  '|' -> YYAction (-431);
  '[' -> YYAction (-431);
  '?' -> YYAction (-431);
  '!' -> YYAction (-431);
  '=' -> YYAction (-431);
  '_' -> YYAction (-431);
  _ ->   case yytoken t of {
    VARID -> YYAction (-431);
    CONID -> YYAction (-431);
    QUALIFIER -> YYAction (-431);
    TRUE -> YYAction (-431);
    FALSE -> YYAction (-431);
    DO -> YYAction (-431);
    INTCONST -> YYAction (-431);
    STRCONST -> YYAction (-431);
    LONGCONST -> YYAction (-431);
    FLTCONST -> YYAction (-431);
    DBLCONST -> YYAction (-431);
    CHRCONST -> YYAction (-431);
    REGEXP -> YYAction (-431);
    BIGCONST -> YYAction (-431);
    DCOLON -> YYAction (-206);
    SOMEOP -> YYAction (-431);
    _ -> (YYAction yyErr);
  };
};
private yyaction274 t =   case yychar t of {
  ')' -> YYAction 415;
  _ -> (YYAction yyErr);
};
private yyaction275 t =   case yychar t of {
  '-' -> YYAction (-430);
  '.' -> YYAction (-430);
  '(' -> YYAction (-430);
  ',' -> YYAction (-207);
  '|' -> YYAction (-430);
  '[' -> YYAction (-430);
  '?' -> YYAction (-430);
  '!' -> YYAction (-430);
  '=' -> YYAction (-430);
  '_' -> YYAction (-430);
  _ ->   case yytoken t of {
    VARID -> YYAction (-430);
    CONID -> YYAction (-430);
    QUALIFIER -> YYAction (-430);
    TRUE -> YYAction (-430);
    FALSE -> YYAction (-430);
    DO -> YYAction (-430);
    INTCONST -> YYAction (-430);
    STRCONST -> YYAction (-430);
    LONGCONST -> YYAction (-430);
    FLTCONST -> YYAction (-430);
    DBLCONST -> YYAction (-430);
    CHRCONST -> YYAction (-430);
    REGEXP -> YYAction (-430);
    BIGCONST -> YYAction (-430);
    DCOLON -> YYAction (-207);
    SOMEOP -> YYAction (-430);
    _ -> (YYAction yyErr);
  };
};
private yyaction276 t = YYAction (-429);
private yyaction277 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction278 t = YYAction (-438);
private yyaction279 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction280 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  ')' -> YYAction (-192);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction281 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  ')' -> YYAction 420;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction282 t =   case yychar t of {
  ')' -> YYAction 421;
  _ -> (YYAction yyErr);
};
private yyaction283 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  ')' -> YYAction (-459);
  ']' -> YYAction (-459);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    DOTDOT -> YYAction (-459);
    _ -> (YYAction yyErr);
  };
};
private yyaction284 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 266;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction285 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  ']' -> YYAction 425;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction286 t = YYAction (-440);
private yyaction287 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction288 t = YYAction (-383);
private yyaction289 t = YYAction (-382);
private yyaction290 t = YYAction (-405);
private yyaction291 t = YYAction (-29);
private yyaction292 t =   case yychar t of {
  '-' -> YYAction 57;
  '}' -> YYAction 428;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction293 t = YYAction (-426);
private yyaction294 t =   case yychar t of {
  '=' -> YYAction 430;
  '}' -> YYAction (-456);
  ',' -> YYAction (-456);
  _ -> (YYAction yyErr);
};
private yyaction295 t =   case yychar t of {
  '}' -> YYAction 431;
  _ -> (YYAction yyErr);
};
private yyaction296 t =   case yychar t of {
  ',' -> YYAction 432;
  '}' -> YYAction (-446);
  _ -> (YYAction yyErr);
};
private yyaction297 t = YYAction (-202);
private yyaction298 t =   case yytoken t of {
    VARID -> YYAction 433;
    _ -> (YYAction yyErr);
  };
private yyaction299 t = YYAction (-204);
private yyaction300 t = YYAction (-232);
private yyaction301 t = YYAction (-233);
private yyaction302 t =   case yychar t of {
  '-' -> YYAction (-239);
  ';' -> YYAction (-239);
  '}' -> YYAction (-239);
  ')' -> YYAction (-239);
  ',' -> YYAction (-239);
  '|' -> YYAction (-239);
  ']' -> YYAction (-239);
  '=' -> YYAction (-239);
  _ ->   case yytoken t of {
    ARROW -> YYAction 436;
    EARROW -> YYAction 437;
    DOCUMENTATION -> YYAction (-239);
    WHERE -> YYAction (-239);
    CLASS -> YYAction (-239);
    THEN -> YYAction (-239);
    ELSE -> YYAction (-239);
    OF -> YYAction (-239);
    THROWS -> YYAction (-239);
    DCOLON -> YYAction (-239);
    GETS -> YYAction (-239);
    DOTDOT -> YYAction (-239);
    SOMEOP -> YYAction (-239);
    _ -> (YYAction yyErr);
  };
};
private yyaction303 t = YYAction (-238);
private yyaction304 t = YYAction (-248);
private yyaction305 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  '-' -> YYAction (-317);
  ';' -> YYAction (-317);
  '}' -> YYAction (-317);
  ')' -> YYAction (-317);
  ',' -> YYAction (-317);
  '|' -> YYAction (-317);
  ']' -> YYAction (-317);
  '=' -> YYAction (-317);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    DOCUMENTATION -> YYAction (-317);
    WHERE -> YYAction (-317);
    CLASS -> YYAction (-317);
    THEN -> YYAction (-317);
    ELSE -> YYAction (-317);
    OF -> YYAction (-317);
    THROWS -> YYAction (-317);
    ARROW -> YYAction (-317);
    DCOLON -> YYAction (-317);
    GETS -> YYAction (-317);
    EARROW -> YYAction (-317);
    DOTDOT -> YYAction (-317);
    SOMEOP -> YYAction (-317);
    _ -> (YYAction yyErr);
  };
};
private yyaction306 t = YYAction (-210);
private yyaction307 t =   case yychar t of {
  '-' -> YYAction 57;
  '}' -> YYAction 442;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    NATIVE -> YYAction 153;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 439;
    PROTECTED -> YYAction 440;
    PUBLIC -> YYAction 441;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction308 t =   case yychar t of {
  ',' -> YYAction (-368);
  '=' -> YYAction (-368);
  _ ->   case yytoken t of {
    GETS -> YYAction 411;
    ARROW -> YYAction (-368);
    _ -> (YYAction yyErr);
  };
};
private yyaction309 t =   case yychar t of {
  ',' -> YYAction 448;
  '=' -> YYAction (-370);
  _ ->   case yytoken t of {
    ARROW -> YYAction (-370);
    _ -> (YYAction yyErr);
  };
};
private yyaction310 t =   case yychar t of {
  '=' -> YYAction 450;
  _ ->   case yytoken t of {
    ARROW -> YYAction 449;
    _ -> (YYAction yyErr);
  };
};
private yyaction311 t = YYAction (-342);
private yyaction312 t = YYAction (-375);
private yyaction313 t =   case yychar t of {
  '-' -> YYAction 192;
  ';' -> YYAction (-391);
  '}' -> YYAction (-391);
  ')' -> YYAction (-391);
  ',' -> YYAction (-391);
  '|' -> YYAction (-391);
  ']' -> YYAction (-391);
  '=' -> YYAction (-391);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 191;
    WHERE -> YYAction (-391);
    THEN -> YYAction (-391);
    ELSE -> YYAction (-391);
    OF -> YYAction (-391);
    ARROW -> YYAction (-391);
    DCOLON -> YYAction (-391);
    GETS -> YYAction (-391);
    DOTDOT -> YYAction (-391);
    _ -> (YYAction yyErr);
  };
};
private yyaction314 t =   case yychar t of {
  '-' -> YYAction 192;
  ';' -> YYAction (-392);
  '}' -> YYAction (-392);
  ')' -> YYAction (-392);
  ',' -> YYAction (-392);
  '|' -> YYAction (-392);
  ']' -> YYAction (-392);
  '=' -> YYAction (-392);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 191;
    WHERE -> YYAction (-392);
    THEN -> YYAction (-392);
    ELSE -> YYAction (-392);
    OF -> YYAction (-392);
    ARROW -> YYAction (-392);
    DCOLON -> YYAction (-392);
    GETS -> YYAction (-392);
    DOTDOT -> YYAction (-392);
    _ -> (YYAction yyErr);
  };
};
private yyaction315 t = YYAction (-410);
private yyaction316 t =   case yytoken t of {
    VARID -> YYAction 452;
    _ -> (YYAction yyErr);
  };
private yyaction317 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction318 t = YYAction (-411);
private yyaction319 t = YYAction (-412);
private yyaction320 t =   case yychar t of {
  '?' -> YYAction 456;
  '=' -> YYAction 457;
  '}' -> YYAction (-454);
  ',' -> YYAction (-454);
  _ ->   case yytoken t of {
    GETS -> YYAction 455;
    _ -> (YYAction yyErr);
  };
};
private yyaction321 t =   case yychar t of {
  '}' -> YYAction 458;
  _ -> (YYAction yyErr);
};
private yyaction322 t =   case yychar t of {
  ',' -> YYAction 459;
  '}' -> YYAction (-449);
  _ -> (YYAction yyErr);
};
private yyaction323 t =   case yychar t of {
  '}' -> YYAction 460;
  _ -> (YYAction yyErr);
};
private yyaction324 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    QUALIFIER -> YYAction 461;
    _ -> (YYAction yyErr);
  };
};
private yyaction325 t =   case yychar t of {
  ')' -> YYAction 463;
  _ -> (YYAction yyErr);
};
private yyaction326 t = YYAction (-191);
private yyaction327 t =   case yychar t of {
  ',' -> YYAction 464;
  ')' -> YYAction (-178);
  _ -> (YYAction yyErr);
};
private yyaction328 t = YYAction (-190);
private yyaction329 t = YYAction (-21);
private yyaction330 t =   case yychar t of {
  '(' -> YYAction 208;
  ';' -> YYAction (-144);
  '}' -> YYAction (-144);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PUBLIC -> YYAction 207;
    _ -> (YYAction yyErr);
  };
};
private yyaction331 t = YYAction (-143);
private yyaction332 t = YYAction (-148);
private yyaction333 t =   case yychar t of {
  '(' -> YYAction 466;
  ')' -> YYAction (-185);
  ',' -> YYAction (-185);
  _ ->   case yytoken t of {
    VARID -> YYAction (-185);
    CONID -> YYAction (-185);
    SOMEOP -> YYAction (-185);
    _ -> (YYAction yyErr);
  };
};
private yyaction334 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 113;
    QUALIFIER -> YYAction 467;
    _ -> (YYAction yyErr);
  };
};
private yyaction335 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction336 t = YYAction (-146);
private yyaction337 t =   case yychar t of {
  ')' -> YYAction 469;
  _ -> (YYAction yyErr);
};
private yyaction338 t =   case yychar t of {
  ',' -> YYAction 470;
  ')' -> YYAction (-149);
  _ -> (YYAction yyErr);
};
private yyaction339 t =   case yychar t of {
  ')' -> YYAction (-158);
  ',' -> YYAction (-158);
  _ ->   case yytoken t of {
    VARID -> YYAction 471;
    CONID -> YYAction 472;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction340 t = YYAction (-152);
private yyaction341 t = YYAction (-155);
private yyaction342 t = YYAction (-156);
private yyaction343 t = YYAction (-157);
private yyaction344 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction345 t = YYAction (-43);
private yyaction346 t = YYAction (-242);
private yyaction347 t =   case yychar t of {
  ';' -> YYAction (-241);
  '}' -> YYAction (-241);
  ')' -> YYAction (-241);
  ',' -> YYAction (-241);
  '|' -> YYAction (-241);
  ']' -> YYAction (-241);
  _ ->   case yytoken t of {
    ARROW -> YYAction 476;
    WHERE -> YYAction (-241);
    CLASS -> YYAction (-241);
    _ -> (YYAction yyErr);
  };
};
private yyaction348 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction349 t =   case yytoken t of {
    WHERE -> YYAction 478;
    _ -> (YYAction yyErr);
  };
private yyaction350 t = YYAction (-208);
private yyaction351 t = YYAction (-206);
private yyaction352 t = YYAction (-207);
private yyaction353 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> (YYAction yyErr);
  };
private yyaction354 t = YYAction (-10);
private yyaction355 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> (YYAction yyErr);
  };
private yyaction356 t = YYAction (-292);
private yyaction357 t =   case yychar t of {
  ',' -> YYAction 482;
  ';' -> YYAction (-244);
  '}' -> YYAction (-244);
  ')' -> YYAction (-244);
  '|' -> YYAction (-244);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-244);
    _ -> (YYAction yyErr);
  };
};
private yyaction358 t =   case yychar t of {
  '}' -> YYAction 483;
  _ -> (YYAction yyErr);
};
private yyaction359 t = YYAction (-220);
private yyaction360 t =   case yychar t of {
  ';' -> YYAction (-225);
  '}' -> YYAction (-225);
  '|' -> YYAction (-225);
  _ ->   case yytoken t of {
    THROWS -> YYAction 484;
    _ -> (YYAction yyErr);
  };
};
private yyaction361 t =   case yychar t of {
  '|' -> YYAction 485;
  ';' -> YYAction (-226);
  '}' -> YYAction (-226);
  _ -> (YYAction yyErr);
};
private yyaction362 t = YYAction (-228);
private yyaction363 t =   case yytoken t of {
    DCOLON -> YYAction 486;
    _ -> (YYAction yyErr);
  };
private yyaction364 t =   case yychar t of {
  '{' -> YYAction 487;
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  ';' -> YYAction (-313);
  '}' -> YYAction (-313);
  '|' -> YYAction (-313);
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    DOCUMENTATION -> YYAction (-313);
    WHERE -> YYAction (-313);
    _ -> (YYAction yyErr);
  };
};
private yyaction365 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    PRIVATE -> YYAction 366;
    PROTECTED -> YYAction 367;
    PUBLIC -> YYAction 368;
    _ -> (YYAction yyErr);
  };
};
private yyaction366 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    _ -> (YYAction yyErr);
  };
};
private yyaction367 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    _ -> (YYAction yyErr);
  };
};
private yyaction368 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    _ -> (YYAction yyErr);
  };
};
private yyaction369 t =   case yytoken t of {
    CONID -> YYAction 364;
    _ -> (YYAction yyErr);
  };
private yyaction370 t =   case yytoken t of {
    CONID -> YYAction 364;
    _ -> (YYAction yyErr);
  };
private yyaction371 t = YYAction (-298);
private yyaction372 t =   case yychar t of {
  ';' -> YYAction (-303);
  '}' -> YYAction (-303);
  '|' -> YYAction (-303);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 496;
    WHERE -> YYAction (-303);
    _ -> (YYAction yyErr);
  };
};
private yyaction373 t = YYAction (-306);
private yyaction374 t = YYAction (-312);
private yyaction375 t = YYAction (-300);
private yyaction376 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    DOCUMENTATION -> YYAction 365;
    PRIVATE -> YYAction 366;
    PROTECTED -> YYAction 367;
    PUBLIC -> YYAction 368;
    _ -> (YYAction yyErr);
  };
};
private yyaction377 t = YYAction (-288);
private yyaction378 t =   case yytoken t of {
    NATIVE -> YYAction 498;
    _ -> (YYAction yyErr);
  };
private yyaction379 t =   case yytoken t of {
    NATIVE -> YYAction 499;
    _ -> (YYAction yyErr);
  };
private yyaction380 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> (YYAction yyErr);
  };
private yyaction381 t = YYAction (-296);
private yyaction382 t =   case yychar t of {
  '|' -> YYAction 502;
  ';' -> YYAction (-301);
  '}' -> YYAction (-301);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-301);
    _ -> (YYAction yyErr);
  };
};
private yyaction383 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    DOCUMENTATION -> YYAction 365;
    NATIVE -> YYAction 377;
    PRIVATE -> YYAction 366;
    PROTECTED -> YYAction 367;
    PUBLIC -> YYAction 368;
    PURE -> YYAction 378;
    MUTABLE -> YYAction 379;
    _ -> (YYAction yyErr);
  };
};
private yyaction384 t =   case yychar t of {
  ')' -> YYAction (-269);
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction385 t = YYAction (-272);
private yyaction386 t =   case yychar t of {
  '(' -> YYAction 230;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    _ -> (YYAction yyErr);
  };
};
private yyaction387 t =   case yychar t of {
  ')' -> YYAction (-277);
  _ ->   case yytoken t of {
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction388 t = YYAction (-280);
private yyaction389 t =   case yychar t of {
  '(' -> YYAction (-255);
  ')' -> YYAction (-255);
  ',' -> YYAction (-255);
  '|' -> YYAction (-255);
  '[' -> YYAction (-255);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 486;
    VARID -> YYAction (-255);
    CONID -> YYAction (-255);
    QUALIFIER -> YYAction (-255);
    ARROW -> YYAction (-255);
    _ -> (YYAction yyErr);
  };
};
private yyaction390 t =   case yychar t of {
  ')' -> YYAction 508;
  _ -> (YYAction yyErr);
};
private yyaction391 t = YYAction (-259);
private yyaction392 t =   case yychar t of {
  ')' -> YYAction 509;
  ',' -> YYAction 510;
  '|' -> YYAction 511;
  _ -> (YYAction yyErr);
};
private yyaction393 t =   case yychar t of {
  ')' -> YYAction 512;
  _ -> (YYAction yyErr);
};
private yyaction394 t = YYAction (-258);
private yyaction395 t =   case yychar t of {
  ']' -> YYAction 513;
  _ -> (YYAction yyErr);
};
private yyaction396 t =   case yychar t of {
  ')' -> YYAction 391;
  ',' -> YYAction 161;
  _ ->   case yytoken t of {
    ARROW -> YYAction 390;
    _ -> (YYAction yyErr);
  };
};
private yyaction397 t =   case yychar t of {
  ']' -> YYAction 394;
  _ -> (YYAction yyErr);
};
private yyaction398 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction399 t = YYAction (-335);
private yyaction400 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction401 t = YYAction (-432);
private yyaction402 t = YYAction (-431);
private yyaction403 t = YYAction (-430);
private yyaction404 t = YYAction (-387);
private yyaction405 t =   case yychar t of {
  ';' -> YYAction 517;
  _ ->   case yytoken t of {
    ELSE -> YYAction 516;
    _ -> (YYAction yyErr);
  };
};
private yyaction406 t = YYAction (-385);
private yyaction407 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction408 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  '}' -> YYAction (-139);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction409 t =   case yytoken t of {
    IN -> YYAction 524;
    _ -> (YYAction yyErr);
  };
private yyaction410 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction411 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction412 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction413 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  '}' -> YYAction (-366);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 266;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction414 t = YYAction (-409);
private yyaction415 t = YYAction (-433);
private yyaction416 t =   case yychar t of {
  ';' -> YYAction 529;
  ')' -> YYAction (-460);
  _ -> (YYAction yyErr);
};
private yyaction417 t =   case yychar t of {
  ')' -> YYAction 530;
  _ -> (YYAction yyErr);
};
private yyaction418 t =   case yychar t of {
  ',' -> YYAction 283;
  ')' -> YYAction (-457);
  ']' -> YYAction (-457);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-457);
    _ -> (YYAction yyErr);
  };
};
private yyaction419 t =   case yychar t of {
  ')' -> YYAction 531;
  _ -> (YYAction yyErr);
};
private yyaction420 t = YYAction (-435);
private yyaction421 t = YYAction (-434);
private yyaction422 t = YYAction (-458);
private yyaction423 t =   case yychar t of {
  ',' -> YYAction 532;
  ']' -> YYAction (-362);
  _ -> (YYAction yyErr);
};
private yyaction424 t =   case yychar t of {
  ']' -> YYAction 533;
  _ -> (YYAction yyErr);
};
private yyaction425 t = YYAction (-441);
private yyaction426 t =   case yychar t of {
  ']' -> YYAction 534;
  _ -> (YYAction yyErr);
};
private yyaction427 t = YYAction (-384);
private yyaction428 t = YYAction (-340);
private yyaction429 t =   case yychar t of {
  '}' -> YYAction 535;
  _ -> (YYAction yyErr);
};
private yyaction430 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction431 t = YYAction (-427);
private yyaction432 t =   case yychar t of {
  '}' -> YYAction (-448);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
};
private yyaction433 t = YYAction (-231);
private yyaction434 t =   case yychar t of {
  '.' -> YYAction 539;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 538;
    _ -> (YYAction yyErr);
  };
};
private yyaction435 t =   case yychar t of {
  '.' -> YYAction (-229);
  _ ->   case yytoken t of {
    VARID -> YYAction 433;
    SOMEOP -> YYAction (-229);
    _ -> (YYAction yyErr);
  };
};
private yyaction436 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction437 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction438 t = YYAction (-318);
private yyaction439 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 153;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction440 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 153;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction441 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    NATIVE -> YYAction 153;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction442 t = YYAction (-338);
private yyaction443 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  ';' -> YYAction (-133);
  '}' -> YYAction (-133);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    NATIVE -> YYAction 153;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 439;
    PROTECTED -> YYAction 440;
    PUBLIC -> YYAction 441;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction444 t = YYAction (-129);
private yyaction445 t =   case yychar t of {
  '}' -> YYAction 549;
  _ -> (YYAction yyErr);
};
private yyaction446 t =   case yychar t of {
  ';' -> YYAction 550;
  '}' -> YYAction (-123);
  _ -> (YYAction yyErr);
};
private yyaction447 t = YYAction (-135);
private yyaction448 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  '=' -> YYAction (-372);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    ARROW -> YYAction (-372);
    _ -> (YYAction yyErr);
  };
};
private yyaction449 t = YYAction (-357);
private yyaction450 t = YYAction (-358);
private yyaction451 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction452 t =   case yychar t of {
  '?' -> YYAction 554;
  '=' -> YYAction 555;
  '}' -> YYAction (-454);
  ',' -> YYAction (-454);
  _ ->   case yytoken t of {
    GETS -> YYAction 553;
    _ -> (YYAction yyErr);
  };
};
private yyaction453 t =   case yychar t of {
  '}' -> YYAction 556;
  _ -> (YYAction yyErr);
};
private yyaction454 t =   case yychar t of {
  ']' -> YYAction 557;
  _ -> (YYAction yyErr);
};
private yyaction455 t =   case yychar t of {
  '-' -> YYAction 57;
  '}' -> YYAction 558;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction456 t =   case yychar t of {
  '}' -> YYAction 560;
  _ -> (YYAction yyErr);
};
private yyaction457 t =   case yychar t of {
  '-' -> YYAction 57;
  '}' -> YYAction 561;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction458 t = YYAction (-416);
private yyaction459 t =   case yychar t of {
  '}' -> YYAction (-451);
  _ ->   case yytoken t of {
    VARID -> YYAction 563;
    _ -> (YYAction yyErr);
  };
};
private yyaction460 t = YYAction (-2);
private yyaction461 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    _ -> (YYAction yyErr);
  };
};
private yyaction462 t = YYAction (-189);
private yyaction463 t = YYAction (-23);
private yyaction464 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    QUALIFIER -> YYAction 324;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction465 t = YYAction (-142);
private yyaction466 t =   case yychar t of {
  ')' -> YYAction 568;
  _ ->   case yytoken t of {
    VARID -> YYAction 471;
    CONID -> YYAction 472;
    PUBLIC -> YYAction 567;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction467 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  _ ->   case yytoken t of {
    VARID -> YYAction 112;
    CONID -> YYAction 203;
    _ -> (YYAction yyErr);
  };
};
private yyaction468 t = YYAction (-160);
private yyaction469 t = YYAction (-147);
private yyaction470 t =   case yychar t of {
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  ')' -> YYAction (-150);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 333;
    QUALIFIER -> YYAction 334;
    PUBLIC -> YYAction 335;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction471 t = YYAction (-167);
private yyaction472 t = YYAction (-168);
private yyaction473 t = YYAction (-169);
private yyaction474 t = YYAction (-159);
private yyaction475 t =   case yychar t of {
  ')' -> YYAction 573;
  _ -> (YYAction yyErr);
};
private yyaction476 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction477 t = YYAction (-45);
private yyaction478 t =   case yychar t of {
  '{' -> YYAction 575;
  _ -> (YYAction yyErr);
};
private yyaction479 t = YYAction (-41);
private yyaction480 t = YYAction (-8);
private yyaction481 t = YYAction (-9);
private yyaction482 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction483 t = YYAction (-291);
private yyaction484 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction485 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction486 t =   case yychar t of {
  '(' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 579;
    SOMEOP -> YYAction 580;
    _ -> (YYAction yyErr);
  };
};
private yyaction487 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 584;
    PUBLIC -> YYAction 585;
    _ -> (YYAction yyErr);
  };
};
private yyaction488 t = YYAction (-316);
private yyaction489 t = YYAction (-315);
private yyaction490 t = YYAction (-305);
private yyaction491 t = YYAction (-308);
private yyaction492 t = YYAction (-309);
private yyaction493 t = YYAction (-307);
private yyaction494 t = YYAction (-311);
private yyaction495 t = YYAction (-310);
private yyaction496 t = YYAction (-304);
private yyaction497 t = YYAction (-297);
private yyaction498 t = YYAction (-286);
private yyaction499 t = YYAction (-287);
private yyaction500 t =   case yychar t of {
  '{' -> YYAction 221;
  ';' -> YYAction (-289);
  '}' -> YYAction (-289);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-289);
    _ -> (YYAction yyErr);
  };
};
private yyaction501 t = YYAction (-293);
private yyaction502 t =   case yychar t of {
  '?' -> YYAction 369;
  '!' -> YYAction 370;
  _ ->   case yytoken t of {
    CONID -> YYAction 364;
    DOCUMENTATION -> YYAction 365;
    PRIVATE -> YYAction 366;
    PROTECTED -> YYAction 367;
    PUBLIC -> YYAction 368;
    _ -> (YYAction yyErr);
  };
};
private yyaction503 t =   case yytoken t of {
    VARID -> YYAction 216;
    CONID -> YYAction 217;
    QUALIFIER -> YYAction 218;
    PACKAGE -> YYAction 219;
    STRCONST -> YYAction 220;
    _ -> (YYAction yyErr);
  };
private yyaction504 t = YYAction (-295);
private yyaction505 t = YYAction (-270);
private yyaction506 t =   case yychar t of {
  ';' -> YYAction (-337);
  '}' -> YYAction (-337);
  _ ->   case yytoken t of {
    WHERE -> YYAction 185;
    _ -> (YYAction yyErr);
  };
};
private yyaction507 t = YYAction (-278);
private yyaction508 t = YYAction (-261);
private yyaction509 t = YYAction (-251);
private yyaction510 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction511 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction512 t = YYAction (-260);
private yyaction513 t = YYAction (-254);
private yyaction514 t = YYAction (-281);
private yyaction515 t = YYAction (-336);
private yyaction516 t = YYAction (-390);
private yyaction517 t =   case yytoken t of {
    ELSE -> YYAction 603;
    _ -> (YYAction yyErr);
  };
private yyaction518 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction519 t = YYAction (-356);
private yyaction520 t =   case yychar t of {
  '|' -> YYAction 187;
  '=' -> YYAction 450;
  _ ->   case yytoken t of {
    ARROW -> YYAction 449;
    _ -> (YYAction yyErr);
  };
};
private yyaction521 t =   case yychar t of {
  ';' -> YYAction 607;
  '}' -> YYAction (-379);
  _ ->   case yytoken t of {
    WHERE -> YYAction 174;
    _ -> (YYAction yyErr);
  };
};
private yyaction522 t =   case yychar t of {
  '}' -> YYAction 609;
  _ -> (YYAction yyErr);
};
private yyaction523 t = YYAction (-140);
private yyaction524 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction525 t =   case yychar t of {
  '}' -> YYAction 611;
  _ -> (YYAction yyErr);
};
private yyaction526 t = YYAction (-369);
private yyaction527 t = YYAction (-360);
private yyaction528 t = YYAction (-367);
private yyaction529 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  ')' -> YYAction (-462);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction530 t = YYAction (-437);
private yyaction531 t = YYAction (-436);
private yyaction532 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  ']' -> YYAction (-364);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 266;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction533 t = YYAction (-443);
private yyaction534 t = YYAction (-442);
private yyaction535 t = YYAction (-341);
private yyaction536 t = YYAction (-455);
private yyaction537 t = YYAction (-447);
private yyaction538 t = YYAction (-236);
private yyaction539 t = YYAction (-235);
private yyaction540 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    _ -> (YYAction yyErr);
  };
};
private yyaction541 t = YYAction (-230);
private yyaction542 t =   case yychar t of {
  '-' -> YYAction (-239);
  ';' -> YYAction (-239);
  '}' -> YYAction (-239);
  ')' -> YYAction (-239);
  ',' -> YYAction (-239);
  '|' -> YYAction (-239);
  ']' -> YYAction (-239);
  '=' -> YYAction (-239);
  _ ->   case yytoken t of {
    ARROW -> YYAction 436;
    DOCUMENTATION -> YYAction (-239);
    WHERE -> YYAction (-239);
    CLASS -> YYAction (-239);
    THEN -> YYAction (-239);
    ELSE -> YYAction (-239);
    OF -> YYAction (-239);
    THROWS -> YYAction (-239);
    DCOLON -> YYAction (-239);
    GETS -> YYAction (-239);
    DOTDOT -> YYAction (-239);
    SOMEOP -> YYAction (-239);
    _ -> (YYAction yyErr);
  };
};
private yyaction543 t = YYAction (-240);
private yyaction544 t = YYAction (-237);
private yyaction545 t = YYAction (-130);
private yyaction546 t = YYAction (-131);
private yyaction547 t = YYAction (-132);
private yyaction548 t = YYAction (-134);
private yyaction549 t = YYAction (-339);
private yyaction550 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 58;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  '}' -> YYAction (-124);
  _ ->   case yytoken t of {
    VARID -> YYAction 23;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    DOCUMENTATION -> YYAction 26;
    NATIVE -> YYAction 153;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    PRIVATE -> YYAction 439;
    PROTECTED -> YYAction 440;
    PUBLIC -> YYAction 441;
    PURE -> YYAction 48;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction551 t = YYAction (-371);
private yyaction552 t = YYAction (-373);
private yyaction553 t =   case yychar t of {
  '-' -> YYAction 57;
  '}' -> YYAction 616;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction554 t =   case yychar t of {
  '}' -> YYAction 617;
  _ -> (YYAction yyErr);
};
private yyaction555 t =   case yychar t of {
  '-' -> YYAction 57;
  '}' -> YYAction 618;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction556 t = YYAction (-420);
private yyaction557 t = YYAction (-421);
private yyaction558 t = YYAction (-415);
private yyaction559 t = YYAction (-452);
private yyaction560 t = YYAction (-413);
private yyaction561 t = YYAction (-414);
private yyaction562 t = YYAction (-453);
private yyaction563 t =   case yychar t of {
  '=' -> YYAction 620;
  '}' -> YYAction (-454);
  ',' -> YYAction (-454);
  _ ->   case yytoken t of {
    GETS -> YYAction 619;
    _ -> (YYAction yyErr);
  };
};
private yyaction564 t = YYAction (-450);
private yyaction565 t = YYAction (-188);
private yyaction566 t = YYAction (-179);
private yyaction567 t =   case yytoken t of {
    VARID -> YYAction 471;
    CONID -> YYAction 472;
    PUBLIC -> YYAction 567;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
private yyaction568 t = YYAction (-154);
private yyaction569 t =   case yychar t of {
  ')' -> YYAction 622;
  _ -> (YYAction yyErr);
};
private yyaction570 t =   case yychar t of {
  ')' -> YYAction (-161);
  ',' -> YYAction (-161);
  _ ->   case yytoken t of {
    VARID -> YYAction 471;
    CONID -> YYAction 472;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction571 t =   case yychar t of {
  ',' -> YYAction 624;
  ')' -> YYAction (-164);
  _ -> (YYAction yyErr);
};
private yyaction572 t = YYAction (-151);
private yyaction573 t = YYAction (-145);
private yyaction574 t = YYAction (-243);
private yyaction575 t =   case yychar t of {
  '-' -> YYAction 674;
  ';' -> YYAction 675;
  '{' -> YYAction 676;
  '}' -> YYAction 677;
  '.' -> YYAction 678;
  '(' -> YYAction 679;
  ')' -> YYAction 680;
  ',' -> YYAction 681;
  '|' -> YYAction 682;
  '[' -> YYAction 683;
  ']' -> YYAction 684;
  '?' -> YYAction 685;
  '!' -> YYAction 686;
  '=' -> YYAction 687;
  '\\' -> YYAction 688;
  _ ->   case yytoken t of {
    VARID -> YYAction 625;
    CONID -> YYAction 626;
    QVARID -> YYAction 627;
    QCONID -> YYAction 628;
    QUALIFIER -> YYAction 629;
    DOCUMENTATION -> YYAction 630;
    PACKAGE -> YYAction 631;
    IMPORT -> YYAction 632;
    INFIX -> YYAction 633;
    INFIXR -> YYAction 634;
    INFIXL -> YYAction 635;
    NATIVE -> YYAction 636;
    DATA -> YYAction 637;
    WHERE -> YYAction 638;
    CLASS -> YYAction 639;
    INSTANCE -> YYAction 640;
    ABSTRACT -> YYAction 641;
    TYPE -> YYAction 642;
    TRUE -> YYAction 643;
    FALSE -> YYAction 644;
    IF -> YYAction 645;
    THEN -> YYAction 646;
    ELSE -> YYAction 647;
    CASE -> YYAction 648;
    OF -> YYAction 649;
    DERIVE -> YYAction 650;
    LET -> YYAction 651;
    IN -> YYAction 652;
    DO -> YYAction 653;
    FORALL -> YYAction 654;
    PRIVATE -> YYAction 655;
    PROTECTED -> YYAction 656;
    PUBLIC -> YYAction 657;
    PURE -> YYAction 658;
    THROWS -> YYAction 659;
    MUTABLE -> YYAction 660;
    INTCONST -> YYAction 661;
    STRCONST -> YYAction 662;
    LONGCONST -> YYAction 663;
    FLTCONST -> YYAction 664;
    DBLCONST -> YYAction 665;
    CHRCONST -> YYAction 666;
    ARROW -> YYAction 667;
    DCOLON -> YYAction 668;
    GETS -> YYAction 669;
    EARROW -> YYAction 670;
    DOTDOT -> YYAction 671;
    SOMEOP -> YYAction 672;
    INTERPRET -> YYAction 673;
    _ -> (YYAction yyErr);
  };
};
private yyaction576 t = YYAction (-245);
private yyaction577 t = YYAction (-224);
private yyaction578 t = YYAction (-227);
private yyaction579 t = YYAction (-265);
private yyaction580 t = YYAction (-264);
private yyaction581 t =   case yychar t of {
  '(' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 579;
    SOMEOP -> YYAction 580;
    _ -> (YYAction yyErr);
  };
};
private yyaction582 t =   case yychar t of {
  ')' -> YYAction 692;
  _ -> (YYAction yyErr);
};
private yyaction583 t =   case yychar t of {
  ')' -> YYAction (-263);
  _ ->   case yytoken t of {
    ARROW -> YYAction 693;
    _ -> (YYAction yyErr);
  };
};
private yyaction584 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
};
private yyaction585 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
};
private yyaction586 t =   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
private yyaction587 t =   case yytoken t of {
    VARID -> YYAction 121;
    _ -> (YYAction yyErr);
  };
private yyaction588 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PRIVATE -> YYAction 584;
    PUBLIC -> YYAction 585;
    _ -> (YYAction yyErr);
  };
};
private yyaction589 t = YYAction (-334);
private yyaction590 t =   case yychar t of {
  '}' -> YYAction 699;
  _ -> (YYAction yyErr);
};
private yyaction591 t =   case yychar t of {
  ',' -> YYAction 701;
  '}' -> YYAction (-319);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 700;
    _ -> (YYAction yyErr);
  };
};
private yyaction592 t =   case yytoken t of {
    DCOLON -> YYAction 702;
    _ -> (YYAction yyErr);
  };
private yyaction593 t =   case yychar t of {
  ',' -> YYAction 703;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-326);
    _ -> (YYAction yyErr);
  };
};
private yyaction594 t = YYAction (-328);
private yyaction595 t = YYAction (-331);
private yyaction596 t = YYAction (-290);
private yyaction597 t = YYAction (-302);
private yyaction598 t = YYAction (-294);
private yyaction599 t = YYAction (-273);
private yyaction600 t =   case yychar t of {
  ')' -> YYAction 704;
  _ -> (YYAction yyErr);
};
private yyaction601 t =   case yychar t of {
  '|' -> YYAction 705;
  ')' -> YYAction (-246);
  _ -> (YYAction yyErr);
};
private yyaction602 t =   case yychar t of {
  ')' -> YYAction 706;
  _ -> (YYAction yyErr);
};
private yyaction603 t = YYAction (-389);
private yyaction604 t = YYAction (-395);
private yyaction605 t = YYAction (-377);
private yyaction606 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction607 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  '}' -> YYAction (-381);
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction608 t = YYAction (-378);
private yyaction609 t = YYAction (-396);
private yyaction610 t = YYAction (-397);
private yyaction611 t =   case yychar t of {
  ';' -> YYAction (-361);
  '}' -> YYAction (-361);
  ',' -> YYAction (-361);
  ']' -> YYAction (-361);
  _ ->   case yytoken t of {
    IN -> YYAction 524;
    _ -> (YYAction yyErr);
  };
};
private yyaction612 t = YYAction (-461);
private yyaction613 t = YYAction (-363);
private yyaction614 t = YYAction (-234);
private yyaction615 t = YYAction (-125);
private yyaction616 t = YYAction (-419);
private yyaction617 t = YYAction (-417);
private yyaction618 t = YYAction (-418);
private yyaction619 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction620 t =   case yychar t of {
  '-' -> YYAction 57;
  '(' -> YYAction 146;
  '[' -> YYAction 59;
  '?' -> YYAction 60;
  '!' -> YYAction 61;
  '\\' -> YYAction 62;
  '_' -> YYAction 63;
  _ ->   case yytoken t of {
    VARID -> YYAction 145;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 25;
    TRUE -> YYAction 38;
    FALSE -> YYAction 39;
    IF -> YYAction 40;
    CASE -> YYAction 41;
    LET -> YYAction 43;
    DO -> YYAction 44;
    INTCONST -> YYAction 49;
    STRCONST -> YYAction 50;
    LONGCONST -> YYAction 51;
    FLTCONST -> YYAction 52;
    DBLCONST -> YYAction 53;
    CHRCONST -> YYAction 54;
    REGEXP -> YYAction 55;
    BIGCONST -> YYAction 56;
    _ -> (YYAction yyErr);
  };
};
private yyaction621 t = YYAction (-163);
private yyaction622 t = YYAction (-153);
private yyaction623 t = YYAction (-162);
private yyaction624 t =   case yychar t of {
  ')' -> YYAction (-165);
  _ ->   case yytoken t of {
    VARID -> YYAction 471;
    CONID -> YYAction 472;
    PUBLIC -> YYAction 567;
    SOMEOP -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction625 t = YYAction (-48);
private yyaction626 t = YYAction (-49);
private yyaction627 t = YYAction (-50);
private yyaction628 t = YYAction (-51);
private yyaction629 t = YYAction (-52);
private yyaction630 t = YYAction (-53);
private yyaction631 t = YYAction (-54);
private yyaction632 t = YYAction (-55);
private yyaction633 t = YYAction (-56);
private yyaction634 t = YYAction (-57);
private yyaction635 t = YYAction (-58);
private yyaction636 t = YYAction (-59);
private yyaction637 t = YYAction (-60);
private yyaction638 t = YYAction (-61);
private yyaction639 t = YYAction (-62);
private yyaction640 t = YYAction (-63);
private yyaction641 t = YYAction (-64);
private yyaction642 t = YYAction (-65);
private yyaction643 t = YYAction (-66);
private yyaction644 t = YYAction (-67);
private yyaction645 t = YYAction (-68);
private yyaction646 t = YYAction (-69);
private yyaction647 t = YYAction (-70);
private yyaction648 t = YYAction (-71);
private yyaction649 t = YYAction (-72);
private yyaction650 t = YYAction (-73);
private yyaction651 t = YYAction (-74);
private yyaction652 t = YYAction (-75);
private yyaction653 t = YYAction (-76);
private yyaction654 t = YYAction (-77);
private yyaction655 t = YYAction (-78);
private yyaction656 t = YYAction (-79);
private yyaction657 t = YYAction (-80);
private yyaction658 t = YYAction (-81);
private yyaction659 t = YYAction (-82);
private yyaction660 t = YYAction (-83);
private yyaction661 t = YYAction (-84);
private yyaction662 t = YYAction (-85);
private yyaction663 t = YYAction (-86);
private yyaction664 t = YYAction (-87);
private yyaction665 t = YYAction (-88);
private yyaction666 t = YYAction (-89);
private yyaction667 t = YYAction (-90);
private yyaction668 t = YYAction (-91);
private yyaction669 t = YYAction (-92);
private yyaction670 t = YYAction (-93);
private yyaction671 t = YYAction (-94);
private yyaction672 t = YYAction (-95);
private yyaction673 t = YYAction (-96);
private yyaction674 t = YYAction (-105);
private yyaction675 t = YYAction (-106);
private yyaction676 t =   case yychar t of {
  '-' -> YYAction 674;
  ';' -> YYAction 675;
  '{' -> YYAction 676;
  '}' -> YYAction 710;
  '.' -> YYAction 678;
  '(' -> YYAction 679;
  ')' -> YYAction 680;
  ',' -> YYAction 681;
  '|' -> YYAction 682;
  '[' -> YYAction 683;
  ']' -> YYAction 684;
  '?' -> YYAction 685;
  '!' -> YYAction 686;
  '=' -> YYAction 687;
  '\\' -> YYAction 688;
  _ ->   case yytoken t of {
    VARID -> YYAction 625;
    CONID -> YYAction 626;
    QVARID -> YYAction 627;
    QCONID -> YYAction 628;
    QUALIFIER -> YYAction 629;
    DOCUMENTATION -> YYAction 630;
    PACKAGE -> YYAction 631;
    IMPORT -> YYAction 632;
    INFIX -> YYAction 633;
    INFIXR -> YYAction 634;
    INFIXL -> YYAction 635;
    NATIVE -> YYAction 636;
    DATA -> YYAction 637;
    WHERE -> YYAction 638;
    CLASS -> YYAction 639;
    INSTANCE -> YYAction 640;
    ABSTRACT -> YYAction 641;
    TYPE -> YYAction 642;
    TRUE -> YYAction 643;
    FALSE -> YYAction 644;
    IF -> YYAction 645;
    THEN -> YYAction 646;
    ELSE -> YYAction 647;
    CASE -> YYAction 648;
    OF -> YYAction 649;
    DERIVE -> YYAction 650;
    LET -> YYAction 651;
    IN -> YYAction 652;
    DO -> YYAction 653;
    FORALL -> YYAction 654;
    PRIVATE -> YYAction 655;
    PROTECTED -> YYAction 656;
    PUBLIC -> YYAction 657;
    PURE -> YYAction 658;
    THROWS -> YYAction 659;
    MUTABLE -> YYAction 660;
    INTCONST -> YYAction 661;
    STRCONST -> YYAction 662;
    LONGCONST -> YYAction 663;
    FLTCONST -> YYAction 664;
    DBLCONST -> YYAction 665;
    CHRCONST -> YYAction 666;
    ARROW -> YYAction 667;
    DCOLON -> YYAction 668;
    GETS -> YYAction 669;
    EARROW -> YYAction 670;
    DOTDOT -> YYAction 671;
    SOMEOP -> YYAction 672;
    INTERPRET -> YYAction 673;
    _ -> (YYAction yyErr);
  };
};
private yyaction677 t = YYAction (-47);
private yyaction678 t = YYAction (-103);
private yyaction679 t = YYAction (-101);
private yyaction680 t = YYAction (-102);
private yyaction681 t = YYAction (-97);
private yyaction682 t = YYAction (-98);
private yyaction683 t = YYAction (-99);
private yyaction684 t = YYAction (-100);
private yyaction685 t = YYAction (-104);
private yyaction686 t = YYAction (-107);
private yyaction687 t = YYAction (-108);
private yyaction688 t = YYAction (-109);
private yyaction689 t =   case yychar t of {
  '}' -> YYAction 712;
  _ -> (YYAction yyErr);
};
private yyaction690 t =   case yychar t of {
  '-' -> YYAction 674;
  ';' -> YYAction 675;
  '{' -> YYAction 676;
  '.' -> YYAction 678;
  '(' -> YYAction 679;
  ')' -> YYAction 680;
  ',' -> YYAction 681;
  '|' -> YYAction 682;
  '[' -> YYAction 683;
  ']' -> YYAction 684;
  '?' -> YYAction 685;
  '!' -> YYAction 686;
  '=' -> YYAction 687;
  '\\' -> YYAction 688;
  '}' -> YYAction (-110);
  _ ->   case yytoken t of {
    VARID -> YYAction 625;
    CONID -> YYAction 626;
    QVARID -> YYAction 627;
    QCONID -> YYAction 628;
    QUALIFIER -> YYAction 629;
    DOCUMENTATION -> YYAction 630;
    PACKAGE -> YYAction 631;
    IMPORT -> YYAction 632;
    INFIX -> YYAction 633;
    INFIXR -> YYAction 634;
    INFIXL -> YYAction 635;
    NATIVE -> YYAction 636;
    DATA -> YYAction 637;
    WHERE -> YYAction 638;
    CLASS -> YYAction 639;
    INSTANCE -> YYAction 640;
    ABSTRACT -> YYAction 641;
    TYPE -> YYAction 642;
    TRUE -> YYAction 643;
    FALSE -> YYAction 644;
    IF -> YYAction 645;
    THEN -> YYAction 646;
    ELSE -> YYAction 647;
    CASE -> YYAction 648;
    OF -> YYAction 649;
    DERIVE -> YYAction 650;
    LET -> YYAction 651;
    IN -> YYAction 652;
    DO -> YYAction 653;
    FORALL -> YYAction 654;
    PRIVATE -> YYAction 655;
    PROTECTED -> YYAction 656;
    PUBLIC -> YYAction 657;
    PURE -> YYAction 658;
    THROWS -> YYAction 659;
    MUTABLE -> YYAction 660;
    INTCONST -> YYAction 661;
    STRCONST -> YYAction 662;
    LONGCONST -> YYAction 663;
    FLTCONST -> YYAction 664;
    DBLCONST -> YYAction 665;
    CHRCONST -> YYAction 666;
    ARROW -> YYAction 667;
    DCOLON -> YYAction 668;
    GETS -> YYAction 669;
    EARROW -> YYAction 670;
    DOTDOT -> YYAction 671;
    SOMEOP -> YYAction 672;
    INTERPRET -> YYAction 673;
    _ -> (YYAction yyErr);
  };
};
private yyaction691 t =   case yychar t of {
  ')' -> YYAction 714;
  _ -> (YYAction yyErr);
};
private yyaction692 t = YYAction (-256);
private yyaction693 t =   case yychar t of {
  '(' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 579;
    SOMEOP -> YYAction 580;
    _ -> (YYAction yyErr);
  };
};
private yyaction694 t = YYAction (-330);
private yyaction695 t = YYAction (-329);
private yyaction696 t = YYAction (-333);
private yyaction697 t = YYAction (-332);
private yyaction698 t =   case yytoken t of {
    DCOLON -> YYAction 716;
    _ -> (YYAction yyErr);
  };
private yyaction699 t = YYAction (-314);
private yyaction700 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  '}' -> YYAction (-321);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 584;
    PUBLIC -> YYAction 585;
    _ -> (YYAction yyErr);
  };
};
private yyaction701 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  '}' -> YYAction (-320);
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 584;
    PUBLIC -> YYAction 585;
    _ -> (YYAction yyErr);
  };
};
private yyaction702 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction703 t =   case yychar t of {
  '?' -> YYAction 586;
  '!' -> YYAction 587;
  _ ->   case yytoken t of {
    VARID -> YYAction 121;
    PRIVATE -> YYAction 584;
    PUBLIC -> YYAction 585;
    _ -> (YYAction yyErr);
  };
};
private yyaction704 t = YYAction (-252);
private yyaction705 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction706 t = YYAction (-253);
private yyaction707 t = YYAction (-376);
private yyaction708 t = YYAction (-380);
private yyaction709 t = YYAction (-166);
private yyaction710 t =   case yychar t of {
  '-' -> YYAction 674;
  ';' -> YYAction 675;
  '{' -> YYAction 676;
  '.' -> YYAction 678;
  '(' -> YYAction 679;
  ')' -> YYAction 680;
  ',' -> YYAction 681;
  '|' -> YYAction 682;
  '[' -> YYAction 683;
  ']' -> YYAction 684;
  '?' -> YYAction 685;
  '!' -> YYAction 686;
  '=' -> YYAction 687;
  '\\' -> YYAction 688;
  '}' -> YYAction (-114);
  _ ->   case yytoken t of {
    VARID -> YYAction 625;
    CONID -> YYAction 626;
    QVARID -> YYAction 627;
    QCONID -> YYAction 628;
    QUALIFIER -> YYAction 629;
    DOCUMENTATION -> YYAction 630;
    PACKAGE -> YYAction 631;
    IMPORT -> YYAction 632;
    INFIX -> YYAction 633;
    INFIXR -> YYAction 634;
    INFIXL -> YYAction 635;
    NATIVE -> YYAction 636;
    DATA -> YYAction 637;
    WHERE -> YYAction 638;
    CLASS -> YYAction 639;
    INSTANCE -> YYAction 640;
    ABSTRACT -> YYAction 641;
    TYPE -> YYAction 642;
    TRUE -> YYAction 643;
    FALSE -> YYAction 644;
    IF -> YYAction 645;
    THEN -> YYAction 646;
    ELSE -> YYAction 647;
    CASE -> YYAction 648;
    OF -> YYAction 649;
    DERIVE -> YYAction 650;
    LET -> YYAction 651;
    IN -> YYAction 652;
    DO -> YYAction 653;
    FORALL -> YYAction 654;
    PRIVATE -> YYAction 655;
    PROTECTED -> YYAction 656;
    PUBLIC -> YYAction 657;
    PURE -> YYAction 658;
    THROWS -> YYAction 659;
    MUTABLE -> YYAction 660;
    INTCONST -> YYAction 661;
    STRCONST -> YYAction 662;
    LONGCONST -> YYAction 663;
    FLTCONST -> YYAction 664;
    DBLCONST -> YYAction 665;
    CHRCONST -> YYAction 666;
    ARROW -> YYAction 667;
    DCOLON -> YYAction 668;
    GETS -> YYAction 669;
    EARROW -> YYAction 670;
    DOTDOT -> YYAction 671;
    SOMEOP -> YYAction 672;
    INTERPRET -> YYAction 673;
    _ -> (YYAction yyErr);
  };
};
private yyaction711 t =   case yychar t of {
  '}' -> YYAction 723;
  _ -> (YYAction yyErr);
};
private yyaction712 t = YYAction (-46);
private yyaction713 t = YYAction (-111);
private yyaction714 t = YYAction (-266);
private yyaction715 t = YYAction (-262);
private yyaction716 t =   case yychar t of {
  '(' -> YYAction 244;
  '[' -> YYAction 245;
  _ ->   case yytoken t of {
    VARID -> YYAction 229;
    CONID -> YYAction 24;
    QUALIFIER -> YYAction 133;
    FORALL -> YYAction 298;
    _ -> (YYAction yyErr);
  };
};
private yyaction717 t = YYAction (-323);
private yyaction718 t = YYAction (-322);
private yyaction719 t = YYAction (-324);
private yyaction720 t = YYAction (-327);
private yyaction721 t = YYAction (-247);
private yyaction722 t = YYAction (-115);
private yyaction723 t =   case yychar t of {
  '-' -> YYAction 674;
  ';' -> YYAction 675;
  '{' -> YYAction 676;
  '.' -> YYAction 678;
  '(' -> YYAction 679;
  ')' -> YYAction 680;
  ',' -> YYAction 681;
  '|' -> YYAction 682;
  '[' -> YYAction 683;
  ']' -> YYAction 684;
  '?' -> YYAction 685;
  '!' -> YYAction 686;
  '=' -> YYAction 687;
  '\\' -> YYAction 688;
  '}' -> YYAction (-112);
  _ ->   case yytoken t of {
    VARID -> YYAction 625;
    CONID -> YYAction 626;
    QVARID -> YYAction 627;
    QCONID -> YYAction 628;
    QUALIFIER -> YYAction 629;
    DOCUMENTATION -> YYAction 630;
    PACKAGE -> YYAction 631;
    IMPORT -> YYAction 632;
    INFIX -> YYAction 633;
    INFIXR -> YYAction 634;
    INFIXL -> YYAction 635;
    NATIVE -> YYAction 636;
    DATA -> YYAction 637;
    WHERE -> YYAction 638;
    CLASS -> YYAction 639;
    INSTANCE -> YYAction 640;
    ABSTRACT -> YYAction 641;
    TYPE -> YYAction 642;
    TRUE -> YYAction 643;
    FALSE -> YYAction 644;
    IF -> YYAction 645;
    THEN -> YYAction 646;
    ELSE -> YYAction 647;
    CASE -> YYAction 648;
    OF -> YYAction 649;
    DERIVE -> YYAction 650;
    LET -> YYAction 651;
    IN -> YYAction 652;
    DO -> YYAction 653;
    FORALL -> YYAction 654;
    PRIVATE -> YYAction 655;
    PROTECTED -> YYAction 656;
    PUBLIC -> YYAction 657;
    PURE -> YYAction 658;
    THROWS -> YYAction 659;
    MUTABLE -> YYAction 660;
    INTCONST -> YYAction 661;
    STRCONST -> YYAction 662;
    LONGCONST -> YYAction 663;
    FLTCONST -> YYAction 664;
    DBLCONST -> YYAction 665;
    CHRCONST -> YYAction 666;
    ARROW -> YYAction 667;
    DCOLON -> YYAction 668;
    GETS -> YYAction 669;
    EARROW -> YYAction 670;
    DOTDOT -> YYAction 671;
    SOMEOP -> YYAction 672;
    INTERPRET -> YYAction 673;
    _ -> (YYAction yyErr);
  };
};
private yyaction724 t = YYAction (-325);
private yyaction725 t = YYAction (-113);
private reduce1 =  \(a,d,p)\w\b     -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce2 =  \(a,d,p)\w\_\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce3 =  \p\d\_ -> do {
                                                    changeST Global.{sub <- SubSt.{thisPos = yyline p}};
                                                    YYM.pure $ Program.Module ("Main", d, Nothing); }
;
private reduce4 =  \r -> do { g <- getST; pure (substRuntime g r) }
;
private reduce5 =  \t -> Token.value t 
;
private reduce6 =  \t -> Token.value t 
;
private reduce7 =  \t -> Token.value t 
;
private reduce8 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce9 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce10 =  \a\c   -> Token.value a ++ "." ++ c 
;
private reduce11 =  \x -> let s = Token.value x; i = length s - 1 in substr s 1 i 
;
private reduce12 =  \t     -> do {
                                                changeST Global.{sub <- SubSt.{
                                                    idKind <- insert (KeyTk t) (Left())}};
                                                YYM.pure (Token.value t, yyline t) }
;
private reduce13 =  \a\_\(c,p) -> (repljavakws (Token.value a) ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce14 =  \a\(c,p)   -> (Token.value a ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce15 =  \(nm, pos) -> (magicPack nm, pos) 
;
private reduce16 =  Token.value 
;
private reduce17 =  \b\a   -> (Token.value b ++ "\n" ++ a) 
;
private reduce18 =  \b\_\a -> (Token.value b ++ "\n" ++ a) 
;
private reduce19 =  \docu\p\b   -> (fst b, Just docu, snd b) 
;
private reduce20 =  \p\b        -> (fst b, Nothing, snd b) 
;
private reduce21 =  \docu\p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, Just docu, snd b) }
;
private reduce22 =  \p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, Nothing, snd b) }
;
private reduce23 =  \p\vs\v\qs\_ -> do {
                                                     g <- getST;
                                                     let {clause = unwords vs};
                                                     let {expected = ["inline" , "inline candidates"]};
                                                     when (clause `notElem` expected) do {
                                                        yyerror (yyline v) (show (head expected) ++ " expected instead of " ++ show clause)
                                                     };
                                                     changeST Global.{sub <- SubSt.{
                                                            toExport = qs}};
                                                     YYM.pure p;}
                                                 
;
private reduce24 =  Token.value 
;
private reduce25 =  single 
;
private reduce26 =  (:) 
;
private reduce28 =  const 
;
private reduce29 =  \a\_\b -> a ++ b 
;
private reduce30 =  single 
;
private reduce33 =  \_\ds -> map (updVis Private) ds 
;
private reduce34 =  \_\ds -> map (updVis Protected) ds 
;
private reduce35 =  \_\ds -> map (updVis Public) ds 
;
private reduce36 =  \_\(d::Def) -> [d.{ctrs <- map updCtr}] 
;
private reduce37 =  single 
;
private reduce38 =  single 
;
private reduce39 =  single 
;
private reduce41 =  \_\m\t\i\js -> ModDcl {pos = yyline m, extends=t, implements=i, code=js }
;
private reduce42 =  Nothing 
;
private reduce43 =  \a\b -> Just b 
;
private reduce44 =  [] 
;
private reduce45 =  \_\taus -> taus 
;
private reduce46 =  \_\_\c\_ -> c  
;
private reduce47 =  \_\_\_   -> [] 
;
private reduce110 =  single 
;
private reduce111 =  (:) 
;
private reduce112 =  \a\b\c -> a:(b++[c]) 
;
private reduce113 =  \a\b\c\d -> (a:b)++(c:d) 
;
private reduce114 =  \a\b -> [a,b] 
;
private reduce115 =  \a\b\cs -> a:b:cs 
;
private reduce116 =  \t -> DocDcl {pos = yyline t, text = t.value}
;
private reduce117 =  single 
;
private reduce118 =  single 
;
private reduce119 =  single 
;
private reduce120 =  single 
;
private reduce121 =  single 
;
private reduce124 =  const 
;
private reduce125 =  \d\_\ds -> d ++ ds 
;
private reduce127 =  single 
;
private reduce130 =  \_\ds -> map (updVis Private) ds 
;
private reduce131 =  \_\ds -> map (updVis Protected) ds 
;
private reduce132 =  \_\ds -> map (updVis Public) ds 
;
private reduce133 =  single 
;
private reduce134 =  (:) 
;
private reduce139 =  const 
;
private reduce140 =  \ds1\_\ds2 -> ds1 ++ ds2 
;
private reduce141 =  \i\b\c -> ImpDcl {pos=snd b, pack=fst b, imports=c, as=Nothing} 
;
private reduce142 =  \i\p\a\c\l -> do
            when (Token.value a != "as") do
                yyerror (yyline a) (show "as" ++ " expected instead of " ++ show (Token.value a))
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce143 =  \i\p\c\l -> do
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce144 =  linkAll 
;
private reduce145 =  \v\_\is\_ -> do
            when ( v.value `notElem` [ "except", "excluding", "without", "auÃer", "ohne", "hiding" ]) do
                yyerror (yyline v) (show "hiding" ++ " expected instead of " ++ show v.value)
            YYM.pure linkAll.{items=is}
        
;
private reduce146 =  \_\_    -> linkNone 
;
private reduce147 =  \_\is\_ -> linkNone.{items = is}  
;
private reduce148 =  \_\il   -> ImportList.{publik = true} il 
;
private reduce149 =  single 
;
private reduce150 =  \s\_ -> [s] 
;
private reduce151 =  liste  
;
private reduce152 =  \v        -> protoItem.{ name = v } 
;
private reduce153 =  \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} 
;
private reduce154 =  \v\_\_    -> protoItem.{ name = Simple v, members = Just []} 
;
private reduce155 =  \v        -> protoItem.{ name = v } 
;
private reduce156 =  \t        -> protoItem.{ name = opSname t } 
;
private reduce157 =  \v        -> protoItem.{ name = Simple v} 
;
private reduce158 =  \s      -> ImportItem.{alias = (enclosed . Token.value . SName.id . ImportItem.name) s} s
;
private reduce159 =  \s\a    -> ImportItem.{alias = enclosed (Token.value a)} s 
;
private reduce160 =  \_\s    -> ImportItem.export s 
;
private reduce161 =  \v     -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value v)} 
;
private reduce162 =  \v\a   -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value a)} 
;
private reduce163 =  \_\s   -> ImportItem.export s 
;
private reduce164 =  single 
;
private reduce165 =  \s\_ -> [s] 
;
private reduce166 =  liste  
;
private reduce169 =  \v -> do { op <- unqualified v; pure op }
;
private reduce172 =  Token.{tokid = VARID} 
;
private reduce173 =  Token.{tokid = VARID} 
;
private reduce174 =  Token.{tokid = VARID} 
;
private reduce175 =  Token.{tokid = VARID} 
;
private reduce176 =  Token.{tokid = VARID} 
;
private reduce177 =  Token.{tokid = VARID} 
;
private reduce178 =  single 
;
private reduce179 =  liste  
;
private reduce180 =  \n\t\v     -> With2 n t v
;
private reduce181 =  \t\v       -> With1 t v
;
private reduce182 =  \v         -> Simple v 
;
private reduce183 =  \n\t\v     -> With2 n t v
;
private reduce184 =  \t\v       -> With1 t v
;
private reduce185 =  \v         -> Simple v 
;
private reduce188 =  \n\t\v     -> With2 n t v
;
private reduce189 =  \t\v       -> With1 t v
;
private reduce190 =  Simple  
;
private reduce191 =  opSname 
;
private reduce195 =  \f\i -> do
                                    t <- infixop (yyline i) NOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce196 =  \f\i -> do
                                    t <- infixop (yyline i) LOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce197 =  \f\i -> do
                                    t <- infixop (yyline i) ROP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce198 =  Token.value 
;
private reduce199 =  Token.value 
;
private reduce200 =  Token.value 
;
private reduce201 =  single  
;
private reduce202 =  (:) 
;
private reduce203 =  \(def::Def)\o -> def.{ops = o}
;
private reduce204 =  \as\_\s -> map (annotation s) as 
;
private reduce206 =  \_\a\_ -> do unqualified a 
;
private reduce207 =  \_\a\_ -> a 
;
private reduce208 =  \_\a\_ -> a 
;
private reduce209 =  single   
;
private reduce210 =  liste    
;
private reduce211 =  \_\(d::Def) -> d.{isPure = true} 
;
private reduce216 =  \o -> do unqualified o 
;
private reduce218 =  \o -> do unqualified o >>= pure . _.value 
;
private reduce219 =  Token.value 
;
private reduce220 =  \f\j\g -> (f,j,Just g) 
;
private reduce221 =  \f\j -> (f,j,Nothing) 
;
private reduce222 =  \f\g -> (f,Token.value f, Just g)  
;
private reduce223 =  \f   -> (f,Token.value f, Nothing) 
;
private reduce224 =  \a\_\c -> (a, c) 
;
private reduce225 =  \a -> (a, [])    
;
private reduce226 =  single 
;
private reduce227 =  liste 
;
private reduce228 =  \_\(fr,jv,ga)\col\t ->
                    NatDcl {pos=yyline fr, vis=Public, name=fr.value,
                                                meth=jv, txs=t, isPure=false,
                                                gargs = ga, 
                                                doc=Nothing}
;
private reduce229 =  single 
;
private reduce230 =  (:)    
;
private reduce231 =  Token.value 
;
private reduce233 =  ForAll [] 
;
private reduce234 =  \_\bs\_\r      -> ForAll  [ (b,KVar) | b <- bs ]  r 
;
private reduce236 =  \dot -> do
                                        when (Token.value dot != "â¢") do
                                            yyerror (yyline dot)
                                                ("'.' expected instead of " ++ show dot.value)
                                        YYM.pure dot
                                    
;
private reduce237 =  \tau\t\rho -> do
                                        context <- tauToCtx tau
                                        YYM.pure (Rho.{context} rho)
                                     
;
private reduce239 =  RhoTau [] 
;
private reduce240 =  \a\_\b     -> case a of
                                            TSig s -> RhoFun [] s b 
                                            _ -> RhoFun [] (ForAll [] (RhoTau [] a)) b 
;
private reduce242 =  TSig 
;
private reduce243 =  \a\f\b ->  case a of
                            TSig s -> TSig (ForAll [] (RhoFun [] s (RhoTau [] b))) 
                            _      -> TApp (TApp (TCon (yyline f) (fromBase f.{tokid=CONID, value="->"})) a) b 
                         
;
private reduce244 =  single 
;
private reduce245 =  liste  
;
private reduce246 =  single 
;
private reduce247 =  liste  
;
private reduce248 =  \taus -> Tau.mkapp (head taus) (tail taus) 
;
private reduce250 =  \(tn::SName) -> TCon (yyline tn.id) tn
;
private reduce251 =  \_\t\_ -> t 
;
private reduce252 = \_\t\(c::Token)\ts\_ ->
                            let
                                tus = t:ts;
                                i = length tus;
                                tname = fromBase c.{tokid=CONID, value=tuple i}
                            in  (TCon (yyline c) tname).mkapp tus
                        
;
private reduce253 =  \_\t\e\ts\_ -> mkEither (yyline e) t ts 
;
private reduce254 = \a\t\_ -> TApp (TCon (yyline a)
                                             (fromBase a.{tokid=CONID, value="[]"}))
                                        t 
;
private reduce255 =  \n         -> TVar (yyline n) KVar (Token.value n)  
;
private reduce256 =  \_\n\_\k\_ -> TVar (yyline n) k    (Token.value n)  
;
private reduce258 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="[]"} 
;
private reduce259 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="()"} 
;
private reduce260 =  \(z::Token)\n\_ -> fromBase z.{tokid=CONID, value=tuple (n+1)} 
;
private reduce261 =  \_\(a::Token)\_ -> fromBase a.{tokid=CONID, value="->"} 
;
private reduce262 =  \a\_\c -> KApp a c 
;
private reduce264 =  \star -> do
                                let w = Token.value star
                                when  (w != "*") do
                                    yyerror (yyline star) 
                                            ("expected `*`, found `" ++ w ++ "`") 
                                pure KType
                            
;
private reduce265 =  \v -> do
                                let w = Token.value v
                                if w == "generic" then pure KGen
                                else do
                                    yyerror (yyline v) 
                                            ("expected `generic` instead of `" ++ w ++ "`")
                                    pure KType
                            
;
private reduce266 =  \_\b\_ -> b 
;
private reduce267 =  \c\v -> Ctx {pos=Pos (SName.id c) v.pos.last, cname=c, tau=v} 
;
private reduce268 =  single 
;
private reduce269 =  \c\_ -> [c] 
;
private reduce270 =  liste  
;
private reduce271 =  single 
;
private reduce272 =  \_\x\_ -> x 
;
private reduce273 = 
        \_\ctxs\_\c\v\defs -> do
            sups <- classContext (Token.value c) ctxs (v::TauS).var
            pure ClaDcl{
                    pos = yyline c, 
                    vis = Public,
                    name = Token.value c,
                    clvar = v,
                    supers = sups,
                    defs,
                    doc = Nothing}
    
;
private reduce274 = 
        \kw\ctxs\defs -> case ctxs of
            Ctx{pos,cname,tau}:rest -> do
                unless (null rest) 
                    (yyerror (yyline kw) "classname missing after contexts")
                when (SName.{ty?} cname)
                    (yyerror (yyline cname.id) "classname must not be qualified") 
                pure ClaDcl {pos, vis = Public, name=cname.id.value,
                               clvar = tau, supers = [],
                               defs, doc = Nothing}
            _ -> Prelude.error "fatal: empty ccontext (cannot happen)" 
    
;
private reduce275 =  \c\t -> Ctx {pos=Pos (SName.id c) t.getpos.last, cname=c, tau=t} 
;
private reduce276 =  single 
;
private reduce277 =  \c\_ -> [c] 
;
private reduce278 =  liste  
;
private reduce279 =  single 
;
private reduce280 =  \_\x\_ -> x 
;
private reduce281 = 
        \ctxs\ea\cls\tau -> InsDcl {
            pos = yyline ea,
            vis = Public,
            clas = cls,
            typ = ForAll [] (RhoTau ctxs tau),
            defs = [],
            doc = Nothing}
    
;
private reduce282 = 
        \ctxs -> case ctxs of
            Ctx{pos, cname, tau}:rest -> do
                unless (null rest) 
                        (yyerror pos "classname missing after instance contexts")
                pure InsDcl {
                    pos, vis = Public, clas = cname,
                    typ = ForAll [] (RhoTau [] tau),
                    defs = [],
                    doc = Nothing,
                    }
            _ -> Prelude.error "fatal: empty instance context"
    
;
private reduce283 = 
        \ins\head\defs -> (head::Def).{defs, pos = yyline ins}
    
;
private reduce284 =  
        \d\(i::Def) -> DrvDcl {pos = yyline d, vis = Public, clas=i.clas, typ=i.typ, doc=Nothing}
    
;
private reduce285 =  \def\defs -> (def::Def).{defs = defs} 
;
private reduce286 =  \_\_ -> (true, false)  
;
private reduce287 =  \_\_ -> (false, true)  
;
private reduce288 =  \_   -> (false, false) 
;
private reduce289 =  \x     ->  (x, Nothing) 
;
private reduce290 =  \x\gs  ->  (x, Just gs) 
;
private reduce291 =  \_\ts\_   -> ts 
;
private reduce292 =  \_\_      -> [] 
;
private reduce293 = 
        \dat\d\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=[], defs=[],
                                    gargs,  
                                    isPure = fst pur, isMutable = snd pur, 
                                    doc=Nothing}
    
;
private reduce294 = 
        \dat\d\ds\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=ds, defs=[],
                                    gargs, 
                                    isPure = fst pur, isMutable = snd pur,
                                    doc=Nothing}
    
;
private reduce295 = 
        \dat\d\ds\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=ds, ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce296 = 
        \dat\d\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=[], ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce297 = 
        \dat\d\ds\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=ds, ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce298 = 
        \dat\d\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=[], ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce299 =  single 
;
private reduce300 =  (:) 
;
private reduce301 =  single 
;
private reduce302 =  liste  
;
private reduce304 =  \dc\doc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce305 =  \doc\dc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce307 =  \_\dc -> (dc::DConS).{vis = Public}    
;
private reduce308 =  \_\dc -> (dc::DConS).{vis = Private}   
;
private reduce309 =  \_\dc -> (dc::DConS).{vis = Protected} 
;
private reduce310 =  \_\dcon ->  DCon.{ -- strict=true,
                                                    flds <-map ConField.{strict=true}}  dcon 
;
private reduce311 =  \_\dcon ->  DCon.{ -- strict=false,
                                                    flds <-map ConField.{strict=false}} dcon 
;
private reduce313 =  \c        -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=[], doc=Nothing } 
;
private reduce314 =  \c\_\fs\_ -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce315 =  \c\fs     -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce316 =  \taus -> do
                                    g <- getST
                                    let field  = Field Position.null Nothing Nothing Public false
                                                    â¢ toSig
                                        toSig (TSig s) = s
                                        toSig tau      = (ForAll [] . RhoTau []) tau
                                    pure (map field taus)
                                
;
private reduce317 =  single 
;
private reduce318 =  (:) 
;
private reduce320 =  const 
;
private reduce321 =  \cs\(d::Token) -> map ConField.{doc <- addDoc d.value} cs 
;
private reduce322 =  \as\c\ls -> as ++ ls 
;
private reduce323 =  \as\(d::Token)\ls -> map ConField.{doc <- addDoc d.value} as ++ ls 
;
private reduce324 =  \vs\_\t -> [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce325 =  \(d::String)\vs\_\t ->
                                        map ConField.{doc=Just d}
                                            [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce326 =  single 
;
private reduce327 =  liste  
;
private reduce329 =  \_ \(pos,name,vis,strict) -> (pos,name,Public, strict) 
;
private reduce330 =  \_ \(pos,name,vis,strict) -> (pos,name,Private,strict) 
;
private reduce332 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, true) 
;
private reduce333 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, false) 
;
private reduce334 =  \v -> do
                                    g <- getST
                                    pure (yyline v, v.value, Public, false)
                                
;
private reduce335 =  \t\i   \_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=[], 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce336 =  \t\i\vs\_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=vs, 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce337 =  [] 
;
private reduce338 =  \_\_\_ -> []
;
private reduce339 =  \_\_\defs\_ -> defs
;
private reduce340 =  \_\_\_ -> []
;
private reduce341 =  \_\_\defs\_ -> defs
;
private reduce342 =  \(ex,pats)\eq\expr -> fundef ex pats expr 
;
private reduce343 =  \(ex,pats)\gds -> fungds ex pats gds 
;
private reduce344 =  \fdefs\defs ->
        case fdefs of
            [fd] | FunDcl {expr=x} <- fd = YYM.pure [fd.{expr = Let defs x}]
            _ = do
                yyerror (head fdefs).pos ("illegal function definition, where { ... } after annotation?")
                YYM.pure fdefs
    
;
private reduce345 =  \x -> do
                                            x <- funhead x
                                            YYM.pure x
                                    
;
private reduce346 =  \x ->  Lit (yyline x) LBool "true" 
;
private reduce347 =  \x ->  Lit (yyline x) LBool "false"
;
private reduce348 =  \x ->  do litchar x 
;
private reduce349 =  \x ->  Lit (yyline x) LString (Token.value x) 
;
private reduce350 =  \x ->  Lit (yyline x) LInt    (Token.value x) 
;
private reduce351 =  \x ->  Lit (yyline x) LBig    (bignum x)      
;
private reduce352 =  \x ->  Lit (yyline x) LLong   (Token.value x) 
;
private reduce353 =  \x ->  Lit (yyline x) LFloat  (Token.value x) 
;
private reduce354 =  \x ->  Lit (yyline x) LDouble (Token.value x) 
;
private reduce355 =  \x ->  do litregexp x 
;
private reduce360 =  \e\t\x -> do { (ex,pat) <- funhead e; YYM.pure (Right (fundef ex pat x)) }
;
private reduce361 =  \_\_\ds\_ -> Right ds 
;
private reduce362 =  single 
;
private reduce363 =  liste  
;
private reduce364 =  (const . single) 
;
private reduce365 =  single 
;
private reduce366 =  (const . single) 
;
private reduce367 =  liste 
;
private reduce368 =  \e     ->  Left (Nothing, e) 
;
private reduce369 =  \p\g\e ->  Left (Just p,  e) 
;
private reduce370 =  single 
;
private reduce371 =  liste  
;
private reduce372 =  (const . single) 
;
private reduce373 =  \a\qs\_\x  -> (yyline a, qs, x) 
;
private reduce374 =  single 
;
private reduce375 =  (:) 
;
private reduce376 =  \p\a\e ->
                                        CAlt {pat=p, ex=e}
;
private reduce377 =  \p\gs -> guardedalt p gs
;
private reduce378 = \(calt::CAltS)\defs ->
                                        let
                                            nx = Let defs calt.ex;
                                        in calt.{ ex = nx } 
;
private reduce379 =  single 
;
private reduce380 =  liste  
;
private reduce381 =  \a\_    ->  [a] 
;
private reduce382 =  \_\ps\b  -> foldr (\p\x -> Lam p x false) b ps 
;
private reduce384 =  \_\x -> x 
;
private reduce385 =  \x\_\t  -> Ann {ex = x, typ=t} 
;
private reduce387 =  flip const 
;
private reduce389 =  flip const 
;
private reduce391 =  mkapp 
;
private reduce392 =  mkapp 
;
private reduce393 =  \m\x -> nApp (Vbl (contextName m "negate")) x
;
private reduce395 =  \_\c\_\t\_\e  -> Ifte c t e
;
private reduce396 =  \_\e\_\_\as\_ -> Case CNormal e as
;
private reduce397 =  \_\_\ds\_\_\e -> Let ds e
;
private reduce399 =  underscore 
;
private reduce401 =  nApp 
;
private reduce403 =  \u\p -> nApp (Vbl {name=Simple u}) p
;
private reduce404 =  single 
;
private reduce405 =  (:) 
;
private reduce406 =  With1 
;
private reduce407 =  With2 
;
private reduce409 =  \d\_\defs\_   -> do mkMonad (yyline d) defs 
;
private reduce410 =  \p\_\(v::Token) -> umem p v id
;
private reduce411 =  \p\_\v -> do {v <- unqualified v;
                                                    YYM.pure (umem p v id)}
;
private reduce412 =  \p\_\v -> umem p v id
;
private reduce413 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("has$" ++)}) 
;
private reduce414 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("upd$" ++)}) 
;
private reduce415 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("chg$" ++)}) 
;
private reduce416 =  \q\(p::Token)\fs\_ -> let {
                        -- n   = Simple q;
                        flp = Vbl (wellKnown p "flip");
                        bul = Vbl (contextName p "â¢");
                        c []     = undefined;
                        c (f:fs) = fold cex (chup f) fs where {
                            cex x f = bul `nApp` x `nApp` chup f;
                            chup :: (Token, Bool, Exp) -> Exp;
                            chup (r, true, e)  = flp `nApp` Vbl  (q r.{value <- ("chg$"++)}) `nApp` e;
                            chup (r, false, e) = flp `nApp` Vbl  (q r.{value <- ("upd$"++)}) `nApp` e;
                                      }} in c fs 
;
private reduce417 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id
;
private reduce418 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id
;
private reduce419 = \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id
;
private reduce420 =  \x\(p::Token)\_\fs\_ ->
                                let {
                        u x [] = x;
                        u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                        u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                } in u x fs
;
private reduce421 =  \p\t\_\v\_  ->
                                        let elem = t.{tokid = VARID, value = "elemAt"}
                                        in Vbl {name=Simple elem}
                                            `nApp` p
                                            `nApp` v
;
private reduce422 =  \x   -> Vbl {name=x} 
;
private reduce424 =  \t   -> Vbl {name = Simple t.{tokid=VARID, value="_"}} 
;
private reduce425 =  \qc  -> Con {name=qc} 
;
private reduce426 =  \qc\_\z    -> ConFS {name=qc, fields=[]}
;
private reduce427 =  \qc\_\fs\z -> ConFS {name=qc, fields=fs}
;
private reduce428 =  \z\_   -> Con (fromBase z.{tokid=CONID, value="()"})
;
private reduce429 =  \z\n\_ -> Con (fromBase z.{tokid=CONID, value=tuple (n+1)})
;
private reduce430 =  \_\x\_ -> Vbl {name=Simple x} 
;
private reduce431 =  \_\o\_ -> (varcon o) (opSname o)
;
private reduce432 =  \_\m\_ -> (Vbl (fromBase m)) 
;
private reduce433 =  \z\o\x\_ ->  let -- (+1) --> flip (+) 1
                                        flp = Vbl (contextName z "flip") 
                                        op  = (varcon o) (opSname o)
                                        ex = nApp (nApp flp op) x
                                    in ex
;
private reduce434 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (opSname o)) x
;
private reduce435 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (Simple o)) x
;
private reduce436 =  \a\e\x\es\_ -> fold nApp (Con 
                                                                   (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
;
private reduce437 =  \a\e\(x::Token)\es\_ -> do
                                            g <- getST
                                            E.warn (yyline x) (PP.text "strict tuples are deprecated, use ',' to separate elements")
                                            pure (
                                                fold nApp 
                                                    (Con 
                                                        (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                        )
                                                    (e:es)
                                              )
                                        
;
private reduce438 =  \_\x\_ -> Term x 
;
private reduce439 =  \a\z ->  Con (fromBase z.{tokid=CONID, value="[]"})
;
private reduce440 =  \b\es\z -> 
                                                foldr (\a\as -> nApp (nApp (Con (fromBase b.{tokid=CONID, value=":"})) a) as)
                                                       (Con (fromBase z.{tokid=CONID, value="[]"}))
                                                       es
;
private reduce441 =  \a\b\c\d   -> do mkEnumFrom   a b c d
;
private reduce442 =  \a\b\c\d\e -> do mkEnumFromTo a b c d e
;
private reduce443 =  \(a::Token)\e\b\qs\(z::Token) -> do {
                let {nil = z.{tokid=CONID, value="[]"}};
                listComprehension (yyline b) e qs
                                            (Con {name = fromBase nil})
                                    }
;
private reduce444 =  const 1 
;
private reduce445 =  ((+) . const 1) 
;
private reduce446 =  single 
;
private reduce447 =  \a\c\ls ->
                                        if elemBy (using fst) a ls then do {
                                                E.warn (yyline c) (msgdoc ("field `" ++ fst a
                                                    ++ "` should appear only once."));
                                                YYM.pure ls
                                            } else
                                                YYM.pure (a:ls)
                                    
;
private reduce448 =  (const . single) 
;
private reduce449 =  single 
;
private reduce450 =  liste  
;
private reduce451 =  (const . single) 
;
private reduce452 =  \s\_\x ->  (s, true,  x) 
;
private reduce453 =  \s\_\x ->  (s, false, x) 
;
private reduce454 =  \s     ->  (s, false, Vbl (Simple s)) 
;
private reduce455 =  \s\_\x ->  (Token.value s, x) 
;
private reduce456 =  \s     ->  (s.value, Vbl (Simple s)) 
;
private reduce457 =  single 
;
private reduce458 =  liste  
;
private reduce459 =  (const . single) 
;
private reduce460 =  single 
;
private reduce461 =  liste 
;
private reduce462 =  (const . single) 
;
yyrule 1 = "module: moduleclause ';' definitions";
yyrule 2 = "module: moduleclause WHERE '{' definitions '}'";
yyrule 3 = "module: '{' definitions '}'";
yyrule 4 = "nativename: rawnativename";
yyrule 5 = "rawnativename: VARID";
yyrule 6 = "rawnativename: CONID";
yyrule 7 = "rawnativename: PACKAGE";
yyrule 8 = "rawnativename: VARID '.' rawnativename";
yyrule 9 = "rawnativename: PACKAGE '.' rawnativename";
yyrule 10 = "rawnativename: QUALIFIER rawnativename";
yyrule 11 = "rawnativename: STRCONST";
yyrule 12 = "modulename1: CONID";
yyrule 13 = "modulename1: varidkw '.' modulename1";
yyrule 14 = "modulename1: QUALIFIER modulename1";
yyrule 15 = "modulename: modulename1";
yyrule 16 = "docs: DOCUMENTATION";
yyrule 17 = "docs: DOCUMENTATION docs";
yyrule 18 = "docs: DOCUMENTATION ';' docs";
yyrule 19 = "moduleclause: docs PACKAGE modulename";
yyrule 20 = "moduleclause: PACKAGE modulename";
yyrule 21 = "moduleclause: docs PROTECTED PACKAGE modulename";
yyrule 22 = "moduleclause: PROTECTED PACKAGE modulename";
yyrule 23 = "moduleclause: moduleclause words '(' qvarids ')'";
yyrule 24 = "word: VARID";
yyrule 25 = "words: word";
yyrule 26 = "words: word words";
yyrule 27 = "definitions: definition";
yyrule 28 = "definitions: definition ';'";
yyrule 29 = "definitions: definition ';' definitions";
yyrule 30 = "definition: documentation";
yyrule 31 = "definition: topdefinition";
yyrule 32 = "definition: visibledefinition";
yyrule 33 = "visibledefinition: PRIVATE publicdefinition";
yyrule 34 = "visibledefinition: PROTECTED publicdefinition";
yyrule 35 = "visibledefinition: PUBLIC publicdefinition";
yyrule 36 = "visibledefinition: ABSTRACT datadef";
yyrule 37 = "topdefinition: import";
yyrule 38 = "topdefinition: infix";
yyrule 39 = "topdefinition: moduledefinition";
yyrule 40 = "topdefinition: publicdefinition";
yyrule 41 = "moduledefinition: NATIVE PACKAGE typeclause interfaces wheretokens";
yyrule 42 = "typeclause: <empty>";
yyrule 43 = "typeclause: TYPE tau";
yyrule 44 = "interfaces: <empty>";
yyrule 45 = "interfaces: CLASS tauSC";
yyrule 46 = "wheretokens: WHERE '{' jtokens '}'";
yyrule 47 = "wheretokens: WHERE '{' '}'";
yyrule 48 = "jtoken: VARID";
yyrule 49 = "jtoken: CONID";
yyrule 50 = "jtoken: QVARID";
yyrule 51 = "jtoken: QCONID";
yyrule 52 = "jtoken: QUALIFIER";
yyrule 53 = "jtoken: DOCUMENTATION";
yyrule 54 = "jtoken: PACKAGE";
yyrule 55 = "jtoken: IMPORT";
yyrule 56 = "jtoken: INFIX";
yyrule 57 = "jtoken: INFIXR";
yyrule 58 = "jtoken: INFIXL";
yyrule 59 = "jtoken: NATIVE";
yyrule 60 = "jtoken: DATA";
yyrule 61 = "jtoken: WHERE";
yyrule 62 = "jtoken: CLASS";
yyrule 63 = "jtoken: INSTANCE";
yyrule 64 = "jtoken: ABSTRACT";
yyrule 65 = "jtoken: TYPE";
yyrule 66 = "jtoken: TRUE";
yyrule 67 = "jtoken: FALSE";
yyrule 68 = "jtoken: IF";
yyrule 69 = "jtoken: THEN";
yyrule 70 = "jtoken: ELSE";
yyrule 71 = "jtoken: CASE";
yyrule 72 = "jtoken: OF";
yyrule 73 = "jtoken: DERIVE";
yyrule 74 = "jtoken: LET";
yyrule 75 = "jtoken: IN";
yyrule 76 = "jtoken: DO";
yyrule 77 = "jtoken: FORALL";
yyrule 78 = "jtoken: PRIVATE";
yyrule 79 = "jtoken: PROTECTED";
yyrule 80 = "jtoken: PUBLIC";
yyrule 81 = "jtoken: PURE";
yyrule 82 = "jtoken: THROWS";
yyrule 83 = "jtoken: MUTABLE";
yyrule 84 = "jtoken: INTCONST";
yyrule 85 = "jtoken: STRCONST";
yyrule 86 = "jtoken: LONGCONST";
yyrule 87 = "jtoken: FLTCONST";
yyrule 88 = "jtoken: DBLCONST";
yyrule 89 = "jtoken: CHRCONST";
yyrule 90 = "jtoken: ARROW";
yyrule 91 = "jtoken: DCOLON";
yyrule 92 = "jtoken: GETS";
yyrule 93 = "jtoken: EARROW";
yyrule 94 = "jtoken: DOTDOT";
yyrule 95 = "jtoken: SOMEOP";
yyrule 96 = "jtoken: INTERPRET";
yyrule 97 = "jtoken: ','";
yyrule 98 = "jtoken: '|'";
yyrule 99 = "jtoken: '['";
yyrule 100 = "jtoken: ']'";
yyrule 101 = "jtoken: '('";
yyrule 102 = "jtoken: ')'";
yyrule 103 = "jtoken: '.'";
yyrule 104 = "jtoken: '?'";
yyrule 105 = "jtoken: '-'";
yyrule 106 = "jtoken: ';'";
yyrule 107 = "jtoken: '!'";
yyrule 108 = "jtoken: '='";
yyrule 109 = "jtoken: '\\'";
yyrule 110 = "jtokens: jtoken";
yyrule 111 = "jtokens: jtoken jtokens";
yyrule 112 = "jtokens: '{' jtokens '}'";
yyrule 113 = "jtokens: '{' jtokens '}' jtokens";
yyrule 114 = "jtokens: '{' '}'";
yyrule 115 = "jtokens: '{' '}' jtokens";
yyrule 116 = "documentation: DOCUMENTATION";
yyrule 117 = "publicdefinition: typedef";
yyrule 118 = "publicdefinition: datadef";
yyrule 119 = "publicdefinition: classdef";
yyrule 120 = "publicdefinition: instdef";
yyrule 121 = "publicdefinition: derivedef";
yyrule 122 = "publicdefinition: localdef";
yyrule 123 = "localdefs: dplocaldef";
yyrule 124 = "localdefs: dplocaldef ';'";
yyrule 125 = "localdefs: dplocaldef ';' localdefs";
yyrule 126 = "localdef: annotation";
yyrule 127 = "localdef: nativedef";
yyrule 128 = "localdef: fundef";
yyrule 129 = "plocaldef: localdef";
yyrule 130 = "plocaldef: PRIVATE localdef";
yyrule 131 = "plocaldef: PROTECTED localdef";
yyrule 132 = "plocaldef: PUBLIC localdef";
yyrule 133 = "dplocaldef: documentation";
yyrule 134 = "dplocaldef: documentation dplocaldef";
yyrule 135 = "dplocaldef: plocaldef";
yyrule 136 = "letdef: annotation";
yyrule 137 = "letdef: fundef";
yyrule 138 = "letdefs: letdef";
yyrule 139 = "letdefs: letdef ';'";
yyrule 140 = "letdefs: letdef ';' letdefs";
yyrule 141 = "import: IMPORT modulename importliste";
yyrule 142 = "import: IMPORT modulename VARID CONID importliste";
yyrule 143 = "import: IMPORT modulename CONID importliste";
yyrule 144 = "importliste: <empty>";
yyrule 145 = "importliste: varid '(' importspecs ')'";
yyrule 146 = "importliste: '(' ')'";
yyrule 147 = "importliste: '(' importspecs ')'";
yyrule 148 = "importliste: PUBLIC importliste";
yyrule 149 = "importspecs: importspec";
yyrule 150 = "importspecs: importspec ','";
yyrule 151 = "importspecs: importspec ',' importspecs";
yyrule 152 = "importitem: qvarid";
yyrule 153 = "importitem: CONID '(' memspecs ')'";
yyrule 154 = "importitem: CONID '(' ')'";
yyrule 155 = "importitem: qconid";
yyrule 156 = "importitem: operator";
yyrule 157 = "importitem: unop";
yyrule 158 = "importspec: importitem";
yyrule 159 = "importspec: importitem alias";
yyrule 160 = "importspec: PUBLIC importspec";
yyrule 161 = "memspec: alias";
yyrule 162 = "memspec: alias alias";
yyrule 163 = "memspec: PUBLIC memspec";
yyrule 164 = "memspecs: memspec";
yyrule 165 = "memspecs: memspec ','";
yyrule 166 = "memspecs: memspec ',' memspecs";
yyrule 167 = "alias: VARID";
yyrule 168 = "alias: CONID";
yyrule 169 = "alias: operator";
yyrule 170 = "varid: VARID";
yyrule 171 = "varidkw: VARID";
yyrule 172 = "varidkw: DATA";
yyrule 173 = "varidkw: TYPE";
yyrule 174 = "varidkw: NATIVE";
yyrule 175 = "varidkw: PURE";
yyrule 176 = "varidkw: PACKAGE";
yyrule 177 = "varidkw: IMPORT";
yyrule 178 = "qvarids: qvarop";
yyrule 179 = "qvarids: qvarop ',' qvarids";
yyrule 180 = "qvarid: QUALIFIER QUALIFIER varop";
yyrule 181 = "qvarid: QUALIFIER varop";
yyrule 182 = "qvarid: VARID";
yyrule 183 = "qconid: QUALIFIER QUALIFIER CONID";
yyrule 184 = "qconid: QUALIFIER CONID";
yyrule 185 = "qconid: CONID";
yyrule 186 = "varop: VARID";
yyrule 187 = "varop: unop";
yyrule 188 = "qvarop: QUALIFIER QUALIFIER varop";
yyrule 189 = "qvarop: QUALIFIER varop";
yyrule 190 = "qvarop: varop";
yyrule 191 = "qvarop: operator";
yyrule 192 = "operator: SOMEOP";
yyrule 193 = "unop: '!'";
yyrule 194 = "unop: '?'";
yyrule 195 = "fixity: INFIX INTCONST";
yyrule 196 = "fixity: INFIXL INTCONST";
yyrule 197 = "fixity: INFIXR INTCONST";
yyrule 198 = "opstring: operator";
yyrule 199 = "opstring: VARID";
yyrule 200 = "opstring: '-'";
yyrule 201 = "operators: opstring";
yyrule 202 = "operators: opstring operators";
yyrule 203 = "infix: fixity operators";
yyrule 204 = "annotation: annoitems DCOLON sigma";
yyrule 205 = "annoitem: varid";
yyrule 206 = "annoitem: '(' operator ')'";
yyrule 207 = "annoitem: '(' unop ')'";
yyrule 208 = "annoitem: '(' '-' ')'";
yyrule 209 = "annoitems: annoitem";
yyrule 210 = "annoitems: annoitem ',' annoitems";
yyrule 211 = "nativedef: PURE impurenativedef";
yyrule 212 = "nativedef: impurenativedef";
yyrule 213 = "fitem: annoitem";
yyrule 214 = "fitem: unop";
yyrule 215 = "fitem: '-'";
yyrule 216 = "fitem: operator";
yyrule 217 = "jitem: nativename";
yyrule 218 = "jitem: operator";
yyrule 219 = "jitem: unop";
yyrule 220 = "methodspec: fitem jitem gargs";
yyrule 221 = "methodspec: fitem jitem";
yyrule 222 = "methodspec: fitem gargs";
yyrule 223 = "methodspec: fitem";
yyrule 224 = "sigex: sigma THROWS tauSC";
yyrule 225 = "sigex: sigma";
yyrule 226 = "sigexs: sigex";
yyrule 227 = "sigexs: sigex '|' sigexs";
yyrule 228 = "impurenativedef: NATIVE methodspec DCOLON sigexs";
yyrule 229 = "boundvars: boundvar";
yyrule 230 = "boundvars: boundvar boundvars";
yyrule 231 = "boundvar: VARID";
yyrule 232 = "sigma: forall";
yyrule 233 = "sigma: rho";
yyrule 234 = "forall: FORALL boundvars mbdot rho";
yyrule 235 = "mbdot: '.'";
yyrule 236 = "mbdot: SOMEOP";
yyrule 237 = "rho: tapp EARROW rhofun";
yyrule 238 = "rho: rhofun";
yyrule 239 = "rhofun: tapp";
yyrule 240 = "rhofun: tapp ARROW rhofun";
yyrule 241 = "tau: tapp";
yyrule 242 = "tau: forall";
yyrule 243 = "tau: tapp ARROW tau";
yyrule 244 = "tauSC: tau";
yyrule 245 = "tauSC: tau ',' tauSC";
yyrule 246 = "tauSB: tau";
yyrule 247 = "tauSB: tau '|' tauSB";
yyrule 248 = "tapp: simpletypes";
yyrule 249 = "simpletype: tyvar";
yyrule 250 = "simpletype: tyname";
yyrule 251 = "simpletype: '(' tau ')'";
yyrule 252 = "simpletype: '(' tau ',' tauSC ')'";
yyrule 253 = "simpletype: '(' tau '|' tauSB ')'";
yyrule 254 = "simpletype: '[' tau ']'";
yyrule 255 = "tyvar: VARID";
yyrule 256 = "tyvar: '(' VARID DCOLON kind ')'";
yyrule 257 = "tyname: qconid";
yyrule 258 = "tyname: '[' ']'";
yyrule 259 = "tyname: '(' ')'";
yyrule 260 = "tyname: '(' commata ')'";
yyrule 261 = "tyname: '(' ARROW ')'";
yyrule 262 = "kind: simplekind ARROW kind";
yyrule 263 = "kind: simplekind";
yyrule 264 = "simplekind: SOMEOP";
yyrule 265 = "simplekind: VARID";
yyrule 266 = "simplekind: '(' kind ')'";
yyrule 267 = "scontext: qconid tyvar";
yyrule 268 = "scontexts: scontext";
yyrule 269 = "scontexts: scontext ','";
yyrule 270 = "scontexts: scontext ',' scontexts";
yyrule 271 = "ccontext: scontext";
yyrule 272 = "ccontext: '(' scontexts ')'";
yyrule 273 = "classdef: CLASS ccontext EARROW CONID tyvar wheredef";
yyrule 274 = "classdef: CLASS ccontext wheredef";
yyrule 275 = "sicontext: qconid simpletype";
yyrule 276 = "sicontexts: sicontext";
yyrule 277 = "sicontexts: sicontext ','";
yyrule 278 = "sicontexts: sicontext ',' sicontexts";
yyrule 279 = "icontext: sicontext";
yyrule 280 = "icontext: '(' sicontexts ')'";
yyrule 281 = "insthead: icontext EARROW tyname simpletype";
yyrule 282 = "insthead: icontext";
yyrule 283 = "instdef: INSTANCE insthead wheredef";
yyrule 284 = "derivedef: DERIVE insthead";
yyrule 285 = "datadef: datainit wheredef";
yyrule 286 = "nativepur: PURE NATIVE";
yyrule 287 = "nativepur: MUTABLE NATIVE";
yyrule 288 = "nativepur: NATIVE";
yyrule 289 = "nativespec: nativename";
yyrule 290 = "nativespec: nativename gargs";
yyrule 291 = "gargs: '{' tauSC '}'";
yyrule 292 = "gargs: '{' '}'";
yyrule 293 = "datainit: DATA CONID '=' nativepur nativespec";
yyrule 294 = "datainit: DATA CONID dvars '=' nativepur nativespec";
yyrule 295 = "datainit: DATA CONID dvars '=' dalts";
yyrule 296 = "datainit: DATA CONID '=' dalts";
yyrule 297 = "datainit: NEWTYPE CONID dvars '=' dalt";
yyrule 298 = "datainit: NEWTYPE CONID '=' dalt";
yyrule 299 = "dvars: tyvar";
yyrule 300 = "dvars: tyvar dvars";
yyrule 301 = "dalts: dalt";
yyrule 302 = "dalts: dalt '|' dalts";
yyrule 303 = "dalt: visdalt";
yyrule 304 = "dalt: visdalt DOCUMENTATION";
yyrule 305 = "dalt: DOCUMENTATION visdalt";
yyrule 306 = "visdalt: strictdalt";
yyrule 307 = "visdalt: PUBLIC strictdalt";
yyrule 308 = "visdalt: PRIVATE strictdalt";
yyrule 309 = "visdalt: PROTECTED strictdalt";
yyrule 310 = "strictdalt: '!' simpledalt";
yyrule 311 = "strictdalt: '?' simpledalt";
yyrule 312 = "strictdalt: simpledalt";
yyrule 313 = "simpledalt: CONID";
yyrule 314 = "simpledalt: CONID '{' conflds '}'";
yyrule 315 = "simpledalt: CONID contypes";
yyrule 316 = "contypes: simpletypes";
yyrule 317 = "simpletypes: simpletype";
yyrule 318 = "simpletypes: simpletype simpletypes";
yyrule 319 = "conflds: confld";
yyrule 320 = "conflds: confld ','";
yyrule 321 = "conflds: confld DOCUMENTATION";
yyrule 322 = "conflds: confld ',' conflds";
yyrule 323 = "conflds: confld DOCUMENTATION conflds";
yyrule 324 = "confld: fldids DCOLON sigma";
yyrule 325 = "confld: docs fldids DCOLON sigma";
yyrule 326 = "fldids: fldid";
yyrule 327 = "fldids: fldid ',' fldids";
yyrule 328 = "fldid: strictfldid";
yyrule 329 = "fldid: PUBLIC strictfldid";
yyrule 330 = "fldid: PRIVATE strictfldid";
yyrule 331 = "strictfldid: plainfldid";
yyrule 332 = "strictfldid: '!' plainfldid";
yyrule 333 = "strictfldid: '?' plainfldid";
yyrule 334 = "plainfldid: varid";
yyrule 335 = "typedef: TYPE CONID '=' sigma";
yyrule 336 = "typedef: TYPE CONID dvars '=' sigma";
yyrule 337 = "wheredef: <empty>";
yyrule 338 = "wheredef: WHERE '{' '}'";
yyrule 339 = "wheredef: WHERE '{' localdefs '}'";
yyrule 340 = "wherelet: WHERE '{' '}'";
yyrule 341 = "wherelet: WHERE '{' letdefs '}'";
yyrule 342 = "fundef: funhead '=' expr";
yyrule 343 = "fundef: funhead guards";
yyrule 344 = "fundef: fundef wherelet";
yyrule 345 = "funhead: binex";
yyrule 346 = "literal: TRUE";
yyrule 347 = "literal: FALSE";
yyrule 348 = "literal: CHRCONST";
yyrule 349 = "literal: STRCONST";
yyrule 350 = "literal: INTCONST";
yyrule 351 = "literal: BIGCONST";
yyrule 352 = "literal: LONGCONST";
yyrule 353 = "literal: FLTCONST";
yyrule 354 = "literal: DBLCONST";
yyrule 355 = "literal: REGEXP";
yyrule 356 = "pattern: expr";
yyrule 357 = "aeq: ARROW";
yyrule 358 = "aeq: '='";
yyrule 359 = "lcqual: gqual";
yyrule 360 = "lcqual: expr '=' expr";
yyrule 361 = "lcqual: LET '{' letdefs '}'";
yyrule 362 = "lcquals: lcqual";
yyrule 363 = "lcquals: lcqual ',' lcquals";
yyrule 364 = "lcquals: lcqual ','";
yyrule 365 = "dodefs: lcqual";
yyrule 366 = "dodefs: lcqual ';'";
yyrule 367 = "dodefs: lcqual ';' dodefs";
yyrule 368 = "gqual: expr";
yyrule 369 = "gqual: expr GETS expr";
yyrule 370 = "gquals: gqual";
yyrule 371 = "gquals: gqual ',' gquals";
yyrule 372 = "gquals: gqual ','";
yyrule 373 = "guard: '|' gquals aeq expr";
yyrule 374 = "guards: guard";
yyrule 375 = "guards: guard guards";
yyrule 376 = "calt: pattern aeq expr";
yyrule 377 = "calt: pattern guards";
yyrule 378 = "calt: calt wherelet";
yyrule 379 = "calts: calt";
yyrule 380 = "calts: calt ';' calts";
yyrule 381 = "calts: calt ';'";
yyrule 382 = "lambda: '\\' apats lambdabody";
yyrule 383 = "lambdabody: lambda";
yyrule 384 = "lambdabody: ARROW expr";
yyrule 385 = "expr: binex DCOLON sigma";
yyrule 386 = "expr: binex";
yyrule 387 = "thenx: ';' THEN";
yyrule 388 = "thenx: THEN";
yyrule 389 = "elsex: ';' ELSE";
yyrule 390 = "elsex: ELSE";
yyrule 391 = "binex: binex SOMEOP binex";
yyrule 392 = "binex: binex '-' binex";
yyrule 393 = "binex: '-' topex";
yyrule 394 = "binex: topex";
yyrule 395 = "topex: IF expr thenx expr elsex expr";
yyrule 396 = "topex: CASE expr OF '{' calts '}'";
yyrule 397 = "topex: LET '{' letdefs '}' IN expr";
yyrule 398 = "topex: lambda";
yyrule 399 = "topex: appex";
yyrule 400 = "appex: unex";
yyrule 401 = "appex: appex unex";
yyrule 402 = "unex: primary";
yyrule 403 = "unex: unop unex";
yyrule 404 = "apats: unex";
yyrule 405 = "apats: unex apats";
yyrule 406 = "qualifiers: QUALIFIER";
yyrule 407 = "qualifiers: QUALIFIER QUALIFIER";
yyrule 408 = "primary: term";
yyrule 409 = "primary: DO '{' dodefs '}'";
yyrule 410 = "primary: primary '.' VARID";
yyrule 411 = "primary: primary '.' operator";
yyrule 412 = "primary: primary '.' unop";
yyrule 413 = "primary: qualifiers '{' VARID '?' '}'";
yyrule 414 = "primary: qualifiers '{' VARID '=' '}'";
yyrule 415 = "primary: qualifiers '{' VARID GETS '}'";
yyrule 416 = "primary: qualifiers '{' getfields '}'";
yyrule 417 = "primary: primary '.' '{' VARID '?' '}'";
yyrule 418 = "primary: primary '.' '{' VARID '=' '}'";
yyrule 419 = "primary: primary '.' '{' VARID GETS '}'";
yyrule 420 = "primary: primary '.' '{' getfields '}'";
yyrule 421 = "primary: primary '.' '[' expr ']'";
yyrule 422 = "term: qvarid";
yyrule 423 = "term: literal";
yyrule 424 = "term: '_'";
yyrule 425 = "term: qconid";
yyrule 426 = "term: qconid '{' '}'";
yyrule 427 = "term: qconid '{' fields '}'";
yyrule 428 = "term: '(' ')'";
yyrule 429 = "term: '(' commata ')'";
yyrule 430 = "term: '(' unop ')'";
yyrule 431 = "term: '(' operator ')'";
yyrule 432 = "term: '(' '-' ')'";
yyrule 433 = "term: '(' operator expr ')'";
yyrule 434 = "term: '(' binex operator ')'";
yyrule 435 = "term: '(' binex '-' ')'";
yyrule 436 = "term: '(' expr ',' exprSC ')'";
yyrule 437 = "term: '(' expr ';' exprSS ')'";
yyrule 438 = "term: '(' expr ')'";
yyrule 439 = "term: '[' ']'";
yyrule 440 = "term: '[' exprSC ']'";
yyrule 441 = "term: '[' exprSC DOTDOT ']'";
yyrule 442 = "term: '[' exprSC DOTDOT expr ']'";
yyrule 443 = "term: '[' expr '|' lcquals ']'";
yyrule 444 = "commata: ','";
yyrule 445 = "commata: ',' commata";
yyrule 446 = "fields: field";
yyrule 447 = "fields: field ',' fields";
yyrule 448 = "fields: field ','";
yyrule 449 = "getfields: getfield";
yyrule 450 = "getfields: getfield ',' getfields";
yyrule 451 = "getfields: getfield ','";
yyrule 452 = "getfield: VARID GETS expr";
yyrule 453 = "getfield: VARID '=' expr";
yyrule 454 = "getfield: VARID";
yyrule 455 = "field: varid '=' expr";
yyrule 456 = "field: varid";
yyrule 457 = "exprSC: expr";
yyrule 458 = "exprSC: expr ',' exprSC";
yyrule 459 = "exprSC: expr ','";
yyrule 460 = "exprSS: expr";
yyrule 461 = "exprSS: expr ';' exprSS";
yyrule 462 = "exprSS: expr ';'";
yyrule _ = "<unknown rule>";

private yyprod1 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce1 yy1 yy2 yy3 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod1 yyvals = yybadprod 1 yyvals;
private yyprod2 ((_, (YYTok yy5)):(_, (YYNTdefinitions yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce2 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod2 yyvals = yybadprod 2 yyvals;
private yyprod3 ((_, (YYTok yy3)):(_, (YYNTdefinitions yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce3 yy1 yy2 yy3 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod3 yyvals = yybadprod 3 yyvals;
private yyprod4 ((_, (YYNTrawnativename yy1)):yyvs) =  do { yyr <- reduce4 yy1 ;YYM.pure (YYNTnativename yyr, yyvs)};
private yyprod4 yyvals = yybadprod 4 yyvals;
private yyprod5 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce5 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod5 yyvals = yybadprod 5 yyvals;
private yyprod6 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce6 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod6 yyvals = yybadprod 6 yyvals;
private yyprod7 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce7 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod7 yyvals = yybadprod 7 yyvals;
private yyprod8 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce8 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod8 yyvals = yybadprod 8 yyvals;
private yyprod9 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce9 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod9 yyvals = yybadprod 9 yyvals;
private yyprod10 ((_, (YYNTrawnativename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce10 yy1 yy2}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod10 yyvals = yybadprod 10 yyvals;
private yyprod11 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce11 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod11 yyvals = yybadprod 11 yyvals;
private yyprod12 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce12 yy1 ;YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod12 yyvals = yybadprod 12 yyvals;
private yyprod13 ((_, (YYNTmodulename1 yy3)):(_, (YYTok yy2)):(_, (YYNTvaridkw yy1)):yyvs) =  do { let {!yyr = reduce13 yy1 yy2 yy3}; YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod13 yyvals = yybadprod 13 yyvals;
private yyprod14 ((_, (YYNTmodulename1 yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce14 yy1 yy2}; YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod14 yyvals = yybadprod 14 yyvals;
private yyprod15 ((_, (YYNTmodulename1 yy1)):yyvs) =  do { let {!yyr = reduce15 yy1}; YYM.pure (YYNTmodulename yyr, yyvs)};
private yyprod15 yyvals = yybadprod 15 yyvals;
private yyprod16 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce16 yy1}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod16 yyvals = yybadprod 16 yyvals;
private yyprod17 ((_, (YYNTdocs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce17 yy1 yy2}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod17 yyvals = yybadprod 17 yyvals;
private yyprod18 ((_, (YYNTdocs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce18 yy1 yy2 yy3}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod18 yyvals = yybadprod 18 yyvals;
private yyprod19 ((_, (YYNTmodulename yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce19 yy1 yy2 yy3}; YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod19 yyvals = yybadprod 19 yyvals;
private yyprod20 ((_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce20 yy1 yy2}; YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod20 yyvals = yybadprod 20 yyvals;
private yyprod21 ((_, (YYNTmodulename yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { yyr <- reduce21 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod21 yyvals = yybadprod 21 yyvals;
private yyprod22 ((_, (YYNTmodulename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce22 yy1 yy2 yy3 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod22 yyvals = yybadprod 22 yyvals;
private yyprod23 ((_, (YYTok yy5)):(_, (YYNTqvarids yy4)):(_, (YYTok yy3)):(_, (YYNTwords yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce23 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod23 yyvals = yybadprod 23 yyvals;
private yyprod24 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce24 yy1}; YYM.pure (YYNTword yyr, yyvs)};
private yyprod24 yyvals = yybadprod 24 yyvals;
private yyprod25 ((_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce25 yy1}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod25 yyvals = yybadprod 25 yyvals;
private yyprod26 ((_, (YYNTwords yy2)):(_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce26 yy1 yy2}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod26 yyvals = yybadprod 26 yyvals;
private yyprod27 ((_, (YYNTdefinition yy1)):yyvs) = YYM.pure (YYNTdefinitions (yy1), yyvs);
private yyprod27 yyvals = yybadprod 27 yyvals;
private yyprod28 ((_, (YYTok yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce28 yy1 yy2}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod28 yyvals = yybadprod 28 yyvals;
private yyprod29 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce29 yy1 yy2 yy3}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod29 yyvals = yybadprod 29 yyvals;
private yyprod30 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce30 yy1}; YYM.pure (YYNTdefinition yyr, yyvs)};
private yyprod30 yyvals = yybadprod 30 yyvals;
private yyprod31 ((_, (YYNTtopdefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod31 yyvals = yybadprod 31 yyvals;
private yyprod32 ((_, (YYNTvisibledefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod32 yyvals = yybadprod 32 yyvals;
private yyprod33 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce33 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod33 yyvals = yybadprod 33 yyvals;
private yyprod34 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce34 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod34 yyvals = yybadprod 34 yyvals;
private yyprod35 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce35 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod35 yyvals = yybadprod 35 yyvals;
private yyprod36 ((_, (YYNTdatadef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce36 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod36 yyvals = yybadprod 36 yyvals;
private yyprod37 ((_, (YYNTimport yy1)):yyvs) =  do { let {!yyr = reduce37 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod37 yyvals = yybadprod 37 yyvals;
private yyprod38 ((_, (YYNTinfix yy1)):yyvs) =  do { let {!yyr = reduce38 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod38 yyvals = yybadprod 38 yyvals;
private yyprod39 ((_, (YYNTmoduledefinition yy1)):yyvs) =  do { let {!yyr = reduce39 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod39 yyvals = yybadprod 39 yyvals;
private yyprod40 ((_, (YYNTpublicdefinition yy1)):yyvs) = YYM.pure (YYNTtopdefinition (yy1), yyvs);
private yyprod40 yyvals = yybadprod 40 yyvals;
private yyprod41 ((_, (YYNTwheretokens yy5)):(_, (YYNTinterfaces yy4)):(_, (YYNTtypeclause yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce41 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTmoduledefinition yyr, yyvs)};
private yyprod41 yyvals = yybadprod 41 yyvals;
private yyprod42 yyvs =  do { let {!yyr = reduce42 }; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod43 ((_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce43 yy1 yy2}; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod43 yyvals = yybadprod 43 yyvals;
private yyprod44 yyvs =  do { let {!yyr = reduce44 }; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod45 ((_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce45 yy1 yy2}; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod45 yyvals = yybadprod 45 yyvals;
private yyprod46 ((_, (YYTok yy4)):(_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce46 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod46 yyvals = yybadprod 46 yyvals;
private yyprod47 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce47 yy1 yy2 yy3}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod47 yyvals = yybadprod 47 yyvals;
private yyprod48 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod48 yyvals = yybadprod 48 yyvals;
private yyprod49 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod49 yyvals = yybadprod 49 yyvals;
private yyprod50 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod50 yyvals = yybadprod 50 yyvals;
private yyprod51 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod51 yyvals = yybadprod 51 yyvals;
private yyprod52 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod52 yyvals = yybadprod 52 yyvals;
private yyprod53 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod53 yyvals = yybadprod 53 yyvals;
private yyprod54 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod54 yyvals = yybadprod 54 yyvals;
private yyprod55 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod55 yyvals = yybadprod 55 yyvals;
private yyprod56 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod56 yyvals = yybadprod 56 yyvals;
private yyprod57 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod57 yyvals = yybadprod 57 yyvals;
private yyprod58 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod58 yyvals = yybadprod 58 yyvals;
private yyprod59 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod59 yyvals = yybadprod 59 yyvals;
private yyprod60 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod60 yyvals = yybadprod 60 yyvals;
private yyprod61 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod61 yyvals = yybadprod 61 yyvals;
private yyprod62 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod62 yyvals = yybadprod 62 yyvals;
private yyprod63 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod63 yyvals = yybadprod 63 yyvals;
private yyprod64 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod64 yyvals = yybadprod 64 yyvals;
private yyprod65 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod65 yyvals = yybadprod 65 yyvals;
private yyprod66 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod66 yyvals = yybadprod 66 yyvals;
private yyprod67 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod67 yyvals = yybadprod 67 yyvals;
private yyprod68 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod68 yyvals = yybadprod 68 yyvals;
private yyprod69 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod69 yyvals = yybadprod 69 yyvals;
private yyprod70 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod70 yyvals = yybadprod 70 yyvals;
private yyprod71 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod71 yyvals = yybadprod 71 yyvals;
private yyprod72 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod72 yyvals = yybadprod 72 yyvals;
private yyprod73 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod73 yyvals = yybadprod 73 yyvals;
private yyprod74 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod74 yyvals = yybadprod 74 yyvals;
private yyprod75 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod75 yyvals = yybadprod 75 yyvals;
private yyprod76 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod76 yyvals = yybadprod 76 yyvals;
private yyprod77 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod77 yyvals = yybadprod 77 yyvals;
private yyprod78 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod78 yyvals = yybadprod 78 yyvals;
private yyprod79 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod79 yyvals = yybadprod 79 yyvals;
private yyprod80 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod80 yyvals = yybadprod 80 yyvals;
private yyprod81 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod81 yyvals = yybadprod 81 yyvals;
private yyprod82 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod82 yyvals = yybadprod 82 yyvals;
private yyprod83 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod83 yyvals = yybadprod 83 yyvals;
private yyprod84 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod84 yyvals = yybadprod 84 yyvals;
private yyprod85 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod85 yyvals = yybadprod 85 yyvals;
private yyprod86 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod86 yyvals = yybadprod 86 yyvals;
private yyprod87 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod87 yyvals = yybadprod 87 yyvals;
private yyprod88 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod88 yyvals = yybadprod 88 yyvals;
private yyprod89 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod89 yyvals = yybadprod 89 yyvals;
private yyprod90 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod90 yyvals = yybadprod 90 yyvals;
private yyprod91 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod91 yyvals = yybadprod 91 yyvals;
private yyprod92 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod92 yyvals = yybadprod 92 yyvals;
private yyprod93 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod93 yyvals = yybadprod 93 yyvals;
private yyprod94 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod94 yyvals = yybadprod 94 yyvals;
private yyprod95 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod95 yyvals = yybadprod 95 yyvals;
private yyprod96 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod96 yyvals = yybadprod 96 yyvals;
private yyprod97 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod97 yyvals = yybadprod 97 yyvals;
private yyprod98 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod98 yyvals = yybadprod 98 yyvals;
private yyprod99 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod99 yyvals = yybadprod 99 yyvals;
private yyprod100 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod100 yyvals = yybadprod 100 yyvals;
private yyprod101 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod101 yyvals = yybadprod 101 yyvals;
private yyprod102 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod102 yyvals = yybadprod 102 yyvals;
private yyprod103 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod103 yyvals = yybadprod 103 yyvals;
private yyprod104 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod104 yyvals = yybadprod 104 yyvals;
private yyprod105 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod105 yyvals = yybadprod 105 yyvals;
private yyprod106 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod106 yyvals = yybadprod 106 yyvals;
private yyprod107 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod107 yyvals = yybadprod 107 yyvals;
private yyprod108 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod108 yyvals = yybadprod 108 yyvals;
private yyprod109 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod109 yyvals = yybadprod 109 yyvals;
private yyprod110 ((_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce110 yy1}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod110 yyvals = yybadprod 110 yyvals;
private yyprod111 ((_, (YYNTjtokens yy2)):(_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce111 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod111 yyvals = yybadprod 111 yyvals;
private yyprod112 ((_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce112 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod112 yyvals = yybadprod 112 yyvals;
private yyprod113 ((_, (YYNTjtokens yy4)):(_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce113 yy1 yy2 yy3 yy4}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod113 yyvals = yybadprod 113 yyvals;
private yyprod114 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce114 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod114 yyvals = yybadprod 114 yyvals;
private yyprod115 ((_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce115 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod115 yyvals = yybadprod 115 yyvals;
private yyprod116 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce116 yy1}; YYM.pure (YYNTdocumentation yyr, yyvs)};
private yyprod116 yyvals = yybadprod 116 yyvals;
private yyprod117 ((_, (YYNTtypedef yy1)):yyvs) =  do { let {!yyr = reduce117 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod117 yyvals = yybadprod 117 yyvals;
private yyprod118 ((_, (YYNTdatadef yy1)):yyvs) =  do { let {!yyr = reduce118 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod118 yyvals = yybadprod 118 yyvals;
private yyprod119 ((_, (YYNTclassdef yy1)):yyvs) =  do { let {!yyr = reduce119 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod119 yyvals = yybadprod 119 yyvals;
private yyprod120 ((_, (YYNTinstdef yy1)):yyvs) =  do { let {!yyr = reduce120 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod120 yyvals = yybadprod 120 yyvals;
private yyprod121 ((_, (YYNTderivedef yy1)):yyvs) =  do { let {!yyr = reduce121 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod121 yyvals = yybadprod 121 yyvals;
private yyprod122 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTpublicdefinition (yy1), yyvs);
private yyprod122 yyvals = yybadprod 122 yyvals;
private yyprod123 ((_, (YYNTdplocaldef yy1)):yyvs) = YYM.pure (YYNTlocaldefs (yy1), yyvs);
private yyprod123 yyvals = yybadprod 123 yyvals;
private yyprod124 ((_, (YYTok yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce124 yy1 yy2}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod124 yyvals = yybadprod 124 yyvals;
private yyprod125 ((_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce125 yy1 yy2 yy3}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod125 yyvals = yybadprod 125 yyvals;
private yyprod126 ((_, (YYNTannotation yy1)):yyvs) = YYM.pure (YYNTlocaldef (yy1), yyvs);
private yyprod126 yyvals = yybadprod 126 yyvals;
private yyprod127 ((_, (YYNTnativedef yy1)):yyvs) =  do { let {!yyr = reduce127 yy1}; YYM.pure (YYNTlocaldef yyr, yyvs)};
private yyprod127 yyvals = yybadprod 127 yyvals;
private yyprod128 ((_, (YYNTfundef yy1)):yyvs) = YYM.pure (YYNTlocaldef (yy1), yyvs);
private yyprod128 yyvals = yybadprod 128 yyvals;
private yyprod129 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTplocaldef (yy1), yyvs);
private yyprod129 yyvals = yybadprod 129 yyvals;
private yyprod130 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce130 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod130 yyvals = yybadprod 130 yyvals;
private yyprod131 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce131 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod131 yyvals = yybadprod 131 yyvals;
private yyprod132 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce132 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod132 yyvals = yybadprod 132 yyvals;
private yyprod133 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce133 yy1}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod133 yyvals = yybadprod 133 yyvals;
private yyprod134 ((_, (YYNTdplocaldef yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce134 yy1 yy2}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod134 yyvals = yybadprod 134 yyvals;
private yyprod135 ((_, (YYNTplocaldef yy1)):yyvs) = YYM.pure (YYNTdplocaldef (yy1), yyvs);
private yyprod135 yyvals = yybadprod 135 yyvals;
private yyprod136 ((_, (YYNTannotation yy1)):yyvs) = YYM.pure (YYNTletdef (yy1), yyvs);
private yyprod136 yyvals = yybadprod 136 yyvals;
private yyprod137 ((_, (YYNTfundef yy1)):yyvs) = YYM.pure (YYNTletdef (yy1), yyvs);
private yyprod137 yyvals = yybadprod 137 yyvals;
private yyprod138 ((_, (YYNTletdef yy1)):yyvs) = YYM.pure (YYNTletdefs (yy1), yyvs);
private yyprod138 yyvals = yybadprod 138 yyvals;
private yyprod139 ((_, (YYTok yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce139 yy1 yy2}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod139 yyvals = yybadprod 139 yyvals;
private yyprod140 ((_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce140 yy1 yy2 yy3}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod140 yyvals = yybadprod 140 yyvals;
private yyprod141 ((_, (YYNTimportliste yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce141 yy1 yy2 yy3}; YYM.pure (YYNTimport yyr, yyvs)};
private yyprod141 yyvals = yybadprod 141 yyvals;
private yyprod142 ((_, (YYNTimportliste yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce142 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod142 yyvals = yybadprod 142 yyvals;
private yyprod143 ((_, (YYNTimportliste yy4)):(_, (YYTok yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce143 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod143 yyvals = yybadprod 143 yyvals;
private yyprod144 yyvs =  do { let {!yyr = reduce144 }; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod145 ((_, (YYTok yy4)):(_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce145 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod145 yyvals = yybadprod 145 yyvals;
private yyprod146 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce146 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod146 yyvals = yybadprod 146 yyvals;
private yyprod147 ((_, (YYTok yy3)):(_, (YYNTimportspecs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce147 yy1 yy2 yy3}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod147 yyvals = yybadprod 147 yyvals;
private yyprod148 ((_, (YYNTimportliste yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce148 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod148 yyvals = yybadprod 148 yyvals;
private yyprod149 ((_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce149 yy1}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod149 yyvals = yybadprod 149 yyvals;
private yyprod150 ((_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce150 yy1 yy2}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod150 yyvals = yybadprod 150 yyvals;
private yyprod151 ((_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce151 yy1 yy2 yy3}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod151 yyvals = yybadprod 151 yyvals;
private yyprod152 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce152 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod152 yyvals = yybadprod 152 yyvals;
private yyprod153 ((_, (YYTok yy4)):(_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce153 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod153 yyvals = yybadprod 153 yyvals;
private yyprod154 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce154 yy1 yy2 yy3}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod154 yyvals = yybadprod 154 yyvals;
private yyprod155 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce155 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod155 yyvals = yybadprod 155 yyvals;
private yyprod156 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce156 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod156 yyvals = yybadprod 156 yyvals;
private yyprod157 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce157 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod157 yyvals = yybadprod 157 yyvals;
private yyprod158 ((_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce158 yy1}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod158 yyvals = yybadprod 158 yyvals;
private yyprod159 ((_, (YYNTalias yy2)):(_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce159 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod159 yyvals = yybadprod 159 yyvals;
private yyprod160 ((_, (YYNTimportspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce160 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod160 yyvals = yybadprod 160 yyvals;
private yyprod161 ((_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce161 yy1}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod161 yyvals = yybadprod 161 yyvals;
private yyprod162 ((_, (YYNTalias yy2)):(_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce162 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod162 yyvals = yybadprod 162 yyvals;
private yyprod163 ((_, (YYNTmemspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce163 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod163 yyvals = yybadprod 163 yyvals;
private yyprod164 ((_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce164 yy1}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod164 yyvals = yybadprod 164 yyvals;
private yyprod165 ((_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce165 yy1 yy2}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod165 yyvals = yybadprod 165 yyvals;
private yyprod166 ((_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce166 yy1 yy2 yy3}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod166 yyvals = yybadprod 166 yyvals;
private yyprod167 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod167 yyvals = yybadprod 167 yyvals;
private yyprod168 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod168 yyvals = yybadprod 168 yyvals;
private yyprod169 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce169 yy1 ;YYM.pure (YYNTalias yyr, yyvs)};
private yyprod169 yyvals = yybadprod 169 yyvals;
private yyprod170 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarid (yy1), yyvs);
private yyprod170 yyvals = yybadprod 170 yyvals;
private yyprod171 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvaridkw (yy1), yyvs);
private yyprod171 yyvals = yybadprod 171 yyvals;
private yyprod172 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce172 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod172 yyvals = yybadprod 172 yyvals;
private yyprod173 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce173 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod173 yyvals = yybadprod 173 yyvals;
private yyprod174 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce174 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod174 yyvals = yybadprod 174 yyvals;
private yyprod175 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce175 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod175 yyvals = yybadprod 175 yyvals;
private yyprod176 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce176 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod176 yyvals = yybadprod 176 yyvals;
private yyprod177 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce177 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod177 yyvals = yybadprod 177 yyvals;
private yyprod178 ((_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce178 yy1}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod178 yyvals = yybadprod 178 yyvals;
private yyprod179 ((_, (YYNTqvarids yy3)):(_, (YYTok yy2)):(_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce179 yy1 yy2 yy3}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod179 yyvals = yybadprod 179 yyvals;
private yyprod180 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce180 yy1 yy2 yy3}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod180 yyvals = yybadprod 180 yyvals;
private yyprod181 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce181 yy1 yy2}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod181 yyvals = yybadprod 181 yyvals;
private yyprod182 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce182 yy1}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod182 yyvals = yybadprod 182 yyvals;
private yyprod183 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce183 yy1 yy2 yy3}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod183 yyvals = yybadprod 183 yyvals;
private yyprod184 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce184 yy1 yy2}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod184 yyvals = yybadprod 184 yyvals;
private yyprod185 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce185 yy1}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod185 yyvals = yybadprod 185 yyvals;
private yyprod186 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod186 yyvals = yybadprod 186 yyvals;
private yyprod187 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod187 yyvals = yybadprod 187 yyvals;
private yyprod188 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce188 yy1 yy2 yy3}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod188 yyvals = yybadprod 188 yyvals;
private yyprod189 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce189 yy1 yy2}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod189 yyvals = yybadprod 189 yyvals;
private yyprod190 ((_, (YYNTvarop yy1)):yyvs) =  do { let {!yyr = reduce190 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod190 yyvals = yybadprod 190 yyvals;
private yyprod191 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce191 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod191 yyvals = yybadprod 191 yyvals;
private yyprod192 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNToperator (yy1), yyvs);
private yyprod192 yyvals = yybadprod 192 yyvals;
private yyprod193 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod193 yyvals = yybadprod 193 yyvals;
private yyprod194 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod194 yyvals = yybadprod 194 yyvals;
private yyprod195 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce195 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod195 yyvals = yybadprod 195 yyvals;
private yyprod196 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce196 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod196 yyvals = yybadprod 196 yyvals;
private yyprod197 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce197 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod197 yyvals = yybadprod 197 yyvals;
private yyprod198 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce198 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod198 yyvals = yybadprod 198 yyvals;
private yyprod199 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce199 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod199 yyvals = yybadprod 199 yyvals;
private yyprod200 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce200 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod200 yyvals = yybadprod 200 yyvals;
private yyprod201 ((_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce201 yy1}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod201 yyvals = yybadprod 201 yyvals;
private yyprod202 ((_, (YYNToperators yy2)):(_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce202 yy1 yy2}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod202 yyvals = yybadprod 202 yyvals;
private yyprod203 ((_, (YYNToperators yy2)):(_, (YYNTfixity yy1)):yyvs) =  do { let {!yyr = reduce203 yy1 yy2}; YYM.pure (YYNTinfix yyr, yyvs)};
private yyprod203 yyvals = yybadprod 203 yyvals;
private yyprod204 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTannoitems yy1)):yyvs) =  do { let {!yyr = reduce204 yy1 yy2 yy3}; YYM.pure (YYNTannotation yyr, yyvs)};
private yyprod204 yyvals = yybadprod 204 yyvals;
private yyprod205 ((_, (YYNTvarid yy1)):yyvs) = YYM.pure (YYNTannoitem (yy1), yyvs);
private yyprod205 yyvals = yybadprod 205 yyvals;
private yyprod206 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce206 yy1 yy2 yy3 ;YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod206 yyvals = yybadprod 206 yyvals;
private yyprod207 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce207 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod207 yyvals = yybadprod 207 yyvals;
private yyprod208 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce208 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod208 yyvals = yybadprod 208 yyvals;
private yyprod209 ((_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce209 yy1}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod209 yyvals = yybadprod 209 yyvals;
private yyprod210 ((_, (YYNTannoitems yy3)):(_, (YYTok yy2)):(_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce210 yy1 yy2 yy3}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod210 yyvals = yybadprod 210 yyvals;
private yyprod211 ((_, (YYNTimpurenativedef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce211 yy1 yy2}; YYM.pure (YYNTnativedef yyr, yyvs)};
private yyprod211 yyvals = yybadprod 211 yyvals;
private yyprod212 ((_, (YYNTimpurenativedef yy1)):yyvs) = YYM.pure (YYNTnativedef (yy1), yyvs);
private yyprod212 yyvals = yybadprod 212 yyvals;
private yyprod213 ((_, (YYNTannoitem yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod213 yyvals = yybadprod 213 yyvals;
private yyprod214 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod214 yyvals = yybadprod 214 yyvals;
private yyprod215 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod215 yyvals = yybadprod 215 yyvals;
private yyprod216 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce216 yy1 ;YYM.pure (YYNTfitem yyr, yyvs)};
private yyprod216 yyvals = yybadprod 216 yyvals;
private yyprod217 ((_, (YYNTnativename yy1)):yyvs) = YYM.pure (YYNTjitem (yy1), yyvs);
private yyprod217 yyvals = yybadprod 217 yyvals;
private yyprod218 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce218 yy1 ;YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod218 yyvals = yybadprod 218 yyvals;
private yyprod219 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce219 yy1}; YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod219 yyvals = yybadprod 219 yyvals;
private yyprod220 ((_, (YYNTgargs yy3)):(_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce220 yy1 yy2 yy3}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod220 yyvals = yybadprod 220 yyvals;
private yyprod221 ((_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce221 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod221 yyvals = yybadprod 221 yyvals;
private yyprod222 ((_, (YYNTgargs yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce222 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod222 yyvals = yybadprod 222 yyvals;
private yyprod223 ((_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce223 yy1}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod223 yyvals = yybadprod 223 yyvals;
private yyprod224 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce224 yy1 yy2 yy3}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod224 yyvals = yybadprod 224 yyvals;
private yyprod225 ((_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce225 yy1}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod225 yyvals = yybadprod 225 yyvals;
private yyprod226 ((_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce226 yy1}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod226 yyvals = yybadprod 226 yyvals;
private yyprod227 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce227 yy1 yy2 yy3}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod227 yyvals = yybadprod 227 yyvals;
private yyprod228 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTmethodspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce228 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimpurenativedef yyr, yyvs)};
private yyprod228 yyvals = yybadprod 228 yyvals;
private yyprod229 ((_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce229 yy1}; YYM.pure (YYNTboundvars yyr, yyvs)};
private yyprod229 yyvals = yybadprod 229 yyvals;
private yyprod230 ((_, (YYNTboundvars yy2)):(_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce230 yy1 yy2}; YYM.pure (YYNTboundvars yyr, yyvs)};
private yyprod230 yyvals = yybadprod 230 yyvals;
private yyprod231 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce231 yy1}; YYM.pure (YYNTboundvar yyr, yyvs)};
private yyprod231 yyvals = yybadprod 231 yyvals;
private yyprod232 ((_, (YYNTforall yy1)):yyvs) = YYM.pure (YYNTsigma (yy1), yyvs);
private yyprod232 yyvals = yybadprod 232 yyvals;
private yyprod233 ((_, (YYNTrho yy1)):yyvs) =  do { let {!yyr = reduce233 yy1}; YYM.pure (YYNTsigma yyr, yyvs)};
private yyprod233 yyvals = yybadprod 233 yyvals;
private yyprod234 ((_, (YYNTrho yy4)):(_, (YYNTmbdot yy3)):(_, (YYNTboundvars yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce234 yy1 yy2 yy3 yy4}; YYM.pure (YYNTforall yyr, yyvs)};
private yyprod234 yyvals = yybadprod 234 yyvals;
private yyprod235 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTmbdot (yy1), yyvs);
private yyprod235 yyvals = yybadprod 235 yyvals;
private yyprod236 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce236 yy1 ;YYM.pure (YYNTmbdot yyr, yyvs)};
private yyprod236 yyvals = yybadprod 236 yyvals;
private yyprod237 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { yyr <- reduce237 yy1 yy2 yy3 ;YYM.pure (YYNTrho yyr, yyvs)};
private yyprod237 yyvals = yybadprod 237 yyvals;
private yyprod238 ((_, (YYNTrhofun yy1)):yyvs) = YYM.pure (YYNTrho (yy1), yyvs);
private yyprod238 yyvals = yybadprod 238 yyvals;
private yyprod239 ((_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce239 yy1}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod239 yyvals = yybadprod 239 yyvals;
private yyprod240 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce240 yy1 yy2 yy3}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod240 yyvals = yybadprod 240 yyvals;
private yyprod241 ((_, (YYNTtapp yy1)):yyvs) = YYM.pure (YYNTtau (yy1), yyvs);
private yyprod241 yyvals = yybadprod 241 yyvals;
private yyprod242 ((_, (YYNTforall yy1)):yyvs) =  do { let {!yyr = reduce242 yy1}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod242 yyvals = yybadprod 242 yyvals;
private yyprod243 ((_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce243 yy1 yy2 yy3}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod243 yyvals = yybadprod 243 yyvals;
private yyprod244 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce244 yy1}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod244 yyvals = yybadprod 244 yyvals;
private yyprod245 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce245 yy1 yy2 yy3}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod245 yyvals = yybadprod 245 yyvals;
private yyprod246 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce246 yy1}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod246 yyvals = yybadprod 246 yyvals;
private yyprod247 ((_, (YYNTtauSB yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce247 yy1 yy2 yy3}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod247 yyvals = yybadprod 247 yyvals;
private yyprod248 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { let {!yyr = reduce248 yy1}; YYM.pure (YYNTtapp yyr, yyvs)};
private yyprod248 yyvals = yybadprod 248 yyvals;
private yyprod249 ((_, (YYNTtyvar yy1)):yyvs) = YYM.pure (YYNTsimpletype (yy1), yyvs);
private yyprod249 yyvals = yybadprod 249 yyvals;
private yyprod250 ((_, (YYNTtyname yy1)):yyvs) =  do { let {!yyr = reduce250 yy1}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod250 yyvals = yybadprod 250 yyvals;
private yyprod251 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce251 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod251 yyvals = yybadprod 251 yyvals;
private yyprod252 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce252 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod252 yyvals = yybadprod 252 yyvals;
private yyprod253 ((_, (YYTok yy5)):(_, (YYNTtauSB yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce253 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod253 yyvals = yybadprod 253 yyvals;
private yyprod254 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce254 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod254 yyvals = yybadprod 254 yyvals;
private yyprod255 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce255 yy1}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod255 yyvals = yybadprod 255 yyvals;
private yyprod256 ((_, (YYTok yy5)):(_, (YYNTkind yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce256 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod256 yyvals = yybadprod 256 yyvals;
private yyprod257 ((_, (YYNTqconid yy1)):yyvs) = YYM.pure (YYNTtyname (yy1), yyvs);
private yyprod257 yyvals = yybadprod 257 yyvals;
private yyprod258 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce258 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod258 yyvals = yybadprod 258 yyvals;
private yyprod259 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce259 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod259 yyvals = yybadprod 259 yyvals;
private yyprod260 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce260 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod260 yyvals = yybadprod 260 yyvals;
private yyprod261 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce261 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod261 yyvals = yybadprod 261 yyvals;
private yyprod262 ((_, (YYNTkind yy3)):(_, (YYTok yy2)):(_, (YYNTsimplekind yy1)):yyvs) =  do { let {!yyr = reduce262 yy1 yy2 yy3}; YYM.pure (YYNTkind yyr, yyvs)};
private yyprod262 yyvals = yybadprod 262 yyvals;
private yyprod263 ((_, (YYNTsimplekind yy1)):yyvs) = YYM.pure (YYNTkind (yy1), yyvs);
private yyprod263 yyvals = yybadprod 263 yyvals;
private yyprod264 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce264 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod264 yyvals = yybadprod 264 yyvals;
private yyprod265 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce265 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod265 yyvals = yybadprod 265 yyvals;
private yyprod266 ((_, (YYTok yy3)):(_, (YYNTkind yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce266 yy1 yy2 yy3}; YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod266 yyvals = yybadprod 266 yyvals;
private yyprod267 ((_, (YYNTtyvar yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce267 yy1 yy2}; YYM.pure (YYNTscontext yyr, yyvs)};
private yyprod267 yyvals = yybadprod 267 yyvals;
private yyprod268 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce268 yy1}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod268 yyvals = yybadprod 268 yyvals;
private yyprod269 ((_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce269 yy1 yy2}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod269 yyvals = yybadprod 269 yyvals;
private yyprod270 ((_, (YYNTscontexts yy3)):(_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce270 yy1 yy2 yy3}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod270 yyvals = yybadprod 270 yyvals;
private yyprod271 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce271 yy1}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod271 yyvals = yybadprod 271 yyvals;
private yyprod272 ((_, (YYTok yy3)):(_, (YYNTscontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce272 yy1 yy2 yy3}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod272 yyvals = yybadprod 272 yyvals;
private yyprod273 ((_, (YYNTwheredef yy6)):(_, (YYNTtyvar yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce273 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod273 yyvals = yybadprod 273 yyvals;
private yyprod274 ((_, (YYNTwheredef yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce274 yy1 yy2 yy3 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod274 yyvals = yybadprod 274 yyvals;
private yyprod275 ((_, (YYNTsimpletype yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce275 yy1 yy2}; YYM.pure (YYNTsicontext yyr, yyvs)};
private yyprod275 yyvals = yybadprod 275 yyvals;
private yyprod276 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce276 yy1}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod276 yyvals = yybadprod 276 yyvals;
private yyprod277 ((_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce277 yy1 yy2}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod277 yyvals = yybadprod 277 yyvals;
private yyprod278 ((_, (YYNTsicontexts yy3)):(_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce278 yy1 yy2 yy3}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod278 yyvals = yybadprod 278 yyvals;
private yyprod279 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce279 yy1}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod279 yyvals = yybadprod 279 yyvals;
private yyprod280 ((_, (YYTok yy3)):(_, (YYNTsicontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce280 yy1 yy2 yy3}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod280 yyvals = yybadprod 280 yyvals;
private yyprod281 ((_, (YYNTsimpletype yy4)):(_, (YYNTtyname yy3)):(_, (YYTok yy2)):(_, (YYNTicontext yy1)):yyvs) =  do { let {!yyr = reduce281 yy1 yy2 yy3 yy4}; YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod281 yyvals = yybadprod 281 yyvals;
private yyprod282 ((_, (YYNTicontext yy1)):yyvs) =  do { yyr <- reduce282 yy1 ;YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod282 yyvals = yybadprod 282 yyvals;
private yyprod283 ((_, (YYNTwheredef yy3)):(_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce283 yy1 yy2 yy3}; YYM.pure (YYNTinstdef yyr, yyvs)};
private yyprod283 yyvals = yybadprod 283 yyvals;
private yyprod284 ((_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce284 yy1 yy2}; YYM.pure (YYNTderivedef yyr, yyvs)};
private yyprod284 yyvals = yybadprod 284 yyvals;
private yyprod285 ((_, (YYNTwheredef yy2)):(_, (YYNTdatainit yy1)):yyvs) =  do { let {!yyr = reduce285 yy1 yy2}; YYM.pure (YYNTdatadef yyr, yyvs)};
private yyprod285 yyvals = yybadprod 285 yyvals;
private yyprod286 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce286 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod286 yyvals = yybadprod 286 yyvals;
private yyprod287 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce287 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod287 yyvals = yybadprod 287 yyvals;
private yyprod288 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce288 yy1}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod288 yyvals = yybadprod 288 yyvals;
private yyprod289 ((_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce289 yy1}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod289 yyvals = yybadprod 289 yyvals;
private yyprod290 ((_, (YYNTgargs yy2)):(_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce290 yy1 yy2}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod290 yyvals = yybadprod 290 yyvals;
private yyprod291 ((_, (YYTok yy3)):(_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce291 yy1 yy2 yy3}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod291 yyvals = yybadprod 291 yyvals;
private yyprod292 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce292 yy1 yy2}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod292 yyvals = yybadprod 292 yyvals;
private yyprod293 ((_, (YYNTnativespec yy5)):(_, (YYNTnativepur yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce293 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod293 yyvals = yybadprod 293 yyvals;
private yyprod294 ((_, (YYNTnativespec yy6)):(_, (YYNTnativepur yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce294 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod294 yyvals = yybadprod 294 yyvals;
private yyprod295 ((_, (YYNTdalts yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce295 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod295 yyvals = yybadprod 295 yyvals;
private yyprod296 ((_, (YYNTdalts yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce296 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod296 yyvals = yybadprod 296 yyvals;
private yyprod297 ((_, (YYNTdalt yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce297 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod297 yyvals = yybadprod 297 yyvals;
private yyprod298 ((_, (YYNTdalt yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce298 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod298 yyvals = yybadprod 298 yyvals;
private yyprod299 ((_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce299 yy1}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod299 yyvals = yybadprod 299 yyvals;
private yyprod300 ((_, (YYNTdvars yy2)):(_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce300 yy1 yy2}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod300 yyvals = yybadprod 300 yyvals;
private yyprod301 ((_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce301 yy1}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod301 yyvals = yybadprod 301 yyvals;
private yyprod302 ((_, (YYNTdalts yy3)):(_, (YYTok yy2)):(_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce302 yy1 yy2 yy3}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod302 yyvals = yybadprod 302 yyvals;
private yyprod303 ((_, (YYNTvisdalt yy1)):yyvs) = YYM.pure (YYNTdalt (yy1), yyvs);
private yyprod303 yyvals = yybadprod 303 yyvals;
private yyprod304 ((_, (YYTok yy2)):(_, (YYNTvisdalt yy1)):yyvs) =  do { let {!yyr = reduce304 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod304 yyvals = yybadprod 304 yyvals;
private yyprod305 ((_, (YYNTvisdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce305 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod305 yyvals = yybadprod 305 yyvals;
private yyprod306 ((_, (YYNTstrictdalt yy1)):yyvs) = YYM.pure (YYNTvisdalt (yy1), yyvs);
private yyprod306 yyvals = yybadprod 306 yyvals;
private yyprod307 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce307 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod307 yyvals = yybadprod 307 yyvals;
private yyprod308 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce308 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod308 yyvals = yybadprod 308 yyvals;
private yyprod309 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce309 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod309 yyvals = yybadprod 309 yyvals;
private yyprod310 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce310 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod310 yyvals = yybadprod 310 yyvals;
private yyprod311 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce311 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod311 yyvals = yybadprod 311 yyvals;
private yyprod312 ((_, (YYNTsimpledalt yy1)):yyvs) = YYM.pure (YYNTstrictdalt (yy1), yyvs);
private yyprod312 yyvals = yybadprod 312 yyvals;
private yyprod313 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce313 yy1}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod313 yyvals = yybadprod 313 yyvals;
private yyprod314 ((_, (YYTok yy4)):(_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce314 yy1 yy2 yy3 yy4}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod314 yyvals = yybadprod 314 yyvals;
private yyprod315 ((_, (YYNTcontypes yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce315 yy1 yy2}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod315 yyvals = yybadprod 315 yyvals;
private yyprod316 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { yyr <- reduce316 yy1 ;YYM.pure (YYNTcontypes yyr, yyvs)};
private yyprod316 yyvals = yybadprod 316 yyvals;
private yyprod317 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce317 yy1}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod317 yyvals = yybadprod 317 yyvals;
private yyprod318 ((_, (YYNTsimpletypes yy2)):(_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce318 yy1 yy2}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod318 yyvals = yybadprod 318 yyvals;
private yyprod319 ((_, (YYNTconfld yy1)):yyvs) = YYM.pure (YYNTconflds (yy1), yyvs);
private yyprod319 yyvals = yybadprod 319 yyvals;
private yyprod320 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce320 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod320 yyvals = yybadprod 320 yyvals;
private yyprod321 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce321 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod321 yyvals = yybadprod 321 yyvals;
private yyprod322 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce322 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod322 yyvals = yybadprod 322 yyvals;
private yyprod323 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce323 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod323 yyvals = yybadprod 323 yyvals;
private yyprod324 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTfldids yy1)):yyvs) =  do { let {!yyr = reduce324 yy1 yy2 yy3}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod324 yyvals = yybadprod 324 yyvals;
private yyprod325 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYNTfldids yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce325 yy1 yy2 yy3 yy4}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod325 yyvals = yybadprod 325 yyvals;
private yyprod326 ((_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce326 yy1}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod326 yyvals = yybadprod 326 yyvals;
private yyprod327 ((_, (YYNTfldids yy3)):(_, (YYTok yy2)):(_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce327 yy1 yy2 yy3}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod327 yyvals = yybadprod 327 yyvals;
private yyprod328 ((_, (YYNTstrictfldid yy1)):yyvs) = YYM.pure (YYNTfldid (yy1), yyvs);
private yyprod328 yyvals = yybadprod 328 yyvals;
private yyprod329 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce329 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod329 yyvals = yybadprod 329 yyvals;
private yyprod330 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce330 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod330 yyvals = yybadprod 330 yyvals;
private yyprod331 ((_, (YYNTplainfldid yy1)):yyvs) = YYM.pure (YYNTstrictfldid (yy1), yyvs);
private yyprod331 yyvals = yybadprod 331 yyvals;
private yyprod332 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce332 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod332 yyvals = yybadprod 332 yyvals;
private yyprod333 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce333 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod333 yyvals = yybadprod 333 yyvals;
private yyprod334 ((_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce334 yy1 ;YYM.pure (YYNTplainfldid yyr, yyvs)};
private yyprod334 yyvals = yybadprod 334 yyvals;
private yyprod335 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce335 yy1 yy2 yy3 yy4}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod335 yyvals = yybadprod 335 yyvals;
private yyprod336 ((_, (YYNTsigma yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce336 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod336 yyvals = yybadprod 336 yyvals;
private yyprod337 yyvs =  do { let {!yyr = reduce337 }; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod338 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce338 yy1 yy2 yy3}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod338 yyvals = yybadprod 338 yyvals;
private yyprod339 ((_, (YYTok yy4)):(_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce339 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod339 yyvals = yybadprod 339 yyvals;
private yyprod340 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce340 yy1 yy2 yy3}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod340 yyvals = yybadprod 340 yyvals;
private yyprod341 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce341 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod341 yyvals = yybadprod 341 yyvals;
private yyprod342 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce342 yy1 yy2 yy3}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod342 yyvals = yybadprod 342 yyvals;
private yyprod343 ((_, (YYNTguards yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce343 yy1 yy2}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod343 yyvals = yybadprod 343 yyvals;
private yyprod344 ((_, (YYNTwherelet yy2)):(_, (YYNTfundef yy1)):yyvs) =  do { yyr <- reduce344 yy1 yy2 ;YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod344 yyvals = yybadprod 344 yyvals;
private yyprod345 ((_, (YYNTbinex yy1)):yyvs) =  do { yyr <- reduce345 yy1 ;YYM.pure (YYNTfunhead yyr, yyvs)};
private yyprod345 yyvals = yybadprod 345 yyvals;
private yyprod346 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce346 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod346 yyvals = yybadprod 346 yyvals;
private yyprod347 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce347 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod347 yyvals = yybadprod 347 yyvals;
private yyprod348 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce348 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod348 yyvals = yybadprod 348 yyvals;
private yyprod349 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce349 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod349 yyvals = yybadprod 349 yyvals;
private yyprod350 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce350 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod350 yyvals = yybadprod 350 yyvals;
private yyprod351 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce351 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod351 yyvals = yybadprod 351 yyvals;
private yyprod352 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce352 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod352 yyvals = yybadprod 352 yyvals;
private yyprod353 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce353 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod353 yyvals = yybadprod 353 yyvals;
private yyprod354 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce354 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod354 yyvals = yybadprod 354 yyvals;
private yyprod355 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce355 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod355 yyvals = yybadprod 355 yyvals;
private yyprod356 ((_, (YYNTexpr yy1)):yyvs) = YYM.pure (YYNTpattern (yy1), yyvs);
private yyprod356 yyvals = yybadprod 356 yyvals;
private yyprod357 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod357 yyvals = yybadprod 357 yyvals;
private yyprod358 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod358 yyvals = yybadprod 358 yyvals;
private yyprod359 ((_, (YYNTgqual yy1)):yyvs) = YYM.pure (YYNTlcqual (yy1), yyvs);
private yyprod359 yyvals = yybadprod 359 yyvals;
private yyprod360 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce360 yy1 yy2 yy3 ;YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod360 yyvals = yybadprod 360 yyvals;
private yyprod361 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce361 yy1 yy2 yy3 yy4}; YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod361 yyvals = yybadprod 361 yyvals;
private yyprod362 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce362 yy1}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod362 yyvals = yybadprod 362 yyvals;
private yyprod363 ((_, (YYNTlcquals yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce363 yy1 yy2 yy3}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod363 yyvals = yybadprod 363 yyvals;
private yyprod364 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce364 yy1 yy2}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod364 yyvals = yybadprod 364 yyvals;
private yyprod365 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce365 yy1}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod365 yyvals = yybadprod 365 yyvals;
private yyprod366 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce366 yy1 yy2}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod366 yyvals = yybadprod 366 yyvals;
private yyprod367 ((_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce367 yy1 yy2 yy3}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod367 yyvals = yybadprod 367 yyvals;
private yyprod368 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce368 yy1}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod368 yyvals = yybadprod 368 yyvals;
private yyprod369 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce369 yy1 yy2 yy3}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod369 yyvals = yybadprod 369 yyvals;
private yyprod370 ((_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce370 yy1}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod370 yyvals = yybadprod 370 yyvals;
private yyprod371 ((_, (YYNTgquals yy3)):(_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce371 yy1 yy2 yy3}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod371 yyvals = yybadprod 371 yyvals;
private yyprod372 ((_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce372 yy1 yy2}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod372 yyvals = yybadprod 372 yyvals;
private yyprod373 ((_, (YYNTexpr yy4)):(_, (YYNTaeq yy3)):(_, (YYNTgquals yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce373 yy1 yy2 yy3 yy4}; YYM.pure (YYNTguard yyr, yyvs)};
private yyprod373 yyvals = yybadprod 373 yyvals;
private yyprod374 ((_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce374 yy1}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod374 yyvals = yybadprod 374 yyvals;
private yyprod375 ((_, (YYNTguards yy2)):(_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce375 yy1 yy2}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod375 yyvals = yybadprod 375 yyvals;
private yyprod376 ((_, (YYNTexpr yy3)):(_, (YYNTaeq yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce376 yy1 yy2 yy3}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod376 yyvals = yybadprod 376 yyvals;
private yyprod377 ((_, (YYNTguards yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce377 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod377 yyvals = yybadprod 377 yyvals;
private yyprod378 ((_, (YYNTwherelet yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce378 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod378 yyvals = yybadprod 378 yyvals;
private yyprod379 ((_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce379 yy1}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod379 yyvals = yybadprod 379 yyvals;
private yyprod380 ((_, (YYNTcalts yy3)):(_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce380 yy1 yy2 yy3}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod380 yyvals = yybadprod 380 yyvals;
private yyprod381 ((_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce381 yy1 yy2}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod381 yyvals = yybadprod 381 yyvals;
private yyprod382 ((_, (YYNTlambdabody yy3)):(_, (YYNTapats yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce382 yy1 yy2 yy3}; YYM.pure (YYNTlambda yyr, yyvs)};
private yyprod382 yyvals = yybadprod 382 yyvals;
private yyprod383 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTlambdabody (yy1), yyvs);
private yyprod383 yyvals = yybadprod 383 yyvals;
private yyprod384 ((_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce384 yy1 yy2}; YYM.pure (YYNTlambdabody yyr, yyvs)};
private yyprod384 yyvals = yybadprod 384 yyvals;
private yyprod385 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce385 yy1 yy2 yy3}; YYM.pure (YYNTexpr yyr, yyvs)};
private yyprod385 yyvals = yybadprod 385 yyvals;
private yyprod386 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTexpr (yy1), yyvs);
private yyprod386 yyvals = yybadprod 386 yyvals;
private yyprod387 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce387 yy1 yy2}; YYM.pure (YYNTthenx yyr, yyvs)};
private yyprod387 yyvals = yybadprod 387 yyvals;
private yyprod388 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTthenx (yy1), yyvs);
private yyprod388 yyvals = yybadprod 388 yyvals;
private yyprod389 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce389 yy1 yy2}; YYM.pure (YYNTelsex yyr, yyvs)};
private yyprod389 yyvals = yybadprod 389 yyvals;
private yyprod390 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTelsex (yy1), yyvs);
private yyprod390 yyvals = yybadprod 390 yyvals;
private yyprod391 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce391 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod391 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod391 yyvals = yybadprod 391 yyvals;
private yyprod392 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce392 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod392 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod392 yyvals = yybadprod 392 yyvals;
private yyprod393 ((_, (YYNTtopex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce393 yy1 yy2}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod393 yyvals = yybadprod 393 yyvals;
private yyprod394 ((_, (YYNTtopex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod394 yyvals = yybadprod 394 yyvals;
private yyprod395 ((_, (YYNTexpr yy6)):(_, (YYNTelsex yy5)):(_, (YYNTexpr yy4)):(_, (YYNTthenx yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce395 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod395 yyvals = yybadprod 395 yyvals;
private yyprod396 ((_, (YYTok yy6)):(_, (YYNTcalts yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce396 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod396 yyvals = yybadprod 396 yyvals;
private yyprod397 ((_, (YYNTexpr yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce397 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod397 yyvals = yybadprod 397 yyvals;
private yyprod398 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTtopex (yy1), yyvs);
private yyprod398 yyvals = yybadprod 398 yyvals;
private yyprod399 ((_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce399 yy1}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod399 yyvals = yybadprod 399 yyvals;
private yyprod400 ((_, (YYNTunex yy1)):yyvs) = YYM.pure (YYNTappex (yy1), yyvs);
private yyprod400 yyvals = yybadprod 400 yyvals;
private yyprod401 ((_, (YYNTunex yy2)):(_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce401 yy1 yy2}; YYM.pure (YYNTappex yyr, yyvs)};
private yyprod401 yyvals = yybadprod 401 yyvals;
private yyprod402 ((_, (YYNTprimary yy1)):yyvs) = YYM.pure (YYNTunex (yy1), yyvs);
private yyprod402 yyvals = yybadprod 402 yyvals;
private yyprod403 ((_, (YYNTunex yy2)):(_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce403 yy1 yy2}; YYM.pure (YYNTunex yyr, yyvs)};
private yyprod403 yyvals = yybadprod 403 yyvals;
private yyprod404 ((_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce404 yy1}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod404 yyvals = yybadprod 404 yyvals;
private yyprod405 ((_, (YYNTapats yy2)):(_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce405 yy1 yy2}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod405 yyvals = yybadprod 405 yyvals;
private yyprod406 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce406 yy1}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod406 yyvals = yybadprod 406 yyvals;
private yyprod407 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce407 yy1 yy2}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod407 yyvals = yybadprod 407 yyvals;
private yyprod408 ((_, (YYNTterm yy1)):yyvs) = YYM.pure (YYNTprimary (yy1), yyvs);
private yyprod408 yyvals = yybadprod 408 yyvals;
private yyprod409 ((_, (YYTok yy4)):(_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce409 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod409 yyvals = yybadprod 409 yyvals;
private yyprod410 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce410 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod410 yyvals = yybadprod 410 yyvals;
private yyprod411 ((_, (YYNToperator yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { yyr <- reduce411 yy1 yy2 yy3 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod411 yyvals = yybadprod 411 yyvals;
private yyprod412 ((_, (YYNTunop yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce412 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod412 yyvals = yybadprod 412 yyvals;
private yyprod413 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce413 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod413 yyvals = yybadprod 413 yyvals;
private yyprod414 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce414 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod414 yyvals = yybadprod 414 yyvals;
private yyprod415 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce415 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod415 yyvals = yybadprod 415 yyvals;
private yyprod416 ((_, (YYTok yy4)):(_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce416 yy1 yy2 yy3 yy4}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod416 yyvals = yybadprod 416 yyvals;
private yyprod417 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce417 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod417 yyvals = yybadprod 417 yyvals;
private yyprod418 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce418 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod418 yyvals = yybadprod 418 yyvals;
private yyprod419 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce419 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod419 yyvals = yybadprod 419 yyvals;
private yyprod420 ((_, (YYTok yy5)):(_, (YYNTgetfields yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce420 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod420 yyvals = yybadprod 420 yyvals;
private yyprod421 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce421 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod421 yyvals = yybadprod 421 yyvals;
private yyprod422 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce422 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod422 yyvals = yybadprod 422 yyvals;
private yyprod423 ((_, (YYNTliteral yy1)):yyvs) = YYM.pure (YYNTterm (yy1), yyvs);
private yyprod423 yyvals = yybadprod 423 yyvals;
private yyprod424 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce424 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod424 yyvals = yybadprod 424 yyvals;
private yyprod425 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce425 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod425 yyvals = yybadprod 425 yyvals;
private yyprod426 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce426 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod426 yyvals = yybadprod 426 yyvals;
private yyprod427 ((_, (YYTok yy4)):(_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce427 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod427 yyvals = yybadprod 427 yyvals;
private yyprod428 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce428 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod428 yyvals = yybadprod 428 yyvals;
private yyprod429 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce429 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod429 yyvals = yybadprod 429 yyvals;
private yyprod430 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce430 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod430 yyvals = yybadprod 430 yyvals;
private yyprod431 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce431 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod431 yyvals = yybadprod 431 yyvals;
private yyprod432 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce432 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod432 yyvals = yybadprod 432 yyvals;
private yyprod433 ((_, (YYTok yy4)):(_, (YYNTexpr yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce433 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod433 yyvals = yybadprod 433 yyvals;
private yyprod434 ((_, (YYTok yy4)):(_, (YYNToperator yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce434 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod434 yyvals = yybadprod 434 yyvals;
private yyprod435 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce435 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod435 yyvals = yybadprod 435 yyvals;
private yyprod436 ((_, (YYTok yy5)):(_, (YYNTexprSC yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce436 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod436 yyvals = yybadprod 436 yyvals;
private yyprod437 ((_, (YYTok yy5)):(_, (YYNTexprSS yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce437 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod437 yyvals = yybadprod 437 yyvals;
private yyprod438 ((_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce438 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod438 yyvals = yybadprod 438 yyvals;
private yyprod439 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce439 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod439 yyvals = yybadprod 439 yyvals;
private yyprod440 ((_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce440 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod440 yyvals = yybadprod 440 yyvals;
private yyprod441 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce441 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod441 yyvals = yybadprod 441 yyvals;
private yyprod442 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce442 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod442 yyvals = yybadprod 442 yyvals;
private yyprod443 ((_, (YYTok yy5)):(_, (YYNTlcquals yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce443 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod443 yyvals = yybadprod 443 yyvals;
private yyprod444 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce444 yy1}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod444 yyvals = yybadprod 444 yyvals;
private yyprod445 ((_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce445 yy1 yy2}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod445 yyvals = yybadprod 445 yyvals;
private yyprod446 ((_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce446 yy1}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod446 yyvals = yybadprod 446 yyvals;
private yyprod447 ((_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { yyr <- reduce447 yy1 yy2 yy3 ;YYM.pure (YYNTfields yyr, yyvs)};
private yyprod447 yyvals = yybadprod 447 yyvals;
private yyprod448 ((_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce448 yy1 yy2}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod448 yyvals = yybadprod 448 yyvals;
private yyprod449 ((_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce449 yy1}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod449 yyvals = yybadprod 449 yyvals;
private yyprod450 ((_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce450 yy1 yy2 yy3}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod450 yyvals = yybadprod 450 yyvals;
private yyprod451 ((_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce451 yy1 yy2}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod451 yyvals = yybadprod 451 yyvals;
private yyprod452 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce452 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod452 yyvals = yybadprod 452 yyvals;
private yyprod453 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce453 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod453 yyvals = yybadprod 453 yyvals;
private yyprod454 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce454 yy1}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod454 yyvals = yybadprod 454 yyvals;
private yyprod455 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce455 yy1 yy2 yy3}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod455 yyvals = yybadprod 455 yyvals;
private yyprod456 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce456 yy1}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod456 yyvals = yybadprod 456 yyvals;
private yyprod457 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce457 yy1}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod457 yyvals = yybadprod 457 yyvals;
private yyprod458 ((_, (YYNTexprSC yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce458 yy1 yy2 yy3}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod458 yyvals = yybadprod 458 yyvals;
private yyprod459 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce459 yy1 yy2}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod459 yyvals = yybadprod 459 yyvals;
private yyprod460 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce460 yy1}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod460 yyvals = yybadprod 460 yyvals;
private yyprod461 ((_, (YYNTexprSS yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce461 yy1 yy2 yy3}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod461 yyvals = yybadprod 461 yyvals;
private yyprod462 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce462 yy1 yy2}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod462 yyvals = yybadprod 462 yyvals;


private yyprods = let 
    sub1 = [      (1, yyprod1),
      (2, yyprod2),
      (3, yyprod3),
      (4, yyprod4),
      (5, yyprod5),
      (6, yyprod6),
      (7, yyprod7),
      (8, yyprod8),
      (9, yyprod9),
      (10, yyprod10),
      (11, yyprod11),
      (12, yyprod12),
      (13, yyprod13),
      (14, yyprod14),
      (15, yyprod15),
      (16, yyprod16),
      (17, yyprod17),
      (18, yyprod18),
      (19, yyprod19),
      (20, yyprod20),
      (21, yyprod21),
      (22, yyprod22),
      (23, yyprod23),
      (24, yyprod24),
      (25, yyprod25),
      (26, yyprod26),
      (27, yyprod27),
      (28, yyprod28),
      (29, yyprod29),
      (30, yyprod30),
      (31, yyprod31),
      (32, yyprod32),
      (33, yyprod33),
      (34, yyprod34),
      (35, yyprod35),
      (36, yyprod36),
      (37, yyprod37),
      (38, yyprod38),
      (39, yyprod39),
      (40, yyprod40),
      (41, yyprod41),
      (42, yyprod42),
      (43, yyprod43),
      (44, yyprod44),
      (45, yyprod45),
      (46, yyprod46),
      (47, yyprod47),
      (48, yyprod48),
      (49, yyprod49),
      (50, yyprod50),
      (51, yyprod51),
      (52, yyprod52),
      (53, yyprod53),
      (54, yyprod54),
      (55, yyprod55),
      (56, yyprod56),
      (57, yyprod57),
      (58, yyprod58),
      (59, yyprod59),
      (60, yyprod60),
      (61, yyprod61),
      (62, yyprod62),
      (63, yyprod63),
      (64, yyprod64)];
    sub2 = [      (65, yyprod65),
      (66, yyprod66),
      (67, yyprod67),
      (68, yyprod68),
      (69, yyprod69),
      (70, yyprod70),
      (71, yyprod71),
      (72, yyprod72),
      (73, yyprod73),
      (74, yyprod74),
      (75, yyprod75),
      (76, yyprod76),
      (77, yyprod77),
      (78, yyprod78),
      (79, yyprod79),
      (80, yyprod80),
      (81, yyprod81),
      (82, yyprod82),
      (83, yyprod83),
      (84, yyprod84),
      (85, yyprod85),
      (86, yyprod86),
      (87, yyprod87),
      (88, yyprod88),
      (89, yyprod89),
      (90, yyprod90),
      (91, yyprod91),
      (92, yyprod92),
      (93, yyprod93),
      (94, yyprod94),
      (95, yyprod95),
      (96, yyprod96),
      (97, yyprod97),
      (98, yyprod98),
      (99, yyprod99),
      (100, yyprod100),
      (101, yyprod101),
      (102, yyprod102),
      (103, yyprod103),
      (104, yyprod104),
      (105, yyprod105),
      (106, yyprod106),
      (107, yyprod107),
      (108, yyprod108),
      (109, yyprod109),
      (110, yyprod110),
      (111, yyprod111),
      (112, yyprod112),
      (113, yyprod113),
      (114, yyprod114),
      (115, yyprod115),
      (116, yyprod116),
      (117, yyprod117),
      (118, yyprod118),
      (119, yyprod119),
      (120, yyprod120),
      (121, yyprod121),
      (122, yyprod122),
      (123, yyprod123),
      (124, yyprod124),
      (125, yyprod125),
      (126, yyprod126),
      (127, yyprod127),
      (128, yyprod128)];
    sub3 = [      (129, yyprod129),
      (130, yyprod130),
      (131, yyprod131),
      (132, yyprod132),
      (133, yyprod133),
      (134, yyprod134),
      (135, yyprod135),
      (136, yyprod136),
      (137, yyprod137),
      (138, yyprod138),
      (139, yyprod139),
      (140, yyprod140),
      (141, yyprod141),
      (142, yyprod142),
      (143, yyprod143),
      (144, yyprod144),
      (145, yyprod145),
      (146, yyprod146),
      (147, yyprod147),
      (148, yyprod148),
      (149, yyprod149),
      (150, yyprod150),
      (151, yyprod151),
      (152, yyprod152),
      (153, yyprod153),
      (154, yyprod154),
      (155, yyprod155),
      (156, yyprod156),
      (157, yyprod157),
      (158, yyprod158),
      (159, yyprod159),
      (160, yyprod160),
      (161, yyprod161),
      (162, yyprod162),
      (163, yyprod163),
      (164, yyprod164),
      (165, yyprod165),
      (166, yyprod166),
      (167, yyprod167),
      (168, yyprod168),
      (169, yyprod169),
      (170, yyprod170),
      (171, yyprod171),
      (172, yyprod172),
      (173, yyprod173),
      (174, yyprod174),
      (175, yyprod175),
      (176, yyprod176),
      (177, yyprod177),
      (178, yyprod178),
      (179, yyprod179),
      (180, yyprod180),
      (181, yyprod181),
      (182, yyprod182),
      (183, yyprod183),
      (184, yyprod184),
      (185, yyprod185),
      (186, yyprod186),
      (187, yyprod187),
      (188, yyprod188),
      (189, yyprod189),
      (190, yyprod190),
      (191, yyprod191),
      (192, yyprod192)];
    sub4 = [      (193, yyprod193),
      (194, yyprod194),
      (195, yyprod195),
      (196, yyprod196),
      (197, yyprod197),
      (198, yyprod198),
      (199, yyprod199),
      (200, yyprod200),
      (201, yyprod201),
      (202, yyprod202),
      (203, yyprod203),
      (204, yyprod204),
      (205, yyprod205),
      (206, yyprod206),
      (207, yyprod207),
      (208, yyprod208),
      (209, yyprod209),
      (210, yyprod210),
      (211, yyprod211),
      (212, yyprod212),
      (213, yyprod213),
      (214, yyprod214),
      (215, yyprod215),
      (216, yyprod216),
      (217, yyprod217),
      (218, yyprod218),
      (219, yyprod219),
      (220, yyprod220),
      (221, yyprod221),
      (222, yyprod222),
      (223, yyprod223),
      (224, yyprod224),
      (225, yyprod225),
      (226, yyprod226),
      (227, yyprod227),
      (228, yyprod228),
      (229, yyprod229),
      (230, yyprod230),
      (231, yyprod231),
      (232, yyprod232),
      (233, yyprod233),
      (234, yyprod234),
      (235, yyprod235),
      (236, yyprod236),
      (237, yyprod237),
      (238, yyprod238),
      (239, yyprod239),
      (240, yyprod240),
      (241, yyprod241),
      (242, yyprod242),
      (243, yyprod243),
      (244, yyprod244),
      (245, yyprod245),
      (246, yyprod246),
      (247, yyprod247),
      (248, yyprod248),
      (249, yyprod249),
      (250, yyprod250),
      (251, yyprod251),
      (252, yyprod252),
      (253, yyprod253),
      (254, yyprod254),
      (255, yyprod255),
      (256, yyprod256)];
    sub5 = [      (257, yyprod257),
      (258, yyprod258),
      (259, yyprod259),
      (260, yyprod260),
      (261, yyprod261),
      (262, yyprod262),
      (263, yyprod263),
      (264, yyprod264),
      (265, yyprod265),
      (266, yyprod266),
      (267, yyprod267),
      (268, yyprod268),
      (269, yyprod269),
      (270, yyprod270),
      (271, yyprod271),
      (272, yyprod272),
      (273, yyprod273),
      (274, yyprod274),
      (275, yyprod275),
      (276, yyprod276),
      (277, yyprod277),
      (278, yyprod278),
      (279, yyprod279),
      (280, yyprod280),
      (281, yyprod281),
      (282, yyprod282),
      (283, yyprod283),
      (284, yyprod284),
      (285, yyprod285),
      (286, yyprod286),
      (287, yyprod287),
      (288, yyprod288),
      (289, yyprod289),
      (290, yyprod290),
      (291, yyprod291),
      (292, yyprod292),
      (293, yyprod293),
      (294, yyprod294),
      (295, yyprod295),
      (296, yyprod296),
      (297, yyprod297),
      (298, yyprod298),
      (299, yyprod299),
      (300, yyprod300),
      (301, yyprod301),
      (302, yyprod302),
      (303, yyprod303),
      (304, yyprod304),
      (305, yyprod305),
      (306, yyprod306),
      (307, yyprod307),
      (308, yyprod308),
      (309, yyprod309),
      (310, yyprod310),
      (311, yyprod311),
      (312, yyprod312),
      (313, yyprod313),
      (314, yyprod314),
      (315, yyprod315),
      (316, yyprod316),
      (317, yyprod317),
      (318, yyprod318),
      (319, yyprod319),
      (320, yyprod320)];
    sub6 = [      (321, yyprod321),
      (322, yyprod322),
      (323, yyprod323),
      (324, yyprod324),
      (325, yyprod325),
      (326, yyprod326),
      (327, yyprod327),
      (328, yyprod328),
      (329, yyprod329),
      (330, yyprod330),
      (331, yyprod331),
      (332, yyprod332),
      (333, yyprod333),
      (334, yyprod334),
      (335, yyprod335),
      (336, yyprod336),
      (337, yyprod337),
      (338, yyprod338),
      (339, yyprod339),
      (340, yyprod340),
      (341, yyprod341),
      (342, yyprod342),
      (343, yyprod343),
      (344, yyprod344),
      (345, yyprod345),
      (346, yyprod346),
      (347, yyprod347),
      (348, yyprod348),
      (349, yyprod349),
      (350, yyprod350),
      (351, yyprod351),
      (352, yyprod352),
      (353, yyprod353),
      (354, yyprod354),
      (355, yyprod355),
      (356, yyprod356),
      (357, yyprod357),
      (358, yyprod358),
      (359, yyprod359),
      (360, yyprod360),
      (361, yyprod361),
      (362, yyprod362),
      (363, yyprod363),
      (364, yyprod364),
      (365, yyprod365),
      (366, yyprod366),
      (367, yyprod367),
      (368, yyprod368),
      (369, yyprod369),
      (370, yyprod370),
      (371, yyprod371),
      (372, yyprod372),
      (373, yyprod373),
      (374, yyprod374),
      (375, yyprod375),
      (376, yyprod376),
      (377, yyprod377),
      (378, yyprod378),
      (379, yyprod379),
      (380, yyprod380),
      (381, yyprod381),
      (382, yyprod382),
      (383, yyprod383),
      (384, yyprod384)];
    sub7 = [      (385, yyprod385),
      (386, yyprod386),
      (387, yyprod387),
      (388, yyprod388),
      (389, yyprod389),
      (390, yyprod390),
      (391, yyprod391),
      (392, yyprod392),
      (393, yyprod393),
      (394, yyprod394),
      (395, yyprod395),
      (396, yyprod396),
      (397, yyprod397),
      (398, yyprod398),
      (399, yyprod399),
      (400, yyprod400),
      (401, yyprod401),
      (402, yyprod402),
      (403, yyprod403),
      (404, yyprod404),
      (405, yyprod405),
      (406, yyprod406),
      (407, yyprod407),
      (408, yyprod408),
      (409, yyprod409),
      (410, yyprod410),
      (411, yyprod411),
      (412, yyprod412),
      (413, yyprod413),
      (414, yyprod414),
      (415, yyprod415),
      (416, yyprod416),
      (417, yyprod417),
      (418, yyprod418),
      (419, yyprod419),
      (420, yyprod420),
      (421, yyprod421),
      (422, yyprod422),
      (423, yyprod423),
      (424, yyprod424),
      (425, yyprod425),
      (426, yyprod426),
      (427, yyprod427),
      (428, yyprod428),
      (429, yyprod429),
      (430, yyprod430),
      (431, yyprod431),
      (432, yyprod432),
      (433, yyprod433),
      (434, yyprod434),
      (435, yyprod435),
      (436, yyprod436),
      (437, yyprod437),
      (438, yyprod438),
      (439, yyprod439),
      (440, yyprod440),
      (441, yyprod441),
      (442, yyprod442),
      (443, yyprod443),
      (444, yyprod444),
      (445, yyprod445),
      (446, yyprod446),
      (447, yyprod447),
      (448, yyprod448)];
    sub8 = [      (449, yyprod449),
      (450, yyprod450),
      (451, yyprod451),
      (452, yyprod452),
      (453, yyprod453),
      (454, yyprod454),
      (455, yyprod455),
      (456, yyprod456),
      (457, yyprod457),
      (458, yyprod458),
      (459, yyprod459),
      (460, yyprod460),
      (461, yyprod461),
      (462, yyprod462)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8);
private yyacts  = let 
    sub1 = [      (0, yyaction0),
      (1, yyaction1),
      (2, yyaction2),
      (3, yyaction3),
      (4, yyaction4),
      (5, yyaction5),
      (6, yyaction6),
      (7, yyaction7),
      (8, yyaction8),
      (9, yyaction9),
      (10, yyaction10),
      (11, yyaction11),
      (12, yyaction12),
      (13, yyaction13),
      (14, yyaction14),
      (15, yyaction15),
      (16, yyaction16),
      (17, yyaction17),
      (18, yyaction18),
      (19, yyaction19),
      (20, yyaction20),
      (21, yyaction21),
      (22, yyaction22),
      (23, yyaction23),
      (24, yyaction24),
      (25, yyaction25),
      (26, yyaction26),
      (27, yyaction27),
      (28, yyaction28),
      (29, yyaction29),
      (30, yyaction30),
      (31, yyaction31),
      (32, yyaction32),
      (33, yyaction33),
      (34, yyaction34),
      (35, yyaction35),
      (36, yyaction36),
      (37, yyaction37),
      (38, yyaction38),
      (39, yyaction39),
      (40, yyaction40),
      (41, yyaction41),
      (42, yyaction42),
      (43, yyaction43),
      (44, yyaction44),
      (45, yyaction45),
      (46, yyaction46),
      (47, yyaction47),
      (48, yyaction48),
      (49, yyaction49),
      (50, yyaction50),
      (51, yyaction51),
      (52, yyaction52),
      (53, yyaction53),
      (54, yyaction54),
      (55, yyaction55),
      (56, yyaction56),
      (57, yyaction57),
      (58, yyaction58),
      (59, yyaction59),
      (60, yyaction60),
      (61, yyaction61),
      (62, yyaction62),
      (63, yyaction63)];
    sub2 = [      (64, yyaction64),
      (65, yyaction65),
      (66, yyaction66),
      (67, yyaction67),
      (68, yyaction68),
      (69, yyaction69),
      (70, yyaction70),
      (71, yyaction71),
      (72, yyaction72),
      (73, yyaction73),
      (74, yyaction74),
      (75, yyaction75),
      (76, yyaction76),
      (77, yyaction77),
      (78, yyaction78),
      (79, yyaction79),
      (80, yyaction80),
      (81, yyaction81),
      (82, yyaction82),
      (83, yyaction83),
      (84, yyaction84),
      (85, yyaction85),
      (86, yyaction86),
      (87, yyaction87),
      (88, yyaction88),
      (89, yyaction89),
      (90, yyaction90),
      (91, yyaction91),
      (92, yyaction92),
      (93, yyaction93),
      (94, yyaction94),
      (95, yyaction95),
      (96, yyaction96),
      (97, yyaction97),
      (98, yyaction98),
      (99, yyaction99),
      (100, yyaction100),
      (101, yyaction101),
      (102, yyaction102),
      (103, yyaction103),
      (104, yyaction104),
      (105, yyaction105),
      (106, yyaction106),
      (107, yyaction107),
      (108, yyaction108),
      (109, yyaction109),
      (110, yyaction110),
      (111, yyaction111),
      (112, yyaction112),
      (113, yyaction113),
      (114, yyaction114),
      (115, yyaction115),
      (116, yyaction116),
      (117, yyaction117),
      (118, yyaction118),
      (119, yyaction119),
      (120, yyaction120),
      (121, yyaction121),
      (122, yyaction122),
      (123, yyaction123),
      (124, yyaction124),
      (125, yyaction125),
      (126, yyaction126),
      (127, yyaction127)];
    sub3 = [      (128, yyaction128),
      (129, yyaction129),
      (130, yyaction130),
      (131, yyaction131),
      (132, yyaction132),
      (133, yyaction133),
      (134, yyaction134),
      (135, yyaction135),
      (136, yyaction136),
      (137, yyaction137),
      (138, yyaction138),
      (139, yyaction139),
      (140, yyaction140),
      (141, yyaction141),
      (142, yyaction142),
      (143, yyaction143),
      (144, yyaction144),
      (145, yyaction145),
      (146, yyaction146),
      (147, yyaction147),
      (148, yyaction148),
      (149, yyaction149),
      (150, yyaction150),
      (151, yyaction151),
      (152, yyaction152),
      (153, yyaction153),
      (154, yyaction154),
      (155, yyaction155),
      (156, yyaction156),
      (157, yyaction157),
      (158, yyaction158),
      (159, yyaction159),
      (160, yyaction160),
      (161, yyaction161),
      (162, yyaction162),
      (163, yyaction163),
      (164, yyaction164),
      (165, yyaction165),
      (166, yyaction166),
      (167, yyaction167),
      (168, yyaction168),
      (169, yyaction169),
      (170, yyaction170),
      (171, yyaction171),
      (172, yyaction172),
      (173, yyaction173),
      (174, yyaction174),
      (175, yyaction175),
      (176, yyaction176),
      (177, yyaction177),
      (178, yyaction178),
      (179, yyaction179),
      (180, yyaction180),
      (181, yyaction181),
      (182, yyaction182),
      (183, yyaction183),
      (184, yyaction184),
      (185, yyaction185),
      (186, yyaction186),
      (187, yyaction187),
      (188, yyaction188),
      (189, yyaction189),
      (190, yyaction190),
      (191, yyaction191)];
    sub4 = [      (192, yyaction192),
      (193, yyaction193),
      (194, yyaction194),
      (195, yyaction195),
      (196, yyaction196),
      (197, yyaction197),
      (198, yyaction198),
      (199, yyaction199),
      (200, yyaction200),
      (201, yyaction201),
      (202, yyaction202),
      (203, yyaction203),
      (204, yyaction204),
      (205, yyaction205),
      (206, yyaction206),
      (207, yyaction207),
      (208, yyaction208),
      (209, yyaction209),
      (210, yyaction210),
      (211, yyaction211),
      (212, yyaction212),
      (213, yyaction213),
      (214, yyaction214),
      (215, yyaction215),
      (216, yyaction216),
      (217, yyaction217),
      (218, yyaction218),
      (219, yyaction219),
      (220, yyaction220),
      (221, yyaction221),
      (222, yyaction222),
      (223, yyaction223),
      (224, yyaction224),
      (225, yyaction225),
      (226, yyaction226),
      (227, yyaction227),
      (228, yyaction228),
      (229, yyaction229),
      (230, yyaction230),
      (231, yyaction231),
      (232, yyaction232),
      (233, yyaction233),
      (234, yyaction234),
      (235, yyaction235),
      (236, yyaction236),
      (237, yyaction237),
      (238, yyaction238),
      (239, yyaction239),
      (240, yyaction240),
      (241, yyaction241),
      (242, yyaction242),
      (243, yyaction243),
      (244, yyaction244),
      (245, yyaction245),
      (246, yyaction246),
      (247, yyaction247),
      (248, yyaction248),
      (249, yyaction249),
      (250, yyaction250),
      (251, yyaction251),
      (252, yyaction252),
      (253, yyaction253),
      (254, yyaction254),
      (255, yyaction255)];
    sub5 = [      (256, yyaction256),
      (257, yyaction257),
      (258, yyaction258),
      (259, yyaction259),
      (260, yyaction260),
      (261, yyaction261),
      (262, yyaction262),
      (263, yyaction263),
      (264, yyaction264),
      (265, yyaction265),
      (266, yyaction266),
      (267, yyaction267),
      (268, yyaction268),
      (269, yyaction269),
      (270, yyaction270),
      (271, yyaction271),
      (272, yyaction272),
      (273, yyaction273),
      (274, yyaction274),
      (275, yyaction275),
      (276, yyaction276),
      (277, yyaction277),
      (278, yyaction278),
      (279, yyaction279),
      (280, yyaction280),
      (281, yyaction281),
      (282, yyaction282),
      (283, yyaction283),
      (284, yyaction284),
      (285, yyaction285),
      (286, yyaction286),
      (287, yyaction287),
      (288, yyaction288),
      (289, yyaction289),
      (290, yyaction290),
      (291, yyaction291),
      (292, yyaction292),
      (293, yyaction293),
      (294, yyaction294),
      (295, yyaction295),
      (296, yyaction296),
      (297, yyaction297),
      (298, yyaction298),
      (299, yyaction299),
      (300, yyaction300),
      (301, yyaction301),
      (302, yyaction302),
      (303, yyaction303),
      (304, yyaction304),
      (305, yyaction305),
      (306, yyaction306),
      (307, yyaction307),
      (308, yyaction308),
      (309, yyaction309),
      (310, yyaction310),
      (311, yyaction311),
      (312, yyaction312),
      (313, yyaction313),
      (314, yyaction314),
      (315, yyaction315),
      (316, yyaction316),
      (317, yyaction317),
      (318, yyaction318),
      (319, yyaction319)];
    sub6 = [      (320, yyaction320),
      (321, yyaction321),
      (322, yyaction322),
      (323, yyaction323),
      (324, yyaction324),
      (325, yyaction325),
      (326, yyaction326),
      (327, yyaction327),
      (328, yyaction328),
      (329, yyaction329),
      (330, yyaction330),
      (331, yyaction331),
      (332, yyaction332),
      (333, yyaction333),
      (334, yyaction334),
      (335, yyaction335),
      (336, yyaction336),
      (337, yyaction337),
      (338, yyaction338),
      (339, yyaction339),
      (340, yyaction340),
      (341, yyaction341),
      (342, yyaction342),
      (343, yyaction343),
      (344, yyaction344),
      (345, yyaction345),
      (346, yyaction346),
      (347, yyaction347),
      (348, yyaction348),
      (349, yyaction349),
      (350, yyaction350),
      (351, yyaction351),
      (352, yyaction352),
      (353, yyaction353),
      (354, yyaction354),
      (355, yyaction355),
      (356, yyaction356),
      (357, yyaction357),
      (358, yyaction358),
      (359, yyaction359),
      (360, yyaction360),
      (361, yyaction361),
      (362, yyaction362),
      (363, yyaction363),
      (364, yyaction364),
      (365, yyaction365),
      (366, yyaction366),
      (367, yyaction367),
      (368, yyaction368),
      (369, yyaction369),
      (370, yyaction370),
      (371, yyaction371),
      (372, yyaction372),
      (373, yyaction373),
      (374, yyaction374),
      (375, yyaction375),
      (376, yyaction376),
      (377, yyaction377),
      (378, yyaction378),
      (379, yyaction379),
      (380, yyaction380),
      (381, yyaction381),
      (382, yyaction382),
      (383, yyaction383)];
    sub7 = [      (384, yyaction384),
      (385, yyaction385),
      (386, yyaction386),
      (387, yyaction387),
      (388, yyaction388),
      (389, yyaction389),
      (390, yyaction390),
      (391, yyaction391),
      (392, yyaction392),
      (393, yyaction393),
      (394, yyaction394),
      (395, yyaction395),
      (396, yyaction396),
      (397, yyaction397),
      (398, yyaction398),
      (399, yyaction399),
      (400, yyaction400),
      (401, yyaction401),
      (402, yyaction402),
      (403, yyaction403),
      (404, yyaction404),
      (405, yyaction405),
      (406, yyaction406),
      (407, yyaction407),
      (408, yyaction408),
      (409, yyaction409),
      (410, yyaction410),
      (411, yyaction411),
      (412, yyaction412),
      (413, yyaction413),
      (414, yyaction414),
      (415, yyaction415),
      (416, yyaction416),
      (417, yyaction417),
      (418, yyaction418),
      (419, yyaction419),
      (420, yyaction420),
      (421, yyaction421),
      (422, yyaction422),
      (423, yyaction423),
      (424, yyaction424),
      (425, yyaction425),
      (426, yyaction426),
      (427, yyaction427),
      (428, yyaction428),
      (429, yyaction429),
      (430, yyaction430),
      (431, yyaction431),
      (432, yyaction432),
      (433, yyaction433),
      (434, yyaction434),
      (435, yyaction435),
      (436, yyaction436),
      (437, yyaction437),
      (438, yyaction438),
      (439, yyaction439),
      (440, yyaction440),
      (441, yyaction441),
      (442, yyaction442),
      (443, yyaction443),
      (444, yyaction444),
      (445, yyaction445),
      (446, yyaction446),
      (447, yyaction447)];
    sub8 = [      (448, yyaction448),
      (449, yyaction449),
      (450, yyaction450),
      (451, yyaction451),
      (452, yyaction452),
      (453, yyaction453),
      (454, yyaction454),
      (455, yyaction455),
      (456, yyaction456),
      (457, yyaction457),
      (458, yyaction458),
      (459, yyaction459),
      (460, yyaction460),
      (461, yyaction461),
      (462, yyaction462),
      (463, yyaction463),
      (464, yyaction464),
      (465, yyaction465),
      (466, yyaction466),
      (467, yyaction467),
      (468, yyaction468),
      (469, yyaction469),
      (470, yyaction470),
      (471, yyaction471),
      (472, yyaction472),
      (473, yyaction473),
      (474, yyaction474),
      (475, yyaction475),
      (476, yyaction476),
      (477, yyaction477),
      (478, yyaction478),
      (479, yyaction479),
      (480, yyaction480),
      (481, yyaction481),
      (482, yyaction482),
      (483, yyaction483),
      (484, yyaction484),
      (485, yyaction485),
      (486, yyaction486),
      (487, yyaction487),
      (488, yyaction488),
      (489, yyaction489),
      (490, yyaction490),
      (491, yyaction491),
      (492, yyaction492),
      (493, yyaction493),
      (494, yyaction494),
      (495, yyaction495),
      (496, yyaction496),
      (497, yyaction497),
      (498, yyaction498),
      (499, yyaction499),
      (500, yyaction500),
      (501, yyaction501),
      (502, yyaction502),
      (503, yyaction503),
      (504, yyaction504),
      (505, yyaction505),
      (506, yyaction506),
      (507, yyaction507),
      (508, yyaction508),
      (509, yyaction509),
      (510, yyaction510),
      (511, yyaction511)];
    sub9 = [      (512, yyaction512),
      (513, yyaction513),
      (514, yyaction514),
      (515, yyaction515),
      (516, yyaction516),
      (517, yyaction517),
      (518, yyaction518),
      (519, yyaction519),
      (520, yyaction520),
      (521, yyaction521),
      (522, yyaction522),
      (523, yyaction523),
      (524, yyaction524),
      (525, yyaction525),
      (526, yyaction526),
      (527, yyaction527),
      (528, yyaction528),
      (529, yyaction529),
      (530, yyaction530),
      (531, yyaction531),
      (532, yyaction532),
      (533, yyaction533),
      (534, yyaction534),
      (535, yyaction535),
      (536, yyaction536),
      (537, yyaction537),
      (538, yyaction538),
      (539, yyaction539),
      (540, yyaction540),
      (541, yyaction541),
      (542, yyaction542),
      (543, yyaction543),
      (544, yyaction544),
      (545, yyaction545),
      (546, yyaction546),
      (547, yyaction547),
      (548, yyaction548),
      (549, yyaction549),
      (550, yyaction550),
      (551, yyaction551),
      (552, yyaction552),
      (553, yyaction553),
      (554, yyaction554),
      (555, yyaction555),
      (556, yyaction556),
      (557, yyaction557),
      (558, yyaction558),
      (559, yyaction559),
      (560, yyaction560),
      (561, yyaction561),
      (562, yyaction562),
      (563, yyaction563),
      (564, yyaction564),
      (565, yyaction565),
      (566, yyaction566),
      (567, yyaction567),
      (568, yyaction568),
      (569, yyaction569),
      (570, yyaction570),
      (571, yyaction571),
      (572, yyaction572),
      (573, yyaction573),
      (574, yyaction574),
      (575, yyaction575)];
    sub10 = [      (576, yyaction576),
      (577, yyaction577),
      (578, yyaction578),
      (579, yyaction579),
      (580, yyaction580),
      (581, yyaction581),
      (582, yyaction582),
      (583, yyaction583),
      (584, yyaction584),
      (585, yyaction585),
      (586, yyaction586),
      (587, yyaction587),
      (588, yyaction588),
      (589, yyaction589),
      (590, yyaction590),
      (591, yyaction591),
      (592, yyaction592),
      (593, yyaction593),
      (594, yyaction594),
      (595, yyaction595),
      (596, yyaction596),
      (597, yyaction597),
      (598, yyaction598),
      (599, yyaction599),
      (600, yyaction600),
      (601, yyaction601),
      (602, yyaction602),
      (603, yyaction603),
      (604, yyaction604),
      (605, yyaction605),
      (606, yyaction606),
      (607, yyaction607),
      (608, yyaction608),
      (609, yyaction609),
      (610, yyaction610),
      (611, yyaction611),
      (612, yyaction612),
      (613, yyaction613),
      (614, yyaction614),
      (615, yyaction615),
      (616, yyaction616),
      (617, yyaction617),
      (618, yyaction618),
      (619, yyaction619),
      (620, yyaction620),
      (621, yyaction621),
      (622, yyaction622),
      (623, yyaction623),
      (624, yyaction624),
      (625, yyaction625),
      (626, yyaction626),
      (627, yyaction627),
      (628, yyaction628),
      (629, yyaction629),
      (630, yyaction630),
      (631, yyaction631),
      (632, yyaction632),
      (633, yyaction633),
      (634, yyaction634),
      (635, yyaction635),
      (636, yyaction636),
      (637, yyaction637),
      (638, yyaction638),
      (639, yyaction639)];
    sub11 = [      (640, yyaction640),
      (641, yyaction641),
      (642, yyaction642),
      (643, yyaction643),
      (644, yyaction644),
      (645, yyaction645),
      (646, yyaction646),
      (647, yyaction647),
      (648, yyaction648),
      (649, yyaction649),
      (650, yyaction650),
      (651, yyaction651),
      (652, yyaction652),
      (653, yyaction653),
      (654, yyaction654),
      (655, yyaction655),
      (656, yyaction656),
      (657, yyaction657),
      (658, yyaction658),
      (659, yyaction659),
      (660, yyaction660),
      (661, yyaction661),
      (662, yyaction662),
      (663, yyaction663),
      (664, yyaction664),
      (665, yyaction665),
      (666, yyaction666),
      (667, yyaction667),
      (668, yyaction668),
      (669, yyaction669),
      (670, yyaction670),
      (671, yyaction671),
      (672, yyaction672),
      (673, yyaction673),
      (674, yyaction674),
      (675, yyaction675),
      (676, yyaction676),
      (677, yyaction677),
      (678, yyaction678),
      (679, yyaction679),
      (680, yyaction680),
      (681, yyaction681),
      (682, yyaction682),
      (683, yyaction683),
      (684, yyaction684),
      (685, yyaction685),
      (686, yyaction686),
      (687, yyaction687),
      (688, yyaction688),
      (689, yyaction689),
      (690, yyaction690),
      (691, yyaction691),
      (692, yyaction692),
      (693, yyaction693),
      (694, yyaction694),
      (695, yyaction695),
      (696, yyaction696),
      (697, yyaction697),
      (698, yyaction698),
      (699, yyaction699),
      (700, yyaction700),
      (701, yyaction701),
      (702, yyaction702),
      (703, yyaction703)];
    sub12 = [      (704, yyaction704),
      (705, yyaction705),
      (706, yyaction706),
      (707, yyaction707),
      (708, yyaction708),
      (709, yyaction709),
      (710, yyaction710),
      (711, yyaction711),
      (712, yyaction712),
      (713, yyaction713),
      (714, yyaction714),
      (715, yyaction715),
      (716, yyaction716),
      (717, yyaction717),
      (718, yyaction718),
      (719, yyaction719),
      (720, yyaction720),
      (721, yyaction721),
      (722, yyaction722),
      (723, yyaction723),
      (724, yyaction724),
      (725, yyaction725)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyrecs  = let 
    sub1 = [      (0, yybadstart 0 "a module"),
      (1, yybadstart 1 "a sequence of doc comments"),
      (2, yyparsing  2 "a module clause"),
      (3, yyexpect 3(yyfromId PACKAGE)),
      (4, yyparsing  4 "a module"),
      (5, yyrecover 5),
      (6, yyparsing  6 "a module"),
      (7, yyparsing  7 "a module clause"),
      (8, yyexpect 8(yyfromId DOCUMENTATION)),
      (9, yyparsing  9 "a sequence of doc comments"),
      (10, yyparsing  10 "a variable name"),
      (11, yyparsing  11 "a module name"),
      (12, yyparsing  12 "a module name"),
      (13, yyparsing  13 "a variable name"),
      (14, yyparsing  14 "a variable name"),
      (15, yyparsing  15 "a variable name"),
      (16, yyparsing  16 "a variable name"),
      (17, yyparsing  17 "a variable name"),
      (18, yyparsing  18 "a variable name"),
      (19, yyparsing  19 "a module name"),
      (20, yyexpect 20(yyfromCh '.')),
      (21, yyparsing  21 "a module clause"),
      (22, yyparsing  22 "a module clause"),
      (23, yyparsing  23 "a variable name"),
      (24, yyparsing  24 "a qualified constructor or type name"),
      (25, yyparsing  25 "a qualified variable name"),
      (26, yyparsing  26 "documentation"),
      (27, yyparsing  27 "a module import"),
      (28, yyexpect 28(yyfromId INTCONST)),
      (29, yyexpect 29(yyfromId INTCONST)),
      (30, yyexpect 30(yyfromId INTCONST)),
      (31, yyparsing  31 "specification for module class "),
      (32, yyexpect 32(yyfromId CONID)),
      (33, yyexpect 33(yyfromId CONID)),
      (34, yyparsing  34 "a type class declaration"),
      (35, yyparsing  35 "an instance declaration"),
      (36, yyparsing  36 "a protected or private declaration"),
      (37, yyexpect 37(yyfromId CONID)),
      (38, yyparsing  38 "a literal"),
      (39, yyparsing  39 "a literal"),
      (40, yyparsing  40 "a top level expression"),
      (41, yyparsing  41 "a top level expression"),
      (42, yyparsing  42 "an instance derivation"),
      (43, yyexpect 43(yyfromCh '{')),
      (44, yyexpect 44(yyfromCh '{')),
      (45, yyparsing  45 "a protected or private declaration"),
      (46, yyparsing  46 "a protected or private declaration"),
      (47, yyparsing  47 "a protected or private declaration"),
      (48, yyexpect 48(yyfromId NATIVE)),
      (49, yyparsing  49 "a literal"),
      (50, yyparsing  50 "a literal"),
      (51, yyparsing  51 "a literal"),
      (52, yyparsing  52 "a literal"),
      (53, yyparsing  53 "a literal"),
      (54, yyparsing  54 "a literal"),
      (55, yyparsing  55 "a literal"),
      (56, yyparsing  56 "a literal"),
      (57, yyparsing  57 "binary expression"),
      (58, yyparsing  58 "an annotated item"),
      (59, yyparsing  59 "a term"),
      (60, yyparsing  60 "an unary operator"),
      (61, yyparsing  61 "an unary operator"),
      (62, yyparsing  62 "a lambda abstraction"),
      (63, yyparsing  63 "a term")];
    sub2 = [      (64, yyexpect 64(yyfromCh '}')),
      (65, yyparsing  65 "declarations"),
      (66, yyparsing  66 "a declaration"),
      (67, yyparsing  67 "a declaration"),
      (68, yyparsing  68 "a declaration"),
      (69, yyparsing  69 "a top level declaration"),
      (70, yyparsing  70 "a declaration"),
      (71, yyparsing  71 "a top level declaration"),
      (72, yyparsing  72 "a top level declaration"),
      (73, yyparsing  73 "a top level declaration"),
      (74, yyparsing  74 "a declaration"),
      (75, yyparsing  75 "a declaration"),
      (76, yyparsing  76 "a declaration"),
      (77, yyparsing  77 "a declaration"),
      (78, yyparsing  78 "a declaration"),
      (79, yyparsing  79 "a local declaration"),
      (80, yyparsing  80 "a local declaration"),
      (81, yybadstart 81 "a where clause"),
      (82, yyparsing  82 "an annotated item"),
      (83, yyparsing  83 "a term"),
      (84, yyparsing  84 "a term"),
      (85, yyparsing  85 "unary expression"),
      (86, yyparsing  86 "a fixity declaration"),
      (87, yyexpect 87(yyfromId DCOLON)),
      (88, yyparsing  88 "a list of items to annotate"),
      (89, yyparsing  89 "a declaration of a native item"),
      (90, yybadstart 90 "declarations local to a class, instance or type"),
      (91, yyparsing  91 "a function or pattern binding"),
      (92, yyparsing  92 "left hand side of a function or pattern binding"),
      (93, yyparsing  93 "a term"),
      (94, yyparsing  94 "a top level expression"),
      (95, yyparsing  95 "binary expression"),
      (96, yyparsing  96 "a top level expression"),
      (97, yyparsing  97 "function application"),
      (98, yyparsing  98 "unary expression"),
      (99, yyexpect 99(yyfromCh '{')),
      (100, yyparsing  100 "a primary expression"),
      (101, yyparsing  101 "a word"),
      (102, yyexpect 102(yyfromCh '{')),
      (103, yyparsing  103 "a module"),
      (104, yyexpect 104(yyfromCh '(')),
      (105, yyparsing  105 "words"),
      (106, yyparsing  106 "a module clause"),
      (107, yyexpect 107(yyfromId PACKAGE)),
      (108, yyparsing  108 "a sequence of doc comments"),
      (109, yyparsing  109 "a module name"),
      (110, yyparsing  110 "a module name"),
      (111, yyparsing  111 "a module clause"),
      (112, yyparsing  112 "a variable or an operator"),
      (113, yyparsing  113 "a qualified constructor or type name"),
      (114, yyparsing  114 "a qualified variable name"),
      (115, yyparsing  115 "a variable or an operator"),
      (116, yyparsing  116 "a qualified variable name"),
      (117, yyparsing  117 "a module import"),
      (118, yyparsing  118 "the start of a fixity declaration"),
      (119, yyparsing  119 "the start of a fixity declaration"),
      (120, yyparsing  120 "the start of a fixity declaration"),
      (121, yyparsing  121 "a variable name"),
      (122, yybadstart 122 "the type this module derives from"),
      (123, yyparsing  123 "an operator"),
      (124, yyparsing  124 "the frege name of the native method"),
      (125, yyparsing  125 "an annotated item"),
      (126, yyparsing  126 "the frege name of the native method"),
      (127, yyparsing  127 "the frege name of the native method")];
    sub3 = [      (128, yyparsing  128 "the frege name of the native method"),
      (129, yyparsing  129 "a specification of a native item"),
      (130, yyexpect 130(yyfromId DCOLON)),
      (131, yyparsing  131 "a data definition"),
      (132, yyparsing  132 "a data definition"),
      (133, yyparsing  133 "a qualified constructor or type name"),
      (134, yyparsing  134 "type class context"),
      (135, yybadstart 135 "a type variable"),
      (136, yyparsing  136 "type class context"),
      (137, yybadstart 137 "declarations local to a class, instance or type"),
      (138, yyparsing  138 "instance context"),
      (139, yyparsing  139 "instance constraint"),
      (140, yyparsing  140 "instance context"),
      (141, yyparsing  141 "instance head"),
      (142, yybadstart 142 "declarations local to a class, instance or type"),
      (143, yyparsing  143 "a protected or private declaration"),
      (144, yyparsing  144 "a type declaration"),
      (145, yyparsing  145 "a qualified variable name"),
      (146, yyparsing  146 "a term"),
      (147, yybadstart 147 "then branch"),
      (148, yyparsing  148 "an expression"),
      (149, yyexpect 149(yyfromId OF)),
      (150, yyparsing  150 "an instance derivation"),
      (151, yyparsing  151 "a top level expression"),
      (152, yyparsing  152 "a primary expression"),
      (153, yyparsing  153 "a declaration of a native item"),
      (154, yyparsing  154 "a protected or private declaration"),
      (155, yyparsing  155 "a protected or private declaration"),
      (156, yyparsing  156 "a protected or private declaration"),
      (157, yyparsing  157 "a declaration of a native item"),
      (158, yyparsing  158 "binary expression"),
      (159, yyparsing  159 "an annotated item"),
      (160, yyparsing  160 "a term"),
      (161, yybadstart 161 "a sequence of one or more ','"),
      (162, yyparsing  162 "an annotated item"),
      (163, yyparsing  163 "an annotated item"),
      (164, yyexpect 164(yyfromCh ')')),
      (165, yyparsing  165 "a term"),
      (166, yybadstart 166 "an operator"),
      (167, yyparsing  167 "a term"),
      (168, yyparsing  168 "a term"),
      (169, yyparsing  169 "a term"),
      (170, yyparsing  170 "a lambda abstraction"),
      (171, yyparsing  171 "lambda patterns"),
      (172, yyparsing  172 "a module"),
      (173, yyparsing  173 "declarations"),
      (174, yyexpect 174(yyfromCh '{')),
      (175, yyparsing  175 "a function or pattern binding"),
      (176, yyparsing  176 "a term"),
      (177, yyparsing  177 "unary expression"),
      (178, yyparsing  178 "an operator"),
      (179, yyparsing  179 "an operator"),
      (180, yyparsing  180 "an operator"),
      (181, yyparsing  181 "some operators"),
      (182, yyparsing  182 "a fixity declaration"),
      (183, yyparsing  183 "an annotation"),
      (184, yyparsing  184 "a list of items to annotate"),
      (185, yyexpect 185(yyfromCh '{')),
      (186, yyparsing  186 "a data definition"),
      (187, yyparsing  187 "a guarded expression"),
      (188, yyparsing  188 "a function or pattern binding"),
      (189, yyparsing  189 "a function or pattern binding"),
      (190, yyparsing  190 "guarded expressions"),
      (191, yyparsing  191 "binary expression")];
    sub4 = [      (192, yyparsing  192 "binary expression"),
      (193, yyparsing  193 "function application"),
      (194, yyparsing  194 "a primary expression"),
      (195, yyexpect 195(yyfromId VARID)),
      (196, yyparsing  196 "a module"),
      (197, yyparsing  197 "a module"),
      (198, yyparsing  198 "a module clause"),
      (199, yyparsing  199 "words"),
      (200, yyparsing  200 "a module clause"),
      (201, yyparsing  201 "a module clause"),
      (202, yyparsing  202 "a module name"),
      (203, yyparsing  203 "a qualified constructor or type name"),
      (204, yyparsing  204 "a qualified variable name"),
      (205, yyparsing  205 "a module import"),
      (206, yyparsing  206 "a module import"),
      (207, yyparsing  207 "an import list"),
      (208, yyparsing  208 "an import list"),
      (209, yyparsing  209 "a module import"),
      (210, yyexpect 210(yyfromCh '(')),
      (211, yyparsing  211 "the type this module derives from"),
      (212, yybadstart 212 "the interfaces this module implements"),
      (213, yyexpect 213(yyfromCh ')')),
      (214, yyexpect 214(yyfromCh ')')),
      (215, yyexpect 215(yyfromCh ')')),
      (216, yyparsing  216 "a valid java identifier"),
      (217, yyparsing  217 "a valid java identifier"),
      (218, yybadstart 218 "a valid java identifier"),
      (219, yyparsing  219 "a valid java identifier"),
      (220, yyparsing  220 "a valid java identifier"),
      (221, yyparsing  221 "native generic type arguments"),
      (222, yyparsing  222 "a native item"),
      (223, yyparsing  223 "a valid java identifier"),
      (224, yyparsing  224 "a native item"),
      (225, yyparsing  225 "a native item"),
      (226, yybadstart 226 "native generic type arguments"),
      (227, yyparsing  227 "a specification of a native item"),
      (228, yyparsing  228 "a declaration of a native item"),
      (229, yyparsing  229 "a type variable"),
      (230, yyexpect 230(yyfromId VARID)),
      (231, yyparsing  231 "a data definition"),
      (232, yyparsing  232 "a sequence of type variables"),
      (233, yyexpect 233(yyfromCh '=')),
      (234, yyparsing  234 "a data definition"),
      (235, yyexpect 235(yyfromCh '=')),
      (236, yyexpect 236(yyfromId CONID)),
      (237, yyparsing  237 "simple constraints"),
      (238, yyexpect 238(yyfromCh ')')),
      (239, yyparsing  239 "simple constraint"),
      (240, yyexpect 240(yyfromId CONID)),
      (241, yyparsing  241 "a type class declaration"),
      (242, yyparsing  242 "instance constraints"),
      (243, yyexpect 243(yyfromCh ')')),
      (244, yyparsing  244 "a non function type"),
      (245, yyparsing  245 "a non function type"),
      (246, yyparsing  246 "a type constructor"),
      (247, yyparsing  247 "instance constraint"),
      (248, yyparsing  248 "a non function type"),
      (249, yyparsing  249 "a non function type"),
      (250, yyparsing  250 "instance head"),
      (251, yyparsing  251 "an instance declaration"),
      (252, yyparsing  252 "a type declaration"),
      (253, yyexpect 253(yyfromCh '=')),
      (254, yyparsing  254 "binary expression"),
      (255, yyparsing  255 "a term")];
    sub5 = [      (256, yyparsing  256 "unary expression"),
      (257, yyparsing  257 "then branch"),
      (258, yyexpect 258(yyfromId THEN)),
      (259, yyparsing  259 "a top level expression"),
      (260, yyparsing  260 "an expression"),
      (261, yyexpect 261(yyfromCh '{')),
      (262, yyparsing  262 "a function or pattern binding"),
      (263, yybadstart 263 "a where clause"),
      (264, yyparsing  264 "declarations in a let expression or where clause"),
      (265, yyexpect 265(yyfromCh '}')),
      (266, yyexpect 266(yyfromCh '{')),
      (267, yyparsing  267 "a list comprehension qualifier"),
      (268, yyparsing  268 "do expression qualifiers"),
      (269, yyparsing  269 "a list comprehension qualifier"),
      (270, yyexpect 270(yyfromCh '}')),
      (271, yyparsing  271 "an annotated item"),
      (272, yyparsing  272 "a sequence of one or more ','"),
      (273, yyparsing  273 "an annotated item"),
      (274, yyexpect 274(yyfromCh ')')),
      (275, yyparsing  275 "an annotated item"),
      (276, yyparsing  276 "a term"),
      (277, yyparsing  277 "a term"),
      (278, yyparsing  278 "a term"),
      (279, yyparsing  279 "a term"),
      (280, yyparsing  280 "an operator"),
      (281, yyparsing  281 "binary expression"),
      (282, yyexpect 282(yyfromCh ')')),
      (283, yyparsing  283 "list of expressions separated by ','"),
      (284, yyparsing  284 "a term"),
      (285, yyparsing  285 "a term"),
      (286, yyparsing  286 "a term"),
      (287, yyparsing  287 "a lambda body"),
      (288, yyparsing  288 "a lambda body"),
      (289, yyparsing  289 "a lambda abstraction"),
      (290, yyparsing  290 "lambda patterns"),
      (291, yyparsing  291 "declarations"),
      (292, yyparsing  292 "a where clause"),
      (293, yyparsing  293 "a term"),
      (294, yyparsing  294 "field"),
      (295, yyexpect 295(yyfromCh '}')),
      (296, yyparsing  296 "field list"),
      (297, yyparsing  297 "some operators"),
      (298, yyexpect 298(yyfromId VARID)),
      (299, yyparsing  299 "an annotation"),
      (300, yyparsing  300 "a qualified type"),
      (301, yyparsing  301 "a qualified type"),
      (302, yyparsing  302 "a constrained type"),
      (303, yyparsing  303 "a constrained type"),
      (304, yyparsing  304 "a type application"),
      (305, yyparsing  305 "non function types"),
      (306, yyparsing  306 "a list of items to annotate"),
      (307, yyparsing  307 "declarations local to a class, instance or type"),
      (308, yyparsing  308 "a guard qualifier"),
      (309, yyparsing  309 "guard qualifiers"),
      (310, yybadstart 310 "'='"),
      (311, yyparsing  311 "a function or pattern binding"),
      (312, yyparsing  312 "guarded expressions"),
      (313, yyparsing  313 "binary expression"),
      (314, yyparsing  314 "binary expression"),
      (315, yyparsing  315 "a primary expression"),
      (316, yyexpect 316(yyfromId VARID)),
      (317, yyparsing  317 "a primary expression"),
      (318, yyparsing  318 "a primary expression"),
      (319, yyparsing  319 "a primary expression")];
    sub6 = [      (320, yyparsing  320 "a primary expression"),
      (321, yyexpect 321(yyfromCh '}')),
      (322, yyparsing  322 "field list"),
      (323, yyexpect 323(yyfromCh '}')),
      (324, yyparsing  324 "a qualified variable name"),
      (325, yyexpect 325(yyfromCh ')')),
      (326, yyparsing  326 "a qualified variable name"),
      (327, yyparsing  327 "a list of qualified variable names"),
      (328, yyparsing  328 "a qualified variable name"),
      (329, yyparsing  329 "a module clause"),
      (330, yyparsing  330 "a module import"),
      (331, yyparsing  331 "a module import"),
      (332, yyparsing  332 "an import list"),
      (333, yyparsing  333 "an import item"),
      (334, yyparsing  334 "a qualified variable name"),
      (335, yyparsing  335 "an import specification"),
      (336, yyparsing  336 "an import list"),
      (337, yyexpect 337(yyfromCh ')')),
      (338, yyparsing  338 "a list of import items"),
      (339, yyparsing  339 "an import specification"),
      (340, yyparsing  340 "an import item"),
      (341, yyparsing  341 "an import item"),
      (342, yyparsing  342 "an import item"),
      (343, yyparsing  343 "an import item"),
      (344, yyparsing  344 "an import list"),
      (345, yyparsing  345 "the type this module derives from"),
      (346, yyparsing  346 "a non function type"),
      (347, yyparsing  347 "a non function type"),
      (348, yyparsing  348 "the interfaces this module implements"),
      (349, yyexpect 349(yyfromId WHERE)),
      (350, yyparsing  350 "an annotated item"),
      (351, yyparsing  351 "an annotated item"),
      (352, yyparsing  352 "an annotated item"),
      (353, yybadstart 353 "a valid java identifier"),
      (354, yyparsing  354 "a valid java identifier"),
      (355, yybadstart 355 "a valid java identifier"),
      (356, yyparsing  356 "native generic type arguments"),
      (357, yyparsing  357 "a list of types"),
      (358, yyexpect 358(yyfromCh '}')),
      (359, yyparsing  359 "a specification of a native item"),
      (360, yyparsing  360 "a method type with optional throws clause"),
      (361, yyparsing  361 "method types with optional throws clauses"),
      (362, yyparsing  362 "a declaration of a native item"),
      (363, yyexpect 363(yyfromId DCOLON)),
      (364, yyparsing  364 "a variant of an algebraic datatype"),
      (365, yyparsing  365 "a variant of an algebraic datatype"),
      (366, yyparsing  366 "a variant of an algebraic datatype"),
      (367, yyparsing  367 "a variant of an algebraic datatype"),
      (368, yyparsing  368 "a variant of an algebraic datatype"),
      (369, yyexpect 369(yyfromId CONID)),
      (370, yyexpect 370(yyfromId CONID)),
      (371, yyparsing  371 "a data definition"),
      (372, yyparsing  372 "a variant of an algebraic datatype"),
      (373, yyparsing  373 "a variant of an algebraic datatype"),
      (374, yyparsing  374 "a variant of an algebraic datatype"),
      (375, yyparsing  375 "a sequence of type variables"),
      (376, yyparsing  376 "a data definition"),
      (377, yyparsing  377 "a native data type"),
      (378, yyexpect 378(yyfromId NATIVE)),
      (379, yyexpect 379(yyfromId NATIVE)),
      (380, yyparsing  380 "a data definition"),
      (381, yyparsing  381 "a data definition"),
      (382, yyparsing  382 "an algebraic datatype"),
      (383, yyparsing  383 "a data definition")];
    sub7 = [      (384, yyparsing  384 "simple constraints"),
      (385, yyparsing  385 "type class context"),
      (386, yybadstart 386 "a type variable"),
      (387, yyparsing  387 "instance constraints"),
      (388, yyparsing  388 "instance context"),
      (389, yyparsing  389 "a type variable"),
      (390, yyexpect 390(yyfromCh ')')),
      (391, yyparsing  391 "a type constructor"),
      (392, yyparsing  392 "a non function type"),
      (393, yyexpect 393(yyfromCh ')')),
      (394, yyparsing  394 "a type constructor"),
      (395, yyexpect 395(yyfromCh ']')),
      (396, yybadstart 396 "a sequence of one or more ','"),
      (397, yyexpect 397(yyfromCh ']')),
      (398, yyparsing  398 "instance head"),
      (399, yyparsing  399 "a type declaration"),
      (400, yyparsing  400 "a type declaration"),
      (401, yyparsing  401 "a term"),
      (402, yyparsing  402 "a term"),
      (403, yyparsing  403 "a term"),
      (404, yyparsing  404 "then branch"),
      (405, yybadstart 405 "else branch"),
      (406, yyparsing  406 "an expression"),
      (407, yyparsing  407 "a top level expression"),
      (408, yyparsing  408 "declarations in a let expression or where clause"),
      (409, yyexpect 409(yyfromId IN)),
      (410, yyparsing  410 "a list comprehension qualifier"),
      (411, yyparsing  411 "a guard qualifier"),
      (412, yyparsing  412 "a list comprehension qualifier"),
      (413, yyparsing  413 "do expression qualifiers"),
      (414, yyparsing  414 "a primary expression"),
      (415, yyparsing  415 "a term"),
      (416, yyparsing  416 "list of expressions separated by ';'"),
      (417, yyexpect 417(yyfromCh ')')),
      (418, yyparsing  418 "list of expressions separated by ','"),
      (419, yyexpect 419(yyfromCh ')')),
      (420, yyparsing  420 "a term"),
      (421, yyparsing  421 "a term"),
      (422, yyparsing  422 "list of expressions separated by ','"),
      (423, yyparsing  423 "list comprehension qualifiers"),
      (424, yyexpect 424(yyfromCh ']')),
      (425, yyparsing  425 "a term"),
      (426, yyexpect 426(yyfromCh ']')),
      (427, yyparsing  427 "a lambda body"),
      (428, yyparsing  428 "a where clause"),
      (429, yyexpect 429(yyfromCh '}')),
      (430, yyparsing  430 "field"),
      (431, yyparsing  431 "a term"),
      (432, yyparsing  432 "field list"),
      (433, yyparsing  433 "a type variable bound in a forall"),
      (434, yybadstart 434 "'.' or 'â¢'"),
      (435, yyparsing  435 "type variables bound in a forall"),
      (436, yyparsing  436 "a type"),
      (437, yyparsing  437 "a constrained type"),
      (438, yyparsing  438 "non function types"),
      (439, yyparsing  439 "a protected or private local declaration"),
      (440, yyparsing  440 "a protected or private local declaration"),
      (441, yyparsing  441 "a protected or private local declaration"),
      (442, yyparsing  442 "declarations local to a class, instance or type"),
      (443, yyparsing  443 "a commented local declaration"),
      (444, yyparsing  444 "a protected or private local declaration"),
      (445, yyexpect 445(yyfromCh '}')),
      (446, yyparsing  446 "local declarations"),
      (447, yyparsing  447 "a commented local declaration")];
    sub8 = [      (448, yyparsing  448 "guard qualifiers"),
      (449, yyparsing  449 "'='"),
      (450, yyparsing  450 "'='"),
      (451, yyparsing  451 "a guarded expression"),
      (452, yyparsing  452 "a primary expression"),
      (453, yyexpect 453(yyfromCh '}')),
      (454, yyexpect 454(yyfromCh ']')),
      (455, yyparsing  455 "a primary expression"),
      (456, yyexpect 456(yyfromCh '}')),
      (457, yyparsing  457 "a primary expression"),
      (458, yyparsing  458 "a primary expression"),
      (459, yyparsing  459 "field list"),
      (460, yyparsing  460 "a module"),
      (461, yyparsing  461 "a qualified variable name"),
      (462, yyparsing  462 "a qualified variable name"),
      (463, yyparsing  463 "a module clause"),
      (464, yyparsing  464 "a list of qualified variable names"),
      (465, yyparsing  465 "a module import"),
      (466, yyparsing  466 "an import item"),
      (467, yyparsing  467 "a qualified variable name"),
      (468, yyparsing  468 "an import specification"),
      (469, yyparsing  469 "an import list"),
      (470, yyparsing  470 "a list of import items"),
      (471, yyparsing  471 "a simple name for a member or import item"),
      (472, yyparsing  472 "a simple name for a member or import item"),
      (473, yyparsing  473 "a simple name for a member or import item"),
      (474, yyparsing  474 "an import specification"),
      (475, yyexpect 475(yyfromCh ')')),
      (476, yyparsing  476 "a non function type"),
      (477, yyparsing  477 "the interfaces this module implements"),
      (478, yyexpect 478(yyfromCh '{')),
      (479, yyparsing  479 "specification for module class "),
      (480, yyparsing  480 "a valid java identifier"),
      (481, yyparsing  481 "a valid java identifier"),
      (482, yyparsing  482 "a list of types"),
      (483, yyparsing  483 "native generic type arguments"),
      (484, yyparsing  484 "a method type with optional throws clause"),
      (485, yyparsing  485 "method types with optional throws clauses"),
      (486, yyparsing  486 "a type variable"),
      (487, yyparsing  487 "a variant of an algebraic datatype"),
      (488, yyparsing  488 "constructor types"),
      (489, yyparsing  489 "a variant of an algebraic datatype"),
      (490, yyparsing  490 "a variant of an algebraic datatype"),
      (491, yyparsing  491 "a variant of an algebraic datatype"),
      (492, yyparsing  492 "a variant of an algebraic datatype"),
      (493, yyparsing  493 "a variant of an algebraic datatype"),
      (494, yyparsing  494 "a variant of an algebraic datatype"),
      (495, yyparsing  495 "a variant of an algebraic datatype"),
      (496, yyparsing  496 "a variant of an algebraic datatype"),
      (497, yyparsing  497 "a data definition"),
      (498, yyparsing  498 "a native data type"),
      (499, yyparsing  499 "a native data type"),
      (500, yybadstart 500 "native generic type arguments"),
      (501, yyparsing  501 "a data definition"),
      (502, yyparsing  502 "an algebraic datatype"),
      (503, yyparsing  503 "a data definition"),
      (504, yyparsing  504 "a data definition"),
      (505, yyparsing  505 "simple constraints"),
      (506, yybadstart 506 "declarations local to a class, instance or type"),
      (507, yyparsing  507 "instance constraints"),
      (508, yyparsing  508 "a type constructor"),
      (509, yyparsing  509 "a non function type"),
      (510, yyparsing  510 "a non function type"),
      (511, yyparsing  511 "a non function type")];
    sub9 = [      (512, yyparsing  512 "a type constructor"),
      (513, yyparsing  513 "a non function type"),
      (514, yyparsing  514 "instance head"),
      (515, yyparsing  515 "a type declaration"),
      (516, yyparsing  516 "else branch"),
      (517, yyexpect 517(yyfromId ELSE)),
      (518, yyparsing  518 "a top level expression"),
      (519, yyparsing  519 "a pattern"),
      (520, yyparsing  520 "case alternative"),
      (521, yybadstart 521 "a where clause"),
      (522, yyexpect 522(yyfromCh '}')),
      (523, yyparsing  523 "declarations in a let expression or where clause"),
      (524, yyparsing  524 "a top level expression"),
      (525, yyexpect 525(yyfromCh '}')),
      (526, yyparsing  526 "a guard qualifier"),
      (527, yyparsing  527 "a list comprehension qualifier"),
      (528, yyparsing  528 "do expression qualifiers"),
      (529, yyparsing  529 "list of expressions separated by ';'"),
      (530, yyparsing  530 "a term"),
      (531, yyparsing  531 "a term"),
      (532, yyparsing  532 "list comprehension qualifiers"),
      (533, yyparsing  533 "a term"),
      (534, yyparsing  534 "a term"),
      (535, yyparsing  535 "a where clause"),
      (536, yyparsing  536 "field"),
      (537, yyparsing  537 "field list"),
      (538, yyparsing  538 "'.' or 'â¢'"),
      (539, yyparsing  539 "'.' or 'â¢'"),
      (540, yyparsing  540 "a qualified type"),
      (541, yyparsing  541 "type variables bound in a forall"),
      (542, yyparsing  542 "a type"),
      (543, yyparsing  543 "a type"),
      (544, yyparsing  544 "a constrained type"),
      (545, yyparsing  545 "a protected or private local declaration"),
      (546, yyparsing  546 "a protected or private local declaration"),
      (547, yyparsing  547 "a protected or private local declaration"),
      (548, yyparsing  548 "a commented local declaration"),
      (549, yyparsing  549 "declarations local to a class, instance or type"),
      (550, yyparsing  550 "local declarations"),
      (551, yyparsing  551 "guard qualifiers"),
      (552, yyparsing  552 "a guarded expression"),
      (553, yyparsing  553 "a primary expression"),
      (554, yyexpect 554(yyfromCh '}')),
      (555, yyparsing  555 "a primary expression"),
      (556, yyparsing  556 "a primary expression"),
      (557, yyparsing  557 "a primary expression"),
      (558, yyparsing  558 "a primary expression"),
      (559, yyparsing  559 "field"),
      (560, yyparsing  560 "a primary expression"),
      (561, yyparsing  561 "a primary expression"),
      (562, yyparsing  562 "field"),
      (563, yyparsing  563 "field"),
      (564, yyparsing  564 "field list"),
      (565, yyparsing  565 "a qualified variable name"),
      (566, yyparsing  566 "a list of qualified variable names"),
      (567, yyparsing  567 "a member import specification"),
      (568, yyparsing  568 "an import item"),
      (569, yyexpect 569(yyfromCh ')')),
      (570, yyparsing  570 "a member import specification"),
      (571, yyparsing  571 "a list of member imports"),
      (572, yyparsing  572 "a list of import items"),
      (573, yyparsing  573 "an import list"),
      (574, yyparsing  574 "a non function type"),
      (575, yyparsing  575 "java code")];
    sub10 = [      (576, yyparsing  576 "a list of types"),
      (577, yyparsing  577 "a method type with optional throws clause"),
      (578, yyparsing  578 "method types with optional throws clauses"),
      (579, yyparsing  579 "a type kind"),
      (580, yyparsing  580 "a type kind"),
      (581, yyparsing  581 "a type kind"),
      (582, yyexpect 582(yyfromCh ')')),
      (583, yyparsing  583 "a type kind"),
      (584, yyparsing  584 "a field specification"),
      (585, yyparsing  585 "a field specification"),
      (586, yyexpect 586(yyfromId VARID)),
      (587, yyexpect 587(yyfromId VARID)),
      (588, yyparsing  588 "a constructor field"),
      (589, yyparsing  589 "a field specification"),
      (590, yyexpect 590(yyfromCh '}')),
      (591, yyparsing  591 "constructor fields"),
      (592, yyexpect 592(yyfromId DCOLON)),
      (593, yyparsing  593 "field specifications"),
      (594, yyparsing  594 "a field specification"),
      (595, yyparsing  595 "a field specification"),
      (596, yyparsing  596 "a native generic type"),
      (597, yyparsing  597 "an algebraic datatype"),
      (598, yyparsing  598 "a data definition"),
      (599, yyparsing  599 "a type class declaration"),
      (600, yyexpect 600(yyfromCh ')')),
      (601, yyparsing  601 "a list of types separated by '|'"),
      (602, yyexpect 602(yyfromCh ')')),
      (603, yyparsing  603 "else branch"),
      (604, yyparsing  604 "a top level expression"),
      (605, yyparsing  605 "case alternative"),
      (606, yyparsing  606 "case alternative"),
      (607, yyparsing  607 "list of case alternatives"),
      (608, yyparsing  608 "case alternative"),
      (609, yyparsing  609 "a top level expression"),
      (610, yyparsing  610 "a top level expression"),
      (611, yyparsing  611 "a list comprehension qualifier"),
      (612, yyparsing  612 "list of expressions separated by ';'"),
      (613, yyparsing  613 "list comprehension qualifiers"),
      (614, yyparsing  614 "a qualified type"),
      (615, yyparsing  615 "local declarations"),
      (616, yyparsing  616 "a primary expression"),
      (617, yyparsing  617 "a primary expression"),
      (618, yyparsing  618 "a primary expression"),
      (619, yyparsing  619 "field"),
      (620, yyparsing  620 "field"),
      (621, yyparsing  621 "a member import specification"),
      (622, yyparsing  622 "an import item"),
      (623, yyparsing  623 "a member import specification"),
      (624, yyparsing  624 "a list of member imports"),
      (625, yyparsing  625 "java token"),
      (626, yyparsing  626 "java token"),
      (627, yyparsing  627 "java token"),
      (628, yyparsing  628 "java token"),
      (629, yyparsing  629 "java token"),
      (630, yyparsing  630 "java token"),
      (631, yyparsing  631 "java token"),
      (632, yyparsing  632 "java token"),
      (633, yyparsing  633 "java token"),
      (634, yyparsing  634 "java token"),
      (635, yyparsing  635 "java token"),
      (636, yyparsing  636 "java token"),
      (637, yyparsing  637 "java token"),
      (638, yyparsing  638 "java token"),
      (639, yyparsing  639 "java token")];
    sub11 = [      (640, yyparsing  640 "java token"),
      (641, yyparsing  641 "java token"),
      (642, yyparsing  642 "java token"),
      (643, yyparsing  643 "java token"),
      (644, yyparsing  644 "java token"),
      (645, yyparsing  645 "java token"),
      (646, yyparsing  646 "java token"),
      (647, yyparsing  647 "java token"),
      (648, yyparsing  648 "java token"),
      (649, yyparsing  649 "java token"),
      (650, yyparsing  650 "java token"),
      (651, yyparsing  651 "java token"),
      (652, yyparsing  652 "java token"),
      (653, yyparsing  653 "java token"),
      (654, yyparsing  654 "java token"),
      (655, yyparsing  655 "java token"),
      (656, yyparsing  656 "java token"),
      (657, yyparsing  657 "java token"),
      (658, yyparsing  658 "java token"),
      (659, yyparsing  659 "java token"),
      (660, yyparsing  660 "java token"),
      (661, yyparsing  661 "java token"),
      (662, yyparsing  662 "java token"),
      (663, yyparsing  663 "java token"),
      (664, yyparsing  664 "java token"),
      (665, yyparsing  665 "java token"),
      (666, yyparsing  666 "java token"),
      (667, yyparsing  667 "java token"),
      (668, yyparsing  668 "java token"),
      (669, yyparsing  669 "java token"),
      (670, yyparsing  670 "java token"),
      (671, yyparsing  671 "java token"),
      (672, yyparsing  672 "java token"),
      (673, yyparsing  673 "java token"),
      (674, yyparsing  674 "java token"),
      (675, yyparsing  675 "java token"),
      (676, yyparsing  676 "java tokens"),
      (677, yyparsing  677 "java code"),
      (678, yyparsing  678 "java token"),
      (679, yyparsing  679 "java token"),
      (680, yyparsing  680 "java token"),
      (681, yyparsing  681 "java token"),
      (682, yyparsing  682 "java token"),
      (683, yyparsing  683 "java token"),
      (684, yyparsing  684 "java token"),
      (685, yyparsing  685 "java token"),
      (686, yyparsing  686 "java token"),
      (687, yyparsing  687 "java token"),
      (688, yyparsing  688 "java token"),
      (689, yyexpect 689(yyfromCh '}')),
      (690, yyparsing  690 "java tokens"),
      (691, yyexpect 691(yyfromCh ')')),
      (692, yyparsing  692 "a type variable"),
      (693, yyparsing  693 "a type kind"),
      (694, yyparsing  694 "a field specification"),
      (695, yyparsing  695 "a field specification"),
      (696, yyparsing  696 "a field specification"),
      (697, yyparsing  697 "a field specification"),
      (698, yyexpect 698(yyfromId DCOLON)),
      (699, yyparsing  699 "a variant of an algebraic datatype"),
      (700, yyparsing  700 "constructor fields"),
      (701, yyparsing  701 "constructor fields"),
      (702, yyparsing  702 "a constructor field"),
      (703, yyparsing  703 "field specifications")];
    sub12 = [      (704, yyparsing  704 "a non function type"),
      (705, yyparsing  705 "a list of types separated by '|'"),
      (706, yyparsing  706 "a non function type"),
      (707, yyparsing  707 "case alternative"),
      (708, yyparsing  708 "list of case alternatives"),
      (709, yyparsing  709 "a list of member imports"),
      (710, yyparsing  710 "java tokens"),
      (711, yyexpect 711(yyfromCh '}')),
      (712, yyparsing  712 "java code"),
      (713, yyparsing  713 "java tokens"),
      (714, yyparsing  714 "a type kind"),
      (715, yyparsing  715 "a type kind"),
      (716, yyparsing  716 "a constructor field"),
      (717, yyparsing  717 "constructor fields"),
      (718, yyparsing  718 "constructor fields"),
      (719, yyparsing  719 "a constructor field"),
      (720, yyparsing  720 "field specifications"),
      (721, yyparsing  721 "a list of types separated by '|'"),
      (722, yyparsing  722 "java tokens"),
      (723, yyparsing  723 "java tokens"),
      (724, yyparsing  724 "a constructor field"),
      (725, yyparsing  725 "java tokens")];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyeacts = let 
    sub1 = [      (5, yyAccept),
      (9, (-17)),
      (10, (-171)),
      (11, (-12)),
      (13, (-176)),
      (14, (-177)),
      (15, (-174)),
      (16, (-172)),
      (17, (-173)),
      (18, (-175)),
      (19, (-15)),
      (21, (-20)),
      (24, (-185)),
      (26, (-116)),
      (38, (-346)),
      (39, (-347)),
      (49, (-350)),
      (50, (-349)),
      (51, (-352)),
      (52, (-353)),
      (53, (-354)),
      (54, (-348)),
      (55, (-355)),
      (56, (-351)),
      (60, (-194)),
      (61, (-193)),
      (63, (-424)),
      (65, (-27)),
      (66, (-30)),
      (67, (-31)),
      (68, (-32)),
      (69, (-40)),
      (70, (-118)),
      (71, (-37)),
      (72, (-38)),
      (73, (-39)),
      (74, (-117)),
      (75, (-119)),
      (76, (-120)),
      (77, (-121)),
      (78, (-122)),
      (79, (-126)),
      (80, (-127)),
      (81, (-128)),
      (82, (-205)),
      (83, (-422)),
      (84, (-425)),
      (89, (-212)),
      (90, (-337)),
      (93, (-423)),
      (94, (-398)),
      (95, (-394)),
      (96, (-399)),
      (97, (-400)),
      (98, (-402)),
      (100, (-408)),
      (101, (-24)),
      (108, (-18)),
      (109, (-14)),
      (111, (-22)),
      (112, (-186)),
      (113, (-184)),
      (115, (-187)),
      (116, (-181))];
    sub2 = [      (117, (-144)),
      (118, (-195)),
      (119, (-197)),
      (120, (-196)),
      (121, (-170)),
      (123, (-192)),
      (124, (-215)),
      (126, (-216)),
      (127, (-214)),
      (128, (-213)),
      (136, (-271)),
      (137, (-337)),
      (140, (-279)),
      (141, (-282)),
      (142, (-337)),
      (143, (-36)),
      (145, (-182)),
      (148, (-386)),
      (150, (-284)),
      (154, (-33)),
      (155, (-34)),
      (156, (-35)),
      (157, (-211)),
      (158, (-393)),
      (160, (-428)),
      (167, (-439)),
      (172, (-3)),
      (173, (-28)),
      (175, (-344)),
      (177, (-403)),
      (178, (-199)),
      (179, (-200)),
      (180, (-198)),
      (181, (-201)),
      (182, (-203)),
      (186, (-285)),
      (189, (-343)),
      (190, (-374)),
      (193, (-401)),
      (197, (-1)),
      (199, (-26)),
      (200, (-19)),
      (202, (-13)),
      (203, (-183)),
      (204, (-180)),
      (206, (-144)),
      (207, (-144)),
      (209, (-141)),
      (216, (-5)),
      (217, (-6)),
      (219, (-7)),
      (220, (-11)),
      (222, (-217)),
      (223, (-4)),
      (224, (-218)),
      (225, (-219)),
      (227, (-222)),
      (229, (-255)),
      (239, (-267)),
      (241, (-274)),
      (246, (-257)),
      (247, (-275)),
      (248, (-249)),
      (249, (-250))];
    sub3 = [      (251, (-283)),
      (257, (-388)),
      (262, (-136)),
      (269, (-359)),
      (272, (-445)),
      (276, (-429)),
      (278, (-438)),
      (286, (-440)),
      (288, (-383)),
      (289, (-382)),
      (290, (-405)),
      (291, (-29)),
      (293, (-426)),
      (297, (-202)),
      (299, (-204)),
      (300, (-232)),
      (301, (-233)),
      (302, (-239)),
      (303, (-238)),
      (304, (-248)),
      (305, (-317)),
      (306, (-210)),
      (311, (-342)),
      (312, (-375)),
      (313, (-391)),
      (314, (-392)),
      (315, (-410)),
      (318, (-411)),
      (319, (-412)),
      (326, (-191)),
      (328, (-190)),
      (329, (-21)),
      (330, (-144)),
      (331, (-143)),
      (332, (-148)),
      (336, (-146)),
      (340, (-152)),
      (341, (-155)),
      (342, (-156)),
      (343, (-157)),
      (345, (-43)),
      (346, (-242)),
      (347, (-241)),
      (350, (-208)),
      (351, (-206)),
      (352, (-207)),
      (354, (-10)),
      (356, (-292)),
      (357, (-244)),
      (359, (-220)),
      (360, (-225)),
      (361, (-226)),
      (362, (-228)),
      (364, (-313)),
      (371, (-298)),
      (372, (-303)),
      (373, (-306)),
      (374, (-312)),
      (375, (-300)),
      (377, (-288)),
      (381, (-296)),
      (382, (-301)),
      (385, (-272)),
      (388, (-280))];
    sub4 = [      (391, (-259)),
      (394, (-258)),
      (399, (-335)),
      (401, (-432)),
      (402, (-431)),
      (403, (-430)),
      (404, (-387)),
      (406, (-385)),
      (414, (-409)),
      (415, (-433)),
      (420, (-435)),
      (421, (-434)),
      (422, (-458)),
      (425, (-441)),
      (427, (-384)),
      (428, (-340)),
      (431, (-427)),
      (433, (-231)),
      (438, (-318)),
      (442, (-338)),
      (444, (-129)),
      (447, (-135)),
      (449, (-357)),
      (450, (-358)),
      (458, (-416)),
      (460, (-2)),
      (462, (-189)),
      (463, (-23)),
      (465, (-142)),
      (468, (-160)),
      (469, (-147)),
      (471, (-167)),
      (472, (-168)),
      (473, (-169)),
      (474, (-159)),
      (477, (-45)),
      (479, (-41)),
      (480, (-8)),
      (481, (-9)),
      (483, (-291)),
      (488, (-316)),
      (489, (-315)),
      (490, (-305)),
      (491, (-308)),
      (492, (-309)),
      (493, (-307)),
      (494, (-311)),
      (495, (-310)),
      (496, (-304)),
      (497, (-297)),
      (498, (-286)),
      (499, (-287)),
      (500, (-289)),
      (501, (-293)),
      (504, (-295)),
      (505, (-270)),
      (506, (-337)),
      (507, (-278)),
      (508, (-261)),
      (509, (-251)),
      (512, (-260)),
      (513, (-254)),
      (514, (-281)),
      (515, (-336))];
    sub5 = [      (516, (-390)),
      (519, (-356)),
      (523, (-140)),
      (526, (-369)),
      (527, (-360)),
      (528, (-367)),
      (530, (-437)),
      (531, (-436)),
      (533, (-443)),
      (534, (-442)),
      (535, (-341)),
      (536, (-455)),
      (537, (-447)),
      (538, (-236)),
      (539, (-235)),
      (541, (-230)),
      (542, (-239)),
      (543, (-240)),
      (544, (-237)),
      (545, (-130)),
      (546, (-131)),
      (547, (-132)),
      (548, (-134)),
      (549, (-339)),
      (551, (-371)),
      (552, (-373)),
      (556, (-420)),
      (557, (-421)),
      (558, (-415)),
      (559, (-452)),
      (560, (-413)),
      (561, (-414)),
      (562, (-453)),
      (564, (-450)),
      (565, (-188)),
      (566, (-179)),
      (568, (-154)),
      (572, (-151)),
      (573, (-145)),
      (574, (-243)),
      (576, (-245)),
      (577, (-224)),
      (578, (-227)),
      (579, (-265)),
      (580, (-264)),
      (589, (-334)),
      (594, (-328)),
      (595, (-331)),
      (596, (-290)),
      (597, (-302)),
      (598, (-294)),
      (599, (-273)),
      (603, (-389)),
      (604, (-395)),
      (605, (-377)),
      (608, (-378)),
      (609, (-396)),
      (610, (-397)),
      (612, (-461)),
      (613, (-363)),
      (614, (-234)),
      (615, (-125)),
      (616, (-419)),
      (617, (-417))];
    sub6 = [      (618, (-418)),
      (621, (-163)),
      (622, (-153)),
      (623, (-162)),
      (625, (-48)),
      (626, (-49)),
      (627, (-50)),
      (628, (-51)),
      (629, (-52)),
      (630, (-53)),
      (631, (-54)),
      (632, (-55)),
      (633, (-56)),
      (634, (-57)),
      (635, (-58)),
      (636, (-59)),
      (637, (-60)),
      (638, (-61)),
      (639, (-62)),
      (640, (-63)),
      (641, (-64)),
      (642, (-65)),
      (643, (-66)),
      (644, (-67)),
      (645, (-68)),
      (646, (-69)),
      (647, (-70)),
      (648, (-71)),
      (649, (-72)),
      (650, (-73)),
      (651, (-74)),
      (652, (-75)),
      (653, (-76)),
      (654, (-77)),
      (655, (-78)),
      (656, (-79)),
      (657, (-80)),
      (658, (-81)),
      (659, (-82)),
      (660, (-83)),
      (661, (-84)),
      (662, (-85)),
      (663, (-86)),
      (664, (-87)),
      (665, (-88)),
      (666, (-89)),
      (667, (-90)),
      (668, (-91)),
      (669, (-92)),
      (670, (-93)),
      (671, (-94)),
      (672, (-95)),
      (673, (-96)),
      (674, (-105)),
      (675, (-106)),
      (677, (-47)),
      (678, (-103)),
      (679, (-101)),
      (680, (-102)),
      (681, (-97)),
      (682, (-98)),
      (683, (-99)),
      (684, (-100)),
      (685, (-104))];
    sub7 = [      (686, (-107)),
      (687, (-108)),
      (688, (-109)),
      (692, (-256)),
      (694, (-330)),
      (695, (-329)),
      (696, (-333)),
      (697, (-332)),
      (699, (-314)),
      (704, (-252)),
      (706, (-253)),
      (707, (-376)),
      (708, (-380)),
      (709, (-166)),
      (712, (-46)),
      (713, (-111)),
      (714, (-266)),
      (715, (-262)),
      (717, (-323)),
      (718, (-322)),
      (719, (-324)),
      (720, (-327)),
      (721, (-247)),
      (722, (-115)),
      (724, (-325)),
      (725, (-113))];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);


decodeArr s1 s2 = arrayFromIndexList (zip (un s1) (un s2))
    where {
        un :: String -> [Int];
        un s = (map ord . unpacked) s }
;
private yygo0 = decodeArr "\u0001\u0002\u0003\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017" "\u0005\u0005\u0005\u0007\u0007\u0007\u0006\u0006\u0006\u0006\u0006";
private yygo1 = decodeArr "\u0010\u0011\u0012" "\t\t\t";
private yygo2 = decodeArr "\f\r\u000e\u000fÂ«Â¬Â­Â®Â¯Â°Â±" "\u0013\u0013\u0013\u0015\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo4 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()tuvwxyz~\u007f\u0080\u008d\u008e\u008fÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "@@@AAADDDDCCCCIBEEEEEENNNGGGRSSSTTTUUVVVHOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo6 = decodeArr "\u0018\u0019\u001a" "ihh";
private yygo8 = decodeArr "\u0010\u0011\u0012" "lll";
private yygo12 = decodeArr "\f\r\u000eÂ«Â¬Â­Â®Â¯Â°Â±" "mmm\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo22 = decodeArr "\f\r\u000e\u000fÂ«Â¬Â­Â®Â¯Â°Â±" "\u0013\u0013\u0013o\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo25 = decodeArr "ÂºÂ»ÃÃ" "ttss";
private yygo27 = decodeArr "\f\r\u000e\u000fÂ«Â¬Â­Â®Â¯Â°Â±" "\u0013\u0013\u0013u\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo31 = decodeArr "ÂªÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ" "R~\u007f\u007f\u0080\u0080\u0080\u0080\u0081\u0081\u0081\u0081\u0082\u0082\u0082\u0082";
private yygo34 = decodeArr "Â·Â¸Â¹ÄÄÄ" "\u0087\u0087\u0087\u0088\u0089\u0089";
private yygo35 = decodeArr "Â·Â¸Â¹ÄÄÄÄÄ" "\u008b\u008b\u008b\u008c\u008d\u008d\u008e\u008e";
private yygo36 = decodeArr "ÄÄ¥Ä¦Ä§Ä¨Ä©Äª" "\u008fZZZZZZ";
private yygo40 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^\u0093\u0093\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo41 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^\u0095\u0095\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo42 = decodeArr "Â·Â¸Â¹ÄÄÄÄÄ" "\u008b\u008b\u008b\u008c\u008d\u008d\u0096\u0096";
private yygo45 = decodeArr "uvwxyz~\u007f\u0080ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "\u009a\u009a\u009a\u009a\u009a\u009aNNNRSSSTTTUUOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo46 = decodeArr "uvwxyz~\u007f\u0080ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "\u009b\u009b\u009b\u009b\u009b\u009bNNNRSSSTTTUUOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo47 = decodeArr "uvwxyz~\u007f\u0080ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "\u009c\u009c\u009c\u009c\u009c\u009cNNNRSSSTTTUUOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo48 = decodeArr "Ã¤" "\u009d";
private yygo57 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^\u009e\u009e\u009e\u009e\u009e``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo58 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½" "SSSTTTÂ¢Â£Â£]]]]]]]]]]^Â¥Â¥Â¦Â¦Â¦Â¦_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÂ¤Â¤";
private yygo59 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»ÇÇÇ" "SSSTTTUU]]]]]]]]]]^Â¨Â¨\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÂ©Â©Â©";
private yygo62 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Â«Â«ÂªÂªccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo81 = decodeArr "ÅÅ" "Â¯Â¯";
private yygo85 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£ÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Â±Â±ccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo86 = decodeArr "ÃÃÃÃÃÃ" "Â´ÂµÂµÂµÂ¶Â¶";
private yygo90 = decodeArr "ÅÅÅ" "ÂºÂºÂº";
private yygo91 = decodeArr "ÅµÅ¶Å·" "Â¾Â½Â½";
private yygo96 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£ÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÃÃccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo103 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()tuvwxyz~\u007f\u0080\u008d\u008e\u008fÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "ÃÃÃAAADDDDCCCCIBEEEEEENNNGGGRSSSTTTUUVVVHOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo105 = decodeArr "\u0018\u0019\u001a" "iÃÃ";
private yygo106 = decodeArr "\f\r\u000e\u000fÂ«Â¬Â­Â®Â¯Â°Â±" "\u0013\u0013\u0013Ã\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo110 = decodeArr "\f\r\u000eÂ«Â¬Â­Â®Â¯Â°Â±" "ÃÃÃ\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo114 = decodeArr "ÂºÂ»ÃÃ" "ÃÃss";
private yygo117 = decodeArr "\u0090\u0091\u0092\u0093\u0094Âª" "ÃÃÃÃÃÃ";
private yygo122 = decodeArr "*+" "ÃÃ";
private yygo125 = decodeArr "ÃÃÃ" "ÃÃÃ";
private yygo129 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÃÃÃÃÃÃÄ£Ä¤" "ÃÃÃÃÃÃÃÃÃ Ã¡Ã¡Ã¢Ã¢Ã¢Ã£Ã£";
private yygo131 = decodeArr "Ã¿ÄÄ«Ä¬" "Ã¨Ã¨Ã©Ã©";
private yygo132 = decodeArr "Ã¿ÄÄ«Ä¬" "Ã¨Ã¨Ã«Ã«";
private yygo134 = decodeArr "Â·Â¸Â¹ÄÄÄÄ" "\u0087\u0087\u0087Ã­Ã®Ã®Ã®";
private yygo135 = decodeArr "Ã¿Ä" "Ã¯Ã¯";
private yygo137 = decodeArr "ÅÅÅ" "Ã±Ã±Ã±";
private yygo138 = decodeArr "Â·Â¸Â¹ÄÄÄÄ" "\u008b\u008b\u008bÃ²Ã³Ã³Ã³";
private yygo139 = decodeArr "Â·Â¸Â¹Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄ" "Ã¶Ã¶Ã¶Ã·Ã·Ã·Ã·Ã·Ã·Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹";
private yygo142 = decodeArr "ÅÅÅ" "Ã»Ã»Ã»";
private yygo144 = decodeArr "Ã¿ÄÄ«Ä¬" "Ã¨Ã¨Ã½Ã½";
private yygo146 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½" "SSSTTTÃ¿ÄÄ]]]]]]]]]]^Â¥Â¥Â¦Â¦Â¦Â¦_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÂ¤Â¤";
private yygo147 = decodeArr "ÆÆ" "ÄÄ";
private yygo151 = decodeArr "\u0088\u0089\u008a\u008b\u008cÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "ÄÄÄÄÄRSSSTTTUUÄXXXXWWÄÄÄ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo152 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å§Å¨Å©Å­Å®Å¯Å°Å±Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÄÄÄÄÄÄÄÄ^ÄÄ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo153 = decodeArr "ÂªÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ" "R~\u007f\u007f\u0080\u0080\u0080\u0080\u0081\u0081\u0081\u0081\u0082\u0082\u0082\u0082";
private yygo159 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^\u009e\u009e\u009e\u009e\u009e``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo161 = decodeArr "Æ¼Æ½" "ÄÄ";
private yygo162 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÄÄ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo163 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£ÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Â±Â±ccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo166 = decodeArr "Ã" "Ä";
private yygo170 = decodeArr "Å¾Å¿Æ" "Ä Ä¡Ä¡";
private yygo171 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Â«Â«Ä¢Ä¢ccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo173 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()tuvwxyz~\u007f\u0080\u008d\u008e\u008fÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "Ä£Ä£Ä£AAADDDDCCCCIBEEEEEENNNGGGRSSSTTTUUVVVHOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo176 = decodeArr "ÂªÆ¾Æ¿ÇÇÇ" "Ä¦Ä§Ä§Ä§Ä¨Ä¨";
private yygo181 = decodeArr "ÃÃÃÃÃÃ" "Â´ÂµÂµÂµÄ©Ä©";
private yygo183 = decodeArr "Â·Â¸Â¹Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶Ä«Ä«Ä¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo184 = decodeArr "ÂªÃÃÃÃÃÃ" "RXXXXÄ²Ä²";
private yygo187 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å°Å±Å²Å³Å´Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÄµÄµÄ¶Ä¶Ä¶^Ä´Ä´\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo188 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^Ä·Ä·\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo190 = decodeArr "ÅµÅ¶Å·" "Â¾Ä¸Ä¸";
private yygo191 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^Ä¹Ä¹Ä¹Ä¹_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo192 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÄºÄºÄºÄº_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo194 = decodeArr "ÃÃÃ" "Ä¾Ä¿Ä¿";
private yygo195 = decodeArr "ÇÇÇÇÇÇ" "ÅÅÅÅÅÅ";
private yygo196 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()tuvwxyz~\u007f\u0080\u008d\u008e\u008fÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ¤ÄÄÄÄÄÄ¥Ä¦Ä§Ä¨Ä©ÄªÅÅÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "ÅÅÅAAADDDDCCCCIBEEEEEENNNGGGRSSSTTTUUVVVHOXXXXWWPPYKKLMFZZZZZZJJQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo198 = decodeArr "Â²Â³ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃ" "ÅÅÅÅÅÅÅÅÅss";
private yygo201 = decodeArr "\f\r\u000e\u000fÂ«Â¬Â­Â®Â¯Â°Â±" "\u0013\u0013\u0013Å\u0014\u0014\u0014\u0014\u0014\u0014\u0014";
private yygo206 = decodeArr "\u0090\u0091\u0092\u0093\u0094Âª" "ÅÅÅÅÅÃ";
private yygo207 = decodeArr "\u0090\u0091\u0092\u0093\u0094Âª" "ÅÅÅÅÅÃ";
private yygo208 = decodeArr "\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â´ÂµÂ¶Â·Â¸Â¹ÃÃÃ" "ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ";
private yygo211 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÅÅÅÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo212 = decodeArr ",-" "ÅÅ";
private yygo218 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Å¢Å¢Å¢Å¢Å¢Å¢Å¢";
private yygo221 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã´ÃµÃ¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥Å¦Å¦ÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo226 = decodeArr "Ä£Ä¤" "Å§Å§";
private yygo228 = decodeArr "Â·Â¸Â¹Ã Ã¡Ã¢Ã£Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶Å©Å©ÅªÅªÅ¨Å¨Ä¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo231 = decodeArr "Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»" "Å³Å³Å³Å´Å´Å´Å´ÅµÅµÅµÅ¶Å¶Å¶";
private yygo232 = decodeArr "Ã¿ÄÄ«Ä¬" "Ã¨Ã¨Å·Å·";
private yygo234 = decodeArr "ÄÄÄ Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»" "Å¼Å¼Å¼Å½Å½Å¾Å¾Å¾Å´Å´Å´Å´ÅµÅµÅµÅ¶Å¶Å¶";
private yygo244 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾Æ¼Æ½" "Ã¶Ã¶Ã¶ÅÆÆÆÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°ÆÆ";
private yygo245 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÆÆÆÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo250 = decodeArr "Â·Â¸Â¹ÄÄÄÄÄ" "Ã¶Ã¶Ã¶ÆÆÆÆÆ";
private yygo252 = decodeArr "Â·Â¸Â¹Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÆÆÄ¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo254 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^\u009e\u009e\u009e\u009e\u009e``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo255 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÄÄ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo256 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£ÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Â±Â±ccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo259 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÆÆ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo260 = decodeArr "Â·Â¸Â¹Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÆÆÄ¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo263 = decodeArr "ÅÅ" "Â¯Â¯";
private yygo277 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»ÇÇÇ" "SSSTTTUU]]]]]]]]]]^Æ Æ \u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÆ¡Æ¡Æ¡";
private yygo279 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»ÇÇÇ" "SSSTTTUU]]]]]]]]]]^Æ¢Æ¢\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÆ£Æ£Æ£";
private yygo280 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^Ä¹Ä¹Ä¹Ä¹_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo281 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÄºÄºÄºÄº_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo283 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»ÇÇÇ" "SSSTTTUU]]]]]]]]]]^Æ¢Æ¢\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÆ¦Æ¦Æ¦";
private yygo284 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å§Å¨Å©ÅªÅ«Å¬Å°Å±Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Æ§Æ§Æ§Æ¨Æ¨Æ¨ÄÄ^ÄÄ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo285 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÆªÆª\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo287 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^Æ«Æ«\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo292 = decodeArr "\u0088\u0089\u008a\u008b\u008cÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "ÄÄÆ­Æ­Æ­RSSSTTTUUÄXXXXWWÄÄÄ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo298 = decodeArr "Ã¥Ã¦Ã§" "Æ²Æ²Æ³";
private yygo305 = decodeArr "Â·Â¸Â¹Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Æ¶Æ¶";
private yygo307 = decodeArr "t{|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "Æ»Æ½Æ½Æ½Æ¼Æ¼Æ¼Æ¿Æ¿Æ¿Æ¿Æ¾Æ¾Æ¾RSSSTTTUUOXXXXWWPPYQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo310 = decodeArr "Å¥Å¦" "ÇÇ";
private yygo316 = decodeArr "ÇÇÇÇÇÇ" "ÇÇÇÅÅÅ";
private yygo317 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÇÇ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo324 = decodeArr "ÂºÂ»ÃÃ" "ÇÇss";
private yygo330 = decodeArr "\u0090\u0091\u0092\u0093\u0094Âª" "ÇÇÇÇÇÃ";
private yygo334 = decodeArr "ÂºÂ»ÃÃ" "ttss";
private yygo335 = decodeArr "\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â´ÂµÂ¶Â·Â¸Â¹ÃÃÃ" "ÅÅÅÅÅÅÇÇÇÅÅÅÅÅÅÅÅÅ";
private yygo339 = decodeArr "Â§Â¨Â©Ã" "ÇÇÇÇ";
private yygo344 = decodeArr "\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â´ÂµÂ¶Â·Â¸Â¹ÃÃÃ" "ÇÇÇÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ";
private yygo348 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã´ÃµÃ¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÇÇÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo349 = decodeArr "./" "ÇÇ";
private yygo353 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Ç Ç Ç Ç Ç Ç Ç ";
private yygo355 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Ç¡Ç¡Ç¡Ç¡Ç¡Ç¡Ç¡";
private yygo364 = decodeArr "Â·Â¸Â¹Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ¼Ä½Ä¾" "Ã¶Ã¶Ã¶Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ç©Ç¨Ç¨";
private yygo365 = decodeArr "Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»" "ÇªÇªÇªÇªÅµÅµÅµÅ¶Å¶Å¶";
private yygo366 = decodeArr "Ä¶Ä·Ä¸Ä¹ÄºÄ»" "Ç«Ç«Ç«Å¶Å¶Å¶";
private yygo367 = decodeArr "Ä¶Ä·Ä¸Ä¹ÄºÄ»" "Ç¬Ç¬Ç¬Å¶Å¶Å¶";
private yygo368 = decodeArr "Ä¶Ä·Ä¸Ä¹ÄºÄ»" "Ç­Ç­Ç­Å¶Å¶Å¶";
private yygo369 = decodeArr "Ä¹ÄºÄ»" "Ç®Ç®Ç®";
private yygo370 = decodeArr "Ä¹ÄºÄ»" "Ç¯Ç¯Ç¯";
private yygo376 = decodeArr "Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»" "Ç±Ç±Ç±Å´Å´Å´Å´ÅµÅµÅµÅ¶Å¶Å¶";
private yygo380 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÄ¡Ä¢" "Ç´ÃÃÃÃÃÃÃÇµÇµ";
private yygo383 = decodeArr "ÄÄÄ Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»" "Ç·Ç·Ç·Ç¸Ç¸Å¾Å¾Å¾Å´Å´Å´Å´ÅµÅµÅµÅ¶Å¶Å¶";
private yygo384 = decodeArr "Â·Â¸Â¹ÄÄÄÄ" "\u0087\u0087\u0087Ã­Ç¹Ç¹Ç¹";
private yygo386 = decodeArr "Ã¿Ä" "ÇºÇº";
private yygo387 = decodeArr "Â·Â¸Â¹ÄÄÄÄ" "\u008b\u008b\u008bÃ²Ç»Ç»Ç»";
private yygo396 = decodeArr "Æ¼Æ½" "ÆÆ";
private yygo398 = decodeArr "Â·Â¸Â¹Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄ" "Ã¶Ã¶Ã¶ÈÈÈÈÈÈÃ¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹";
private yygo400 = decodeArr "Â·Â¸Â¹Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÈÈÄ¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo405 = decodeArr "ÆÆ" "ÈÈ";
private yygo407 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¸Å¹ÅºÅ»Å¼Å½Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÈÈÈÈÈÈÈ^ÈÈ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo408 = decodeArr "\u0088\u0089\u008a\u008b\u008cÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "ÄÄÈÈÈRSSSTTTUUÄXXXXWWÄÄÄ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo410 = decodeArr "\u0088\u0089\u008a\u008b\u008cÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "ÄÄÈÈÈRSSSTTTUUÄXXXXWWÄÄÄ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo411 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÈÈ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo412 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÈÈ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo413 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å§Å¨Å©Å­Å®Å¯Å°Å±Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÄÄÄÈÈÈÄÄ^ÄÄ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo430 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÈÈ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo432 = decodeArr "ÂªÆ¾Æ¿ÇÇÇ" "Ä¦ÈÈÈÄ¨Ä¨";
private yygo434 = decodeArr "Ã«Ã¬" "ÈÈ";
private yygo435 = decodeArr "Ã¥Ã¦Ã§" "ÈÈÆ³";
private yygo436 = decodeArr "Â·Â¸Â¹Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÈÈÈÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo437 = decodeArr "Â·Â¸Â¹Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶È È ÈÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo439 = decodeArr "~\u007f\u0080ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "È¡È¡È¡RSSSTTTUUOXXXXWWPPYQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo440 = decodeArr "~\u007f\u0080ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "È¢È¢È¢RSSSTTTUUOXXXXWWPPYQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo441 = decodeArr "~\u007f\u0080ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "È£È£È£RSSSTTTUUOXXXXWWPPYQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo443 = decodeArr "t~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "Æ»Æ¼Æ¼Æ¼Æ¿Æ¿Æ¿Æ¿È¤È¤È¤RSSSTTTUUOXXXXWWPPYQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo448 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å°Å±Å²Å³Å´Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÄµÄµÈ§È§È§^Ä´Ä´\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo451 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È¨È¨\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo455 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È¯È¯\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo457 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È²È²\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo459 = decodeArr "ÇÇÇÇÇÇ" "È´È´È´ÅÅÅ";
private yygo461 = decodeArr "ÂºÂ»ÃÃ" "ÈµÈµss";
private yygo464 = decodeArr "Â²Â³ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃ" "È¶È¶ÅÅÅÅÅÅÅss";
private yygo466 = decodeArr "Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©Ã" "È»È»È»È¹È¹È¹ÈºÈºÈºÇ";
private yygo467 = decodeArr "ÂºÂ»ÃÃ" "ÃÃss";
private yygo470 = decodeArr "\u0095\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â´ÂµÂ¶Â·Â¸Â¹ÃÃÃ" "È¼È¼È¼ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ";
private yygo476 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÈ¾È¾È¾ÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo482 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã´ÃµÃ¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo484 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã´ÃµÃ¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo485 = decodeArr "Â·Â¸Â¹Ã Ã¡Ã¢Ã£Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶Å©Å©ÉÉÅ¨Å¨Ä¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo486 = decodeArr "ÄÄÄÄÄ" "ÉÉÉÉÉ";
private yygo487 = decodeArr "\u0010\u0011\u0012ÂªÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "ÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉ";
private yygo500 = decodeArr "Ä£Ä¤" "ÉÉ";
private yygo502 = decodeArr "Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»" "ÉÉÅ¾Å¾Å¾Å´Å´Å´Å´ÅµÅµÅµÅ¶Å¶Å¶";
private yygo503 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÄ¡Ä¢" "Ç´ÃÃÃÃÃÃÃÉÉ";
private yygo506 = decodeArr "ÅÅÅ" "ÉÉÉ";
private yygo510 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã´ÃµÃ¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÅ¥Å¥Å¥ÉÉÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo511 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÉÉÉÉÉÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo518 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ÉÉ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo520 = decodeArr "Å¥Å¦ÅµÅ¶Å·" "ÉÉÂ¾ÉÉ";
private yygo521 = decodeArr "ÅÅ" "É É ";
private yygo524 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^É¢É¢\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo529 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»ÇÇÇ" "SSSTTTUU]]]]]]]]]]^Æ Æ \u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbddddddddddddddddddddddÉ¤É¤É¤";
private yygo532 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å§Å¨Å©ÅªÅ«Å¬Å°Å±Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]Æ§Æ§Æ§É¥É¥É¥ÄÄ^ÄÄ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo540 = decodeArr "Â·Â¸Â¹Ã­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶É¦É¦Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo550 = decodeArr "t{|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087ÂªÂ´ÂµÂ¶Â·Â¸Â¹ÃÃÃÃÃÃÃÃÃÃÃÃ¤ÅÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "Æ»É§É§É§Æ¼Æ¼Æ¼Æ¿Æ¿Æ¿Æ¿Æ¾Æ¾Æ¾RSSSTTTUUOXXXXWWPPYQQQ[]]]]]]]]]]^\\\\\\\\_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo553 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È¯È¯\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo555 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È²È²\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo567 = decodeArr "Â¡Â¢Â£Â§Â¨Â©Ã" "É­É­É­ÈºÈºÈºÇ";
private yygo570 = decodeArr "Â§Â¨Â©Ã" "É¯É¯É¯Ç";
private yygo575 = decodeArr "0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrs" "Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê±Ê±Ê±Ê±Ê±Ê±";
private yygo581 = decodeArr "ÄÄÄÄÄ" "Ê³Ê³ÉÉÉ";
private yygo584 = decodeArr "ÂªÅÅÅÅ" "ÉÊ¶Ê¶Ê¶É";
private yygo585 = decodeArr "ÂªÅÅÅÅ" "ÉÊ·Ê·Ê·É";
private yygo586 = decodeArr "ÂªÅ" "ÉÊ¸";
private yygo587 = decodeArr "ÂªÅ" "ÉÊ¹";
private yygo588 = decodeArr "ÂªÅÅÅÅÅÅÅÅÅ" "ÉÊºÊºÉÉÉÉÉÉÉ";
private yygo606 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^ËË\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo607 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¸Å¹ÅºÅ»Å¼Å½Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]ÈÈÈÈËËË^ÈÈ\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo619 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È¯È¯\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo620 = decodeArr "Â´ÂµÂ¶Â·Â¸Â¹ÃÃÅÅÅÅÅÅÅ Å¡Å¢Å£Å¾ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»" "SSSTTTUU]]]]]]]]]]^È²È²\u0094\u0094\u0094\u0094_____``aaccbbbbbbbbbbbbbbdddddddddddddddddddddd";
private yygo624 = decodeArr "Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©Ã" "È»È»È»ËËËÈºÈºÈºÇ";
private yygo676 = decodeArr "0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrs" "Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²ËËËËËË";
private yygo690 = decodeArr "0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrs" "Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²ËËËËËË";
private yygo693 = decodeArr "ÄÄÄÄÄ" "ËËÉÉÉ";
private yygo700 = decodeArr "\u0010\u0011\u0012ÂªÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "ÉÉÉÉËËËËËÉÉÉÉÉÉÉÉÉÉÉ";
private yygo701 = decodeArr "\u0010\u0011\u0012ÂªÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "ÉÉÉÉËËËËËÉÉÉÉÉÉÉÉÉÉÉ";
private yygo702 = decodeArr "Â·Â¸Â¹Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ËËÄ¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo703 = decodeArr "ÂªÅÅÅÅÅÅÅÅÅ" "ÉËËÉÉÉÉÉÉÉ";
private yygo705 = decodeArr "Â·Â¸Â¹ÃªÃ±Ã²Ã³Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ÅÉÉÉËËÅÄ±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo710 = decodeArr "0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrs" "Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²ËËËËËË";
private yygo716 = decodeArr "Â·Â¸Â¹Ã¨Ã©ÃªÃ­Ã®Ã¯Ã°Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄ½Ä¾" "Ã¶Ã¶Ã¶ËËÄ¬Ä­Ä­Ä¯Ä¯Ä®Ä±Ä±Ä±Ä±Ä±Ä±Ã¸Ã¸Ã¹Ã¹Ã¹Ã¹Ã¹Ä°Ä°";
private yygo723 = decodeArr "0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrs" "Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²Ê²ËËËËËË";
private yygos = let 
    sub1 = [      (0, yygo0),
      (1, yygo1),
      (2, yygo2),
      (4, yygo4),
      (6, yygo6),
      (8, yygo8),
      (12, yygo12),
      (22, yygo22),
      (25, yygo25),
      (27, yygo27),
      (31, yygo31),
      (34, yygo34),
      (35, yygo35),
      (36, yygo36),
      (40, yygo40),
      (41, yygo41),
      (42, yygo42),
      (45, yygo45),
      (46, yygo46),
      (47, yygo47),
      (48, yygo48),
      (57, yygo57),
      (58, yygo58),
      (59, yygo59),
      (62, yygo62),
      (81, yygo81),
      (85, yygo85),
      (86, yygo86),
      (90, yygo90),
      (91, yygo91),
      (96, yygo96),
      (103, yygo103),
      (105, yygo105),
      (106, yygo106),
      (110, yygo110),
      (114, yygo114),
      (117, yygo117),
      (122, yygo122),
      (125, yygo125),
      (129, yygo129),
      (131, yygo131),
      (132, yygo132),
      (134, yygo134),
      (135, yygo135),
      (137, yygo137),
      (138, yygo138),
      (139, yygo139),
      (142, yygo142),
      (144, yygo144),
      (146, yygo146),
      (147, yygo147),
      (151, yygo151),
      (152, yygo152),
      (153, yygo153),
      (159, yygo159),
      (161, yygo161),
      (162, yygo162),
      (163, yygo163),
      (166, yygo166),
      (170, yygo170),
      (171, yygo171),
      (173, yygo173),
      (176, yygo176),
      (181, yygo181)];
    sub2 = [      (183, yygo183),
      (184, yygo184),
      (187, yygo187),
      (188, yygo188),
      (190, yygo190),
      (191, yygo191),
      (192, yygo192),
      (194, yygo194),
      (195, yygo195),
      (196, yygo196),
      (198, yygo198),
      (201, yygo201),
      (206, yygo206),
      (207, yygo207),
      (208, yygo208),
      (211, yygo211),
      (212, yygo212),
      (218, yygo218),
      (221, yygo221),
      (226, yygo226),
      (228, yygo228),
      (231, yygo231),
      (232, yygo232),
      (234, yygo234),
      (244, yygo244),
      (245, yygo245),
      (250, yygo250),
      (252, yygo252),
      (254, yygo254),
      (255, yygo255),
      (256, yygo256),
      (259, yygo259),
      (260, yygo260),
      (263, yygo263),
      (277, yygo277),
      (279, yygo279),
      (280, yygo280),
      (281, yygo281),
      (283, yygo283),
      (284, yygo284),
      (285, yygo285),
      (287, yygo287),
      (292, yygo292),
      (298, yygo298),
      (305, yygo305),
      (307, yygo307),
      (310, yygo310),
      (316, yygo316),
      (317, yygo317),
      (324, yygo324),
      (330, yygo330),
      (334, yygo334),
      (335, yygo335),
      (339, yygo339),
      (344, yygo344),
      (348, yygo348),
      (349, yygo349),
      (353, yygo353),
      (355, yygo355),
      (364, yygo364),
      (365, yygo365),
      (366, yygo366),
      (367, yygo367),
      (368, yygo368)];
    sub3 = [      (369, yygo369),
      (370, yygo370),
      (376, yygo376),
      (380, yygo380),
      (383, yygo383),
      (384, yygo384),
      (386, yygo386),
      (387, yygo387),
      (396, yygo396),
      (398, yygo398),
      (400, yygo400),
      (405, yygo405),
      (407, yygo407),
      (408, yygo408),
      (410, yygo410),
      (411, yygo411),
      (412, yygo412),
      (413, yygo413),
      (430, yygo430),
      (432, yygo432),
      (434, yygo434),
      (435, yygo435),
      (436, yygo436),
      (437, yygo437),
      (439, yygo439),
      (440, yygo440),
      (441, yygo441),
      (443, yygo443),
      (448, yygo448),
      (451, yygo451),
      (455, yygo455),
      (457, yygo457),
      (459, yygo459),
      (461, yygo461),
      (464, yygo464),
      (466, yygo466),
      (467, yygo467),
      (470, yygo470),
      (476, yygo476),
      (482, yygo482),
      (484, yygo484),
      (485, yygo485),
      (486, yygo486),
      (487, yygo487),
      (500, yygo500),
      (502, yygo502),
      (503, yygo503),
      (506, yygo506),
      (510, yygo510),
      (511, yygo511),
      (518, yygo518),
      (520, yygo520),
      (521, yygo521),
      (524, yygo524),
      (529, yygo529),
      (532, yygo532),
      (540, yygo540),
      (550, yygo550),
      (553, yygo553),
      (555, yygo555),
      (567, yygo567),
      (570, yygo570),
      (575, yygo575),
      (581, yygo581)];
    sub4 = [      (584, yygo584),
      (585, yygo585),
      (586, yygo586),
      (587, yygo587),
      (588, yygo588),
      (606, yygo606),
      (607, yygo607),
      (619, yygo619),
      (620, yygo620),
      (624, yygo624),
      (676, yygo676),
      (690, yygo690),
      (693, yygo693),
      (700, yygo700),
      (701, yygo701),
      (702, yygo702),
      (703, yygo703),
      (705, yygo705),
      (710, yygo710),
      (716, yygo716),
      (723, yygo723)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` genericArrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4);
{-

    this file will be appended to every parser YYgen.fr builds

 -}
 
 
-- the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, yytoks))  -- will this ever happen?
            | act == yyErr    -> do
                            let fun = elemAt yyrecs st
                            toks <- fun yytoks
                            yyloop yyvals toks
            -- shift?
            | act >= 0, yydebug, traceLn (show st ++ ": shift to " ++ show act ++ " on " ++ yyshow yyt) = undefined
            | act >= 0 = yyloop ((act, YYTok yyt)!:yyvals) yyts
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals yytoks
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, []))
            | act == yyErr = do
                yyerror yyEOF ("syntax error on end of file")
                YYM.pure (yyvals, [])
            -- shift?
            | act >= 0 -> error ("Can't shift on end of file in state " ++ show act)
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals []
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case itemAt yyacts n of {
    Just fun -> fun tok;
    Nothing  -> YYAction yyErr;
};

yyeaction n = case elemAt yyeacts n of  {
    0 -> YYAction yyErr;
    this -> YYAction this; 
};

{-- nowarn: application of 'yybadprod' will diverge --};
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



-- drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYAction err
            | yyErr == err, yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | yyErr == err = yydrop i ts
            | otherwise  =  YYM.pure (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.pure [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.pure (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.pure [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts
;
yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []
;
yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts
;
yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []
;
yyreduce red yyvs = case itemAt yyprods red of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.genericItemAt popst of
                Just arr -> case elemAt arr red of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.pure ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.pure (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror (yyline yyt) ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.pure (Just x)
        _ -> YYM.pure Nothing;
;
--begin tail
{--
    the parser pass
 -};
pass :: [Token] -> StG (Maybe ParseResult); -- Global -> IO (Maybe ParseResult, Global);
pass = yyparse . substQQ;
--end tail
