--begin top
{- 

    Copyright Â© 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. 

        Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

     -}

{--
    This is the grammar for the Frege language.
-}
module frege.compiler.grammar.Frege where

    {-
       !!! DO NOT CHANGE FILE Frege.fr, IT HAS BEEN CREATED AUTOMATICALLY !!!
    -}

import frege.Prelude hiding(<+>, break)

import frege.control.monad.State(State)

import Data.TreeMap(insert)
import Data.List as DL(elemBy)

import  Compiler.enums.Flags 
import  Compiler.enums.TokenID(TokenID)
import  Compiler.enums.Visibility
import  Compiler.enums.Literals
import  Compiler.enums.CaseKind

import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.Kinds
import  Compiler.types.SNames
import  Compiler.types.Packs(magicPack)
import  Compiler.types.ImportDetails
import  Compiler.types.Types
import  Compiler.types.SourceDefinitions
import  Compiler.types.ConstructorField
import  Compiler.types.Global as G

import  Compiler.common.Mangle
import  Compiler.common.Errors as E()
import  Compiler.common.Resolve as R(enclosed)

import Lib.PP (group, break, msgdoc)
import frege.compiler.common.Tuples as T(tuple)
import frege.compiler.common.Desugar

import frege.compiler.grammar.Lexer (substQQ)


-- this will speed up the parser by a factor of 70, cause yyprods comes out monotyped.
private yyprod1 :: [(Int, YYsi ParseResult Token)]
    -> StG (YYsi ParseResult Token, [(Int, YYsi ParseResult Token)])


{-
 The following definitions are not strictly necessary, but they help
 to avoid truly crazy type signatures for parse stack items and
 considerably speed up type checking in giving the result types of
 certain nonterminal reduction rules.
 Note that you cannot lie about the type of nonterminal reduction rules.
 Note that types like "Maybe x" on the RHS must be given like so: (Maybe x)
 -}
--end top
type YYM = State;
-- data YYAction = YYShift Int | YYRed Int | YYErr | YYAccept;
!yyAccept = maxBound :: Int;
!yyErr    = minBound :: Int;
{-- positive numbers are *shift* actions, or *accept*
    negative ones are *reduce* actions, or *error* --}
newtype YYAction = YYAction Int;
data YYsi res tok  = 
	  YYStart () | YYAcc res | YYTok tok
	| YYNTaeq Token
	| YYNTalias Token
	| YYNTannoitem Token
	| YYNTannoitems [Token]
	| YYNTannotation [Def]
	| YYNTapats [Exp]
	| YYNTappex Exp
	| YYNTbinex Exp
	| YYNTboundvar String
	| YYNTboundvars [String]
	| YYNTcalt CAltS
	| YYNTcalts [CAltS]
	| YYNTccontext [ContextS]
	| YYNTclassdef Def
	| YYNTcommata Int
	| YYNTconfld [ConField SName]
	| YYNTconflds [ConField SName]
	| YYNTcontypes [ConField SName]
	| YYNTdalt DConS
	| YYNTdalts [DConS]
	| YYNTdatadef Def
	| YYNTdatainit Def
	| YYNTdefinition [Def]
	| YYNTdefinitions [Def]
	| YYNTderivedef Def
	| YYNTdocs String
	| YYNTdocumentation Def
	| YYNTdodefs [Qual]
	| YYNTdplocaldef [Def]
	| YYNTdvars [TauS]
	| YYNTelsex Token
	| YYNTexpr Exp
	| YYNTexprSC [Exp]
	| YYNTexprSS [Exp]
	| YYNTfield (String, Exp)
	| YYNTfields [(String, Exp)]
	| YYNTfitem Token
	| YYNTfixity Def
	| YYNTfldid (Position, String, Visibility, Bool)
	| YYNTfldids [(Position, String, Visibility, Bool)]
	| YYNTforall SigmaS
	| YYNTfundef [Def]
	| YYNTfunhead (Exp, [Pat])
	| YYNTgargs [TauS]
	| YYNTgetfield (Token, Bool,Exp)
	| YYNTgetfields [(Token,Bool,Exp)]
	| YYNTgqual Qual
	| YYNTgquals [Qual]
	| YYNTguard Guard
	| YYNTguards [Guard]
	| YYNTicontext [ContextS]
	| YYNTimport Def
	| YYNTimportitem ImportItem
	| YYNTimportliste ImportList
	| YYNTimportspec ImportItem
	| YYNTimportspecs [ImportItem]
	| YYNTimpurenativedef Def
	| YYNTinfix Def
	| YYNTinstdef Def
	| YYNTinsthead Def
	| YYNTinterfaces [TauS]
	| YYNTjitem String
	| YYNTjtoken Token
	| YYNTjtokens [Token]
	| YYNTkind Kind
	| YYNTlambda Exp
	| YYNTlambdabody Exp
	| YYNTlcqual Qual
	| YYNTlcquals [Qual]
	| YYNTletdef [Def]
	| YYNTletdefs [Def]
	| YYNTliteral Exp
	| YYNTlocaldef [Def]
	| YYNTlocaldefs [Def]
	| YYNTmbdot Token
	| YYNTmemspec ImportItem
	| YYNTmemspecs [ImportItem]
	| YYNTmethodspec (Token, String, Maybe [TauS])
	| YYNTmodule ParseResult
	| YYNTmoduleclause (String, Maybe String, Position)
	| YYNTmoduledefinition Def
	| YYNTmodulename (String, Position)
	| YYNTmodulename1 (String, Position)
	| YYNTnativedef Def
	| YYNTnativename String
	| YYNTnativepur (Bool, Bool)
	| YYNTnativespec (String, Maybe [TauS])
	| YYNToperator Token
	| YYNToperators [String]
	| YYNTopstring String
	| YYNTpattern Pat
	| YYNTplainfldid (Position, String, Visibility, Bool)
	| YYNTplocaldef [Def]
	| YYNTprimary Exp
	| YYNTpublicdefinition [Def]
	| YYNTqconid SName
	| YYNTqualifiers (Token -> SName)
	| YYNTqvarid SName
	| YYNTqvarids [SName]
	| YYNTqvarop SName
	| YYNTrawnativename String
	| YYNTrho RhoS
	| YYNTrhofun RhoS
	| YYNTscontext ContextS
	| YYNTscontexts [ContextS]
	| YYNTsemicoli Int
	| YYNTsicontext ContextS
	| YYNTsicontexts [ContextS]
	| YYNTsigex SigExs
	| YYNTsigexs [SigExs]
	| YYNTsigma SigmaS
	| YYNTsimpledalt DConS
	| YYNTsimplekind Kind
	| YYNTsimpletype TauS
	| YYNTsimpletypes [TauS]
	| YYNTstrictdalt DConS
	| YYNTstrictfldid (Position, String, Visibility, Bool)
	| YYNTtapp TauS
	| YYNTtau TauS
	| YYNTtauSB [TauS]
	| YYNTtauSC [TauS]
	| YYNTterm Exp
	| YYNTthenx Token
	| YYNTtopdefinition [Def]
	| YYNTtopex Exp
	| YYNTtyname SName
	| YYNTtypeclause (Maybe TauS)
	| YYNTtypedef Def
	| YYNTtyvar TauS
	| YYNTunex Exp
	| YYNTunop Token
	| YYNTvarid Token
	| YYNTvaridkw Token
	| YYNTvarop Token
	| YYNTvisdalt DConS
	| YYNTvisibledefinition [Def]
	| YYNTwheredef [Def]
	| YYNTwherelet [Def]
	| YYNTwheretokens [Token]
	| YYNTword String
	| YYNTwords [String];
showsi (YYStart  _) = "%start ";
	showsi (YYAcc _) = "%accept ";
	showsi (YYTok x) = yyshow x;
	showsi (YYNTaeq _) = "<aeq>";
	showsi (YYNTalias _) = "<alias>";
	showsi (YYNTannoitem _) = "<annoitem>";
	showsi (YYNTannoitems _) = "<annoitems>";
	showsi (YYNTannotation _) = "<annotation>";
	showsi (YYNTapats _) = "<apats>";
	showsi (YYNTappex _) = "<appex>";
	showsi (YYNTbinex _) = "<binex>";
	showsi (YYNTboundvar _) = "<boundvar>";
	showsi (YYNTboundvars _) = "<boundvars>";
	showsi (YYNTcalt _) = "<calt>";
	showsi (YYNTcalts _) = "<calts>";
	showsi (YYNTccontext _) = "<ccontext>";
	showsi (YYNTclassdef _) = "<classdef>";
	showsi (YYNTcommata _) = "<commata>";
	showsi (YYNTconfld _) = "<confld>";
	showsi (YYNTconflds _) = "<conflds>";
	showsi (YYNTcontypes _) = "<contypes>";
	showsi (YYNTdalt _) = "<dalt>";
	showsi (YYNTdalts _) = "<dalts>";
	showsi (YYNTdatadef _) = "<datadef>";
	showsi (YYNTdatainit _) = "<datainit>";
	showsi (YYNTdefinition _) = "<definition>";
	showsi (YYNTdefinitions _) = "<definitions>";
	showsi (YYNTderivedef _) = "<derivedef>";
	showsi (YYNTdocs _) = "<docs>";
	showsi (YYNTdocumentation _) = "<documentation>";
	showsi (YYNTdodefs _) = "<dodefs>";
	showsi (YYNTdplocaldef _) = "<dplocaldef>";
	showsi (YYNTdvars _) = "<dvars>";
	showsi (YYNTelsex _) = "<elsex>";
	showsi (YYNTexpr _) = "<expr>";
	showsi (YYNTexprSC _) = "<exprSC>";
	showsi (YYNTexprSS _) = "<exprSS>";
	showsi (YYNTfield _) = "<field>";
	showsi (YYNTfields _) = "<fields>";
	showsi (YYNTfitem _) = "<fitem>";
	showsi (YYNTfixity _) = "<fixity>";
	showsi (YYNTfldid _) = "<fldid>";
	showsi (YYNTfldids _) = "<fldids>";
	showsi (YYNTforall _) = "<forall>";
	showsi (YYNTfundef _) = "<fundef>";
	showsi (YYNTfunhead _) = "<funhead>";
	showsi (YYNTgargs _) = "<gargs>";
	showsi (YYNTgetfield _) = "<getfield>";
	showsi (YYNTgetfields _) = "<getfields>";
	showsi (YYNTgqual _) = "<gqual>";
	showsi (YYNTgquals _) = "<gquals>";
	showsi (YYNTguard _) = "<guard>";
	showsi (YYNTguards _) = "<guards>";
	showsi (YYNTicontext _) = "<icontext>";
	showsi (YYNTimport _) = "<import>";
	showsi (YYNTimportitem _) = "<importitem>";
	showsi (YYNTimportliste _) = "<importliste>";
	showsi (YYNTimportspec _) = "<importspec>";
	showsi (YYNTimportspecs _) = "<importspecs>";
	showsi (YYNTimpurenativedef _) = "<impurenativedef>";
	showsi (YYNTinfix _) = "<infix>";
	showsi (YYNTinstdef _) = "<instdef>";
	showsi (YYNTinsthead _) = "<insthead>";
	showsi (YYNTinterfaces _) = "<interfaces>";
	showsi (YYNTjitem _) = "<jitem>";
	showsi (YYNTjtoken _) = "<jtoken>";
	showsi (YYNTjtokens _) = "<jtokens>";
	showsi (YYNTkind _) = "<kind>";
	showsi (YYNTlambda _) = "<lambda>";
	showsi (YYNTlambdabody _) = "<lambdabody>";
	showsi (YYNTlcqual _) = "<lcqual>";
	showsi (YYNTlcquals _) = "<lcquals>";
	showsi (YYNTletdef _) = "<letdef>";
	showsi (YYNTletdefs _) = "<letdefs>";
	showsi (YYNTliteral _) = "<literal>";
	showsi (YYNTlocaldef _) = "<localdef>";
	showsi (YYNTlocaldefs _) = "<localdefs>";
	showsi (YYNTmbdot _) = "<mbdot>";
	showsi (YYNTmemspec _) = "<memspec>";
	showsi (YYNTmemspecs _) = "<memspecs>";
	showsi (YYNTmethodspec _) = "<methodspec>";
	showsi (YYNTmodule _) = "<module>";
	showsi (YYNTmoduleclause _) = "<moduleclause>";
	showsi (YYNTmoduledefinition _) = "<moduledefinition>";
	showsi (YYNTmodulename _) = "<modulename>";
	showsi (YYNTmodulename1 _) = "<modulename1>";
	showsi (YYNTnativedef _) = "<nativedef>";
	showsi (YYNTnativename _) = "<nativename>";
	showsi (YYNTnativepur _) = "<nativepur>";
	showsi (YYNTnativespec _) = "<nativespec>";
	showsi (YYNToperator _) = "<operator>";
	showsi (YYNToperators _) = "<operators>";
	showsi (YYNTopstring _) = "<opstring>";
	showsi (YYNTpattern _) = "<pattern>";
	showsi (YYNTplainfldid _) = "<plainfldid>";
	showsi (YYNTplocaldef _) = "<plocaldef>";
	showsi (YYNTprimary _) = "<primary>";
	showsi (YYNTpublicdefinition _) = "<publicdefinition>";
	showsi (YYNTqconid _) = "<qconid>";
	showsi (YYNTqualifiers _) = "<qualifiers>";
	showsi (YYNTqvarid _) = "<qvarid>";
	showsi (YYNTqvarids _) = "<qvarids>";
	showsi (YYNTqvarop _) = "<qvarop>";
	showsi (YYNTrawnativename _) = "<rawnativename>";
	showsi (YYNTrho _) = "<rho>";
	showsi (YYNTrhofun _) = "<rhofun>";
	showsi (YYNTscontext _) = "<scontext>";
	showsi (YYNTscontexts _) = "<scontexts>";
	showsi (YYNTsemicoli _) = "<semicoli>";
	showsi (YYNTsicontext _) = "<sicontext>";
	showsi (YYNTsicontexts _) = "<sicontexts>";
	showsi (YYNTsigex _) = "<sigex>";
	showsi (YYNTsigexs _) = "<sigexs>";
	showsi (YYNTsigma _) = "<sigma>";
	showsi (YYNTsimpledalt _) = "<simpledalt>";
	showsi (YYNTsimplekind _) = "<simplekind>";
	showsi (YYNTsimpletype _) = "<simpletype>";
	showsi (YYNTsimpletypes _) = "<simpletypes>";
	showsi (YYNTstrictdalt _) = "<strictdalt>";
	showsi (YYNTstrictfldid _) = "<strictfldid>";
	showsi (YYNTtapp _) = "<tapp>";
	showsi (YYNTtau _) = "<tau>";
	showsi (YYNTtauSB _) = "<tauSB>";
	showsi (YYNTtauSC _) = "<tauSC>";
	showsi (YYNTterm _) = "<term>";
	showsi (YYNTthenx _) = "<thenx>";
	showsi (YYNTtopdefinition _) = "<topdefinition>";
	showsi (YYNTtopex _) = "<topex>";
	showsi (YYNTtyname _) = "<tyname>";
	showsi (YYNTtypeclause _) = "<typeclause>";
	showsi (YYNTtypedef _) = "<typedef>";
	showsi (YYNTtyvar _) = "<tyvar>";
	showsi (YYNTunex _) = "<unex>";
	showsi (YYNTunop _) = "<unop>";
	showsi (YYNTvarid _) = "<varid>";
	showsi (YYNTvaridkw _) = "<varidkw>";
	showsi (YYNTvarop _) = "<varop>";
	showsi (YYNTvisdalt _) = "<visdalt>";
	showsi (YYNTvisibledefinition _) = "<visibledefinition>";
	showsi (YYNTwheredef _) = "<wheredef>";
	showsi (YYNTwherelet _) = "<wherelet>";
	showsi (YYNTwheretokens _) = "<wheretokens>";
	showsi (YYNTword _) = "<word>";
	showsi (YYNTwords _) = "<words>";
showst st = joined " " (map (\(_,si) -> showsi si) (reverse st));
!yydebug = (maybe "" id (System.getenv "YYDEBUG")).toLowerCase ~ Â´(1|yes|true|on)Â´;
yytrace s = (if yydebug then trace s else false) `seq` ();
yydbgAccept  s t = yytrace ("in state " ++ show s ++ " accept  " ++ show t ++  "\n" );
private yyaction0 t =   case yychar t of {
  '{' -> YYAction 4;
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    PACKAGE -> YYAction 2;
    PROTECTED -> YYAction 3;
    _ -> (YYAction yyErr);
  };
};
private yyaction1 t =   case yychar t of {
  ';' -> YYAction 8;
  '?' -> YYAction (-16);
  '!' -> YYAction (-16);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-16);
    PACKAGE -> YYAction (-16);
    PRIVATE -> YYAction (-16);
    PROTECTED -> YYAction (-16);
    PUBLIC -> YYAction (-16);
    _ -> (YYAction yyErr);
  };
};
private yyaction2 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction3 t =   case yytoken t of {
    PACKAGE -> YYAction 23;
    _ -> (YYAction yyErr);
  };
private yyaction4 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    IMPORT -> YYAction 28;
    INFIX -> YYAction 29;
    INFIXR -> YYAction 30;
    INFIXL -> YYAction 31;
    NATIVE -> YYAction 32;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    ABSTRACT -> YYAction 37;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 46;
    PROTECTED -> YYAction 47;
    PUBLIC -> YYAction 48;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
yyaccept  (yyvals@((5, (YYNTmodule yy1)):_), yytoks) = yydbgAccept 5 (showst (take 1 yyvals)) `seq`
	([(5, YYAcc yy1)], yytoks);
yyaccept (yyvs,_) = yybadprod 5 yyvs;
private yyaction5 t = (YYAction yyErr);
private yyaction6 t =   case yychar t of {
  ';' -> YYAction 104;
  _ ->   case yytoken t of {
    VARID -> YYAction 102;
    WHERE -> YYAction 103;
    _ -> (YYAction yyErr);
  };
};
private yyaction7 t =   case yytoken t of {
    PACKAGE -> YYAction 107;
    PROTECTED -> YYAction 108;
    _ -> (YYAction yyErr);
  };
private yyaction8 t =   case yychar t of {
  ';' -> YYAction 8;
  '-' -> YYAction (-27);
  '}' -> YYAction (-27);
  '(' -> YYAction (-27);
  '[' -> YYAction (-27);
  '?' -> YYAction (-27);
  '!' -> YYAction (-27);
  '\\' -> YYAction (-27);
  '_' -> YYAction (-27);
  _ ->   case yytoken t of {
    VARID -> YYAction (-27);
    CONID -> YYAction (-27);
    QUALIFIER -> YYAction (-27);
    DOCUMENTATION -> YYAction (-27);
    IMPORT -> YYAction (-27);
    INFIX -> YYAction (-27);
    INFIXR -> YYAction (-27);
    INFIXL -> YYAction (-27);
    NATIVE -> YYAction (-27);
    NEWTYPE -> YYAction (-27);
    DATA -> YYAction (-27);
    CLASS -> YYAction (-27);
    INSTANCE -> YYAction (-27);
    ABSTRACT -> YYAction (-27);
    TYPE -> YYAction (-27);
    TRUE -> YYAction (-27);
    FALSE -> YYAction (-27);
    IF -> YYAction (-27);
    CASE -> YYAction (-27);
    DERIVE -> YYAction (-27);
    LET -> YYAction (-27);
    DO -> YYAction (-27);
    PRIVATE -> YYAction (-27);
    PROTECTED -> YYAction (-27);
    PUBLIC -> YYAction (-27);
    PURE -> YYAction (-27);
    INTCONST -> YYAction (-27);
    STRCONST -> YYAction (-27);
    LONGCONST -> YYAction (-27);
    FLTCONST -> YYAction (-27);
    DBLCONST -> YYAction (-27);
    CHRCONST -> YYAction (-27);
    REGEXP -> YYAction (-27);
    BIGCONST -> YYAction (-27);
    _ -> (YYAction yyErr);
  };
};
private yyaction9 t = YYAction (-17);
private yyaction10 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    _ -> (YYAction yyErr);
  };
private yyaction11 t = YYAction (-174);
private yyaction12 t = YYAction (-12);
private yyaction13 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction14 t = YYAction (-179);
private yyaction15 t = YYAction (-180);
private yyaction16 t = YYAction (-177);
private yyaction17 t = YYAction (-175);
private yyaction18 t = YYAction (-176);
private yyaction19 t = YYAction (-178);
private yyaction20 t = YYAction (-15);
private yyaction21 t =   case yychar t of {
  '.' -> YYAction 112;
  _ -> (YYAction yyErr);
};
private yyaction22 t = YYAction (-20);
private yyaction23 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction24 t =   case yychar t of {
  '-' -> YYAction (-185);
  '.' -> YYAction (-185);
  '(' -> YYAction (-185);
  ',' -> YYAction (-173);
  '|' -> YYAction (-185);
  '[' -> YYAction (-185);
  '?' -> YYAction (-185);
  '!' -> YYAction (-185);
  '=' -> YYAction (-185);
  '_' -> YYAction (-185);
  _ ->   case yytoken t of {
    VARID -> YYAction (-185);
    CONID -> YYAction (-185);
    QUALIFIER -> YYAction (-185);
    TRUE -> YYAction (-185);
    FALSE -> YYAction (-185);
    DO -> YYAction (-185);
    INTCONST -> YYAction (-185);
    STRCONST -> YYAction (-185);
    LONGCONST -> YYAction (-185);
    FLTCONST -> YYAction (-185);
    DBLCONST -> YYAction (-185);
    CHRCONST -> YYAction (-185);
    REGEXP -> YYAction (-185);
    BIGCONST -> YYAction (-185);
    DCOLON -> YYAction (-173);
    SOMEOP -> YYAction (-185);
    _ -> (YYAction yyErr);
  };
};
private yyaction25 t = YYAction (-188);
private yyaction26 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '{' -> YYAction (-409);
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    CONID -> YYAction 115;
    QUALIFIER -> YYAction 116;
    _ -> (YYAction yyErr);
  };
};
private yyaction27 t = YYAction (-119);
private yyaction28 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction29 t =   case yytoken t of {
    INTCONST -> YYAction 120;
    _ -> (YYAction yyErr);
  };
private yyaction30 t =   case yytoken t of {
    INTCONST -> YYAction 121;
    _ -> (YYAction yyErr);
  };
private yyaction31 t =   case yytoken t of {
    INTCONST -> YYAction 122;
    _ -> (YYAction yyErr);
  };
private yyaction32 t =   case yychar t of {
  '-' -> YYAction 126;
  '(' -> YYAction 127;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    PACKAGE -> YYAction 124;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction33 t =   case yytoken t of {
    CONID -> YYAction 133;
    _ -> (YYAction yyErr);
  };
private yyaction34 t =   case yytoken t of {
    CONID -> YYAction 134;
    _ -> (YYAction yyErr);
  };
private yyaction35 t =   case yychar t of {
  '(' -> YYAction 136;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction36 t =   case yychar t of {
  '(' -> YYAction 140;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction37 t =   case yytoken t of {
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    _ -> (YYAction yyErr);
  };
private yyaction38 t =   case yytoken t of {
    CONID -> YYAction 146;
    _ -> (YYAction yyErr);
  };
private yyaction39 t = YYAction (-349);
private yyaction40 t = YYAction (-350);
private yyaction41 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction42 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction43 t =   case yychar t of {
  '(' -> YYAction 140;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction44 t =   case yychar t of {
  '{' -> YYAction 153;
  _ -> (YYAction yyErr);
};
private yyaction45 t =   case yychar t of {
  '{' -> YYAction 154;
  _ -> (YYAction yyErr);
};
private yyaction46 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 155;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction47 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 155;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction48 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 155;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction49 t =   case yytoken t of {
    NATIVE -> YYAction 155;
    _ -> (YYAction yyErr);
  };
private yyaction50 t = YYAction (-353);
private yyaction51 t = YYAction (-352);
private yyaction52 t = YYAction (-355);
private yyaction53 t = YYAction (-356);
private yyaction54 t = YYAction (-357);
private yyaction55 t = YYAction (-351);
private yyaction56 t = YYAction (-358);
private yyaction57 t = YYAction (-354);
private yyaction58 t =   case yychar t of {
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction59 t =   case yychar t of {
  '-' -> YYAction 161;
  '(' -> YYAction 148;
  ')' -> YYAction 162;
  ',' -> YYAction 163;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction60 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  ']' -> YYAction 169;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction61 t = YYAction (-197);
private yyaction62 t = YYAction (-196);
private yyaction63 t =   case yychar t of {
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction64 t = YYAction (-427);
private yyaction65 t =   case yychar t of {
  '}' -> YYAction 174;
  _ -> (YYAction yyErr);
};
private yyaction66 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-29);
  _ -> (YYAction yyErr);
};
private yyaction67 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ';' -> YYAction (-32);
  '}' -> YYAction (-32);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    IMPORT -> YYAction 28;
    INFIX -> YYAction 29;
    INFIXR -> YYAction 30;
    INFIXL -> YYAction 31;
    NATIVE -> YYAction 32;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    ABSTRACT -> YYAction 37;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 46;
    PROTECTED -> YYAction 47;
    PUBLIC -> YYAction 48;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction68 t = YYAction (-34);
private yyaction69 t = YYAction (-35);
private yyaction70 t = YYAction (-43);
private yyaction71 t = YYAction (-121);
private yyaction72 t = YYAction (-40);
private yyaction73 t = YYAction (-41);
private yyaction74 t = YYAction (-42);
private yyaction75 t = YYAction (-120);
private yyaction76 t = YYAction (-122);
private yyaction77 t = YYAction (-123);
private yyaction78 t = YYAction (-124);
private yyaction79 t = YYAction (-125);
private yyaction80 t = YYAction (-129);
private yyaction81 t = YYAction (-130);
private yyaction82 t =   case yychar t of {
  ';' -> YYAction (-131);
  '}' -> YYAction (-131);
  _ ->   case yytoken t of {
    WHERE -> YYAction 177;
    _ -> (YYAction yyErr);
  };
};
private yyaction83 t = YYAction (-208);
private yyaction84 t = YYAction (-425);
private yyaction85 t =   case yychar t of {
  '{' -> YYAction 179;
  '-' -> YYAction (-428);
  ';' -> YYAction (-428);
  '}' -> YYAction (-428);
  '.' -> YYAction (-428);
  '(' -> YYAction (-428);
  ')' -> YYAction (-428);
  ',' -> YYAction (-428);
  '|' -> YYAction (-428);
  '[' -> YYAction (-428);
  ']' -> YYAction (-428);
  '?' -> YYAction (-428);
  '!' -> YYAction (-428);
  '=' -> YYAction (-428);
  '\\' -> YYAction (-428);
  '_' -> YYAction (-428);
  _ ->   case yytoken t of {
    VARID -> YYAction (-428);
    CONID -> YYAction (-428);
    QUALIFIER -> YYAction (-428);
    WHERE -> YYAction (-428);
    TRUE -> YYAction (-428);
    FALSE -> YYAction (-428);
    THEN -> YYAction (-428);
    ELSE -> YYAction (-428);
    OF -> YYAction (-428);
    DO -> YYAction (-428);
    INTCONST -> YYAction (-428);
    STRCONST -> YYAction (-428);
    LONGCONST -> YYAction (-428);
    FLTCONST -> YYAction (-428);
    DBLCONST -> YYAction (-428);
    CHRCONST -> YYAction (-428);
    REGEXP -> YYAction (-428);
    BIGCONST -> YYAction (-428);
    ARROW -> YYAction (-428);
    DCOLON -> YYAction (-428);
    GETS -> YYAction (-428);
    DOTDOT -> YYAction (-428);
    SOMEOP -> YYAction (-428);
    _ -> (YYAction yyErr);
  };
};
private yyaction86 t =   case yychar t of {
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction87 t =   case yychar t of {
  '-' -> YYAction 182;
  _ ->   case yytoken t of {
    VARID -> YYAction 181;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction88 t =   case yytoken t of {
    DCOLON -> YYAction 186;
    _ -> (YYAction yyErr);
  };
private yyaction89 t =   case yychar t of {
  ',' -> YYAction 187;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-212);
    _ -> (YYAction yyErr);
  };
};
private yyaction90 t = YYAction (-215);
private yyaction91 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 188;
    _ -> (YYAction yyErr);
  };
};
private yyaction92 t =   case yychar t of {
  '|' -> YYAction 190;
  '=' -> YYAction 191;
  _ -> (YYAction yyErr);
};
private yyaction93 t =   case yychar t of {
  '-' -> YYAction 195;
  '|' -> YYAction (-348);
  '=' -> YYAction (-348);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 194;
    _ -> (YYAction yyErr);
  };
};
private yyaction94 t = YYAction (-426);
private yyaction95 t = YYAction (-401);
private yyaction96 t = YYAction (-397);
private yyaction97 t =   case yychar t of {
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  '-' -> YYAction (-402);
  ';' -> YYAction (-402);
  '}' -> YYAction (-402);
  ')' -> YYAction (-402);
  ',' -> YYAction (-402);
  '|' -> YYAction (-402);
  ']' -> YYAction (-402);
  '=' -> YYAction (-402);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    WHERE -> YYAction (-402);
    THEN -> YYAction (-402);
    ELSE -> YYAction (-402);
    OF -> YYAction (-402);
    ARROW -> YYAction (-402);
    DCOLON -> YYAction (-402);
    GETS -> YYAction (-402);
    DOTDOT -> YYAction (-402);
    SOMEOP -> YYAction (-402);
    _ -> (YYAction yyErr);
  };
};
private yyaction98 t = YYAction (-403);
private yyaction99 t =   case yychar t of {
  '.' -> YYAction 197;
  '-' -> YYAction (-405);
  ';' -> YYAction (-405);
  '}' -> YYAction (-405);
  '(' -> YYAction (-405);
  ')' -> YYAction (-405);
  ',' -> YYAction (-405);
  '|' -> YYAction (-405);
  '[' -> YYAction (-405);
  ']' -> YYAction (-405);
  '?' -> YYAction (-405);
  '!' -> YYAction (-405);
  '=' -> YYAction (-405);
  '\\' -> YYAction (-405);
  '_' -> YYAction (-405);
  _ ->   case yytoken t of {
    VARID -> YYAction (-405);
    CONID -> YYAction (-405);
    QUALIFIER -> YYAction (-405);
    WHERE -> YYAction (-405);
    TRUE -> YYAction (-405);
    FALSE -> YYAction (-405);
    THEN -> YYAction (-405);
    ELSE -> YYAction (-405);
    OF -> YYAction (-405);
    DO -> YYAction (-405);
    INTCONST -> YYAction (-405);
    STRCONST -> YYAction (-405);
    LONGCONST -> YYAction (-405);
    FLTCONST -> YYAction (-405);
    DBLCONST -> YYAction (-405);
    CHRCONST -> YYAction (-405);
    REGEXP -> YYAction (-405);
    BIGCONST -> YYAction (-405);
    ARROW -> YYAction (-405);
    DCOLON -> YYAction (-405);
    GETS -> YYAction (-405);
    DOTDOT -> YYAction (-405);
    SOMEOP -> YYAction (-405);
    _ -> (YYAction yyErr);
  };
};
private yyaction100 t =   case yychar t of {
  '{' -> YYAction 198;
  _ -> (YYAction yyErr);
};
private yyaction101 t = YYAction (-411);
private yyaction102 t = YYAction (-24);
private yyaction103 t =   case yychar t of {
  '{' -> YYAction 199;
  _ -> (YYAction yyErr);
};
private yyaction104 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    IMPORT -> YYAction 28;
    INFIX -> YYAction 29;
    INFIXR -> YYAction 30;
    INFIXL -> YYAction 31;
    NATIVE -> YYAction 32;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    ABSTRACT -> YYAction 37;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 46;
    PROTECTED -> YYAction 47;
    PUBLIC -> YYAction 48;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction105 t =   case yychar t of {
  '(' -> YYAction 201;
  _ -> (YYAction yyErr);
};
private yyaction106 t =   case yychar t of {
  '(' -> YYAction (-25);
  _ ->   case yytoken t of {
    VARID -> YYAction 102;
    _ -> (YYAction yyErr);
  };
};
private yyaction107 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction108 t =   case yytoken t of {
    PACKAGE -> YYAction 204;
    _ -> (YYAction yyErr);
  };
private yyaction109 t = YYAction (-28);
private yyaction110 t = YYAction (-18);
private yyaction111 t = YYAction (-14);
private yyaction112 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction113 t = YYAction (-22);
private yyaction114 t = YYAction (-189);
private yyaction115 t = YYAction (-187);
private yyaction116 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '{' -> YYAction (-410);
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    CONID -> YYAction 206;
    _ -> (YYAction yyErr);
  };
};
private yyaction117 t = YYAction (-190);
private yyaction118 t = YYAction (-184);
private yyaction119 t =   case yychar t of {
  '(' -> YYAction 211;
  ';' -> YYAction (-147);
  '}' -> YYAction (-147);
  _ ->   case yytoken t of {
    VARID -> YYAction 208;
    CONID -> YYAction 209;
    PUBLIC -> YYAction 210;
    _ -> (YYAction yyErr);
  };
};
private yyaction120 t = YYAction (-198);
private yyaction121 t = YYAction (-200);
private yyaction122 t = YYAction (-199);
private yyaction123 t = YYAction (-173);
private yyaction124 t =   case yytoken t of {
    TYPE -> YYAction 214;
    WHERE -> YYAction (-45);
    CLASS -> YYAction (-45);
    _ -> (YYAction yyErr);
  };
private yyaction125 t = YYAction (-195);
private yyaction126 t = YYAction (-218);
private yyaction127 t =   case yychar t of {
  '-' -> YYAction 216;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction128 t = YYAction (-219);
private yyaction129 t = YYAction (-217);
private yyaction130 t = YYAction (-216);
private yyaction131 t =   case yychar t of {
  '{' -> YYAction 224;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 219;
    CONID -> YYAction 220;
    QUALIFIER -> YYAction 221;
    PACKAGE -> YYAction 222;
    STRCONST -> YYAction 223;
    SOMEOP -> YYAction 125;
    DCOLON -> YYAction (-226);
    _ -> (YYAction yyErr);
  };
};
private yyaction132 t =   case yytoken t of {
    DCOLON -> YYAction 231;
    _ -> (YYAction yyErr);
  };
private yyaction133 t =   case yychar t of {
  '(' -> YYAction 233;
  '=' -> YYAction 234;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
};
private yyaction134 t =   case yychar t of {
  '(' -> YYAction 233;
  '=' -> YYAction 237;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
};
private yyaction135 t =   case yytoken t of {
    CONID -> YYAction 115;
    QUALIFIER -> YYAction 239;
    _ -> (YYAction yyErr);
  };
private yyaction136 t =   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
private yyaction137 t =   case yychar t of {
  '(' -> YYAction 233;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
};
private yyaction138 t = YYAction (-274);
private yyaction139 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 188;
    EARROW -> YYAction 243;
    _ -> (YYAction yyErr);
  };
};
private yyaction140 t =   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
private yyaction141 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction142 t = YYAction (-282);
private yyaction143 t =   case yychar t of {
  ';' -> YYAction (-285);
  '}' -> YYAction (-285);
  _ ->   case yytoken t of {
    EARROW -> YYAction 253;
    WHERE -> YYAction (-285);
    _ -> (YYAction yyErr);
  };
};
private yyaction144 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 188;
    _ -> (YYAction yyErr);
  };
};
private yyaction145 t = YYAction (-39);
private yyaction146 t =   case yychar t of {
  '(' -> YYAction 233;
  '=' -> YYAction 255;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
};
private yyaction147 t = YYAction (-185);
private yyaction148 t =   case yychar t of {
  '-' -> YYAction 257;
  '(' -> YYAction 148;
  ')' -> YYAction 162;
  ',' -> YYAction 163;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction149 t =   case yychar t of {
  ';' -> YYAction 261;
  _ ->   case yytoken t of {
    THEN -> YYAction 260;
    _ -> (YYAction yyErr);
  };
};
private yyaction150 t =   case yychar t of {
  '-' -> YYAction 195;
  ';' -> YYAction (-389);
  '}' -> YYAction (-389);
  ')' -> YYAction (-389);
  ',' -> YYAction (-389);
  '|' -> YYAction (-389);
  ']' -> YYAction (-389);
  '=' -> YYAction (-389);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 263;
    SOMEOP -> YYAction 194;
    WHERE -> YYAction (-389);
    THEN -> YYAction (-389);
    ELSE -> YYAction (-389);
    OF -> YYAction (-389);
    ARROW -> YYAction (-389);
    GETS -> YYAction (-389);
    DOTDOT -> YYAction (-389);
    _ -> (YYAction yyErr);
  };
};
private yyaction151 t =   case yytoken t of {
    OF -> YYAction 264;
    _ -> (YYAction yyErr);
  };
private yyaction152 t = YYAction (-287);
private yyaction153 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction154 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 269;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction155 t =   case yychar t of {
  '-' -> YYAction 126;
  '(' -> YYAction 127;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction156 t = YYAction (-36);
private yyaction157 t = YYAction (-37);
private yyaction158 t = YYAction (-38);
private yyaction159 t = YYAction (-214);
private yyaction160 t = YYAction (-396);
private yyaction161 t =   case yychar t of {
  '(' -> YYAction 148;
  ')' -> YYAction 274;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction162 t = YYAction (-431);
private yyaction163 t =   case yychar t of {
  ',' -> YYAction 163;
  ')' -> YYAction (-447);
  _ -> (YYAction yyErr);
};
private yyaction164 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  ')' -> YYAction 276;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction165 t =   case yychar t of {
  '(' -> YYAction 148;
  ')' -> YYAction 278;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction166 t =   case yychar t of {
  ')' -> YYAction 279;
  _ -> (YYAction yyErr);
};
private yyaction167 t =   case yychar t of {
  ';' -> YYAction 280;
  ')' -> YYAction 281;
  ',' -> YYAction 282;
  _ -> (YYAction yyErr);
};
private yyaction168 t =   case yychar t of {
  '-' -> YYAction 284;
  ';' -> YYAction (-389);
  ')' -> YYAction (-389);
  ',' -> YYAction (-389);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 263;
    SOMEOP -> YYAction 283;
    _ -> (YYAction yyErr);
  };
};
private yyaction169 t = YYAction (-442);
private yyaction170 t =   case yychar t of {
  ',' -> YYAction 286;
  '|' -> YYAction 287;
  ']' -> YYAction (-460);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-460);
    _ -> (YYAction yyErr);
  };
};
private yyaction171 t =   case yychar t of {
  ']' -> YYAction 289;
  _ ->   case yytoken t of {
    DOTDOT -> YYAction 288;
    _ -> (YYAction yyErr);
  };
};
private yyaction172 t =   case yychar t of {
  '\\' -> YYAction 63;
  _ ->   case yytoken t of {
    ARROW -> YYAction 290;
    _ -> (YYAction yyErr);
  };
};
private yyaction173 t =   case yychar t of {
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  '\\' -> YYAction (-407);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    ARROW -> YYAction (-407);
    _ -> (YYAction yyErr);
  };
};
private yyaction174 t = YYAction (-3);
private yyaction175 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-30);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    IMPORT -> YYAction 28;
    INFIX -> YYAction 29;
    INFIXR -> YYAction 30;
    INFIXL -> YYAction 31;
    NATIVE -> YYAction 32;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    ABSTRACT -> YYAction 37;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 46;
    PROTECTED -> YYAction 47;
    PUBLIC -> YYAction 48;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction176 t = YYAction (-33);
private yyaction177 t =   case yychar t of {
  '{' -> YYAction 295;
  _ -> (YYAction yyErr);
};
private yyaction178 t = YYAction (-347);
private yyaction179 t =   case yychar t of {
  '}' -> YYAction 296;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction180 t = YYAction (-406);
private yyaction181 t = YYAction (-202);
private yyaction182 t = YYAction (-203);
private yyaction183 t = YYAction (-201);
private yyaction184 t =   case yychar t of {
  '-' -> YYAction 182;
  ';' -> YYAction (-204);
  '}' -> YYAction (-204);
  _ ->   case yytoken t of {
    VARID -> YYAction 181;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction185 t = YYAction (-206);
private yyaction186 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction187 t =   case yychar t of {
  '(' -> YYAction 127;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction188 t =   case yychar t of {
  '{' -> YYAction 310;
  _ -> (YYAction yyErr);
};
private yyaction189 t = YYAction (-288);
private yyaction190 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction191 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction192 t = YYAction (-346);
private yyaction193 t =   case yychar t of {
  '|' -> YYAction 190;
  ';' -> YYAction (-377);
  '}' -> YYAction (-377);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-377);
    _ -> (YYAction yyErr);
  };
};
private yyaction194 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction195 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction196 t = YYAction (-404);
private yyaction197 t =   case yychar t of {
  '{' -> YYAction 319;
  '[' -> YYAction 320;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 318;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction198 t =   case yytoken t of {
    VARID -> YYAction 323;
    _ -> (YYAction yyErr);
  };
private yyaction199 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    IMPORT -> YYAction 28;
    INFIX -> YYAction 29;
    INFIXR -> YYAction 30;
    INFIXL -> YYAction 31;
    NATIVE -> YYAction 32;
    NEWTYPE -> YYAction 33;
    DATA -> YYAction 34;
    CLASS -> YYAction 35;
    INSTANCE -> YYAction 36;
    ABSTRACT -> YYAction 37;
    TYPE -> YYAction 38;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    DERIVE -> YYAction 43;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 46;
    PROTECTED -> YYAction 47;
    PUBLIC -> YYAction 48;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction200 t = YYAction (-1);
private yyaction201 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    QUALIFIER -> YYAction 327;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction202 t = YYAction (-26);
private yyaction203 t = YYAction (-19);
private yyaction204 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction205 t = YYAction (-13);
private yyaction206 t = YYAction (-186);
private yyaction207 t = YYAction (-183);
private yyaction208 t =   case yychar t of {
  '(' -> YYAction (-173);
  _ ->   case yytoken t of {
    CONID -> YYAction 333;
    _ -> (YYAction yyErr);
  };
};
private yyaction209 t =   case yychar t of {
  '(' -> YYAction 211;
  ';' -> YYAction (-147);
  '}' -> YYAction (-147);
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    PUBLIC -> YYAction 210;
    _ -> (YYAction yyErr);
  };
};
private yyaction210 t =   case yychar t of {
  '(' -> YYAction 211;
  ';' -> YYAction (-147);
  '}' -> YYAction (-147);
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    PUBLIC -> YYAction 210;
    _ -> (YYAction yyErr);
  };
};
private yyaction211 t =   case yychar t of {
  ')' -> YYAction 339;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 336;
    QUALIFIER -> YYAction 337;
    PUBLIC -> YYAction 338;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction212 t = YYAction (-144);
private yyaction213 t =   case yychar t of {
  '(' -> YYAction 347;
  _ -> (YYAction yyErr);
};
private yyaction214 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction215 t =   case yytoken t of {
    CLASS -> YYAction 351;
    WHERE -> YYAction (-47);
    _ -> (YYAction yyErr);
  };
private yyaction216 t =   case yychar t of {
  ')' -> YYAction 353;
  _ -> (YYAction yyErr);
};
private yyaction217 t =   case yychar t of {
  ')' -> YYAction 354;
  _ -> (YYAction yyErr);
};
private yyaction218 t =   case yychar t of {
  ')' -> YYAction 355;
  _ -> (YYAction yyErr);
};
private yyaction219 t =   case yychar t of {
  '.' -> YYAction 356;
  ';' -> YYAction (-5);
  '{' -> YYAction (-5);
  '}' -> YYAction (-5);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-5);
    DCOLON -> YYAction (-5);
    _ -> (YYAction yyErr);
  };
};
private yyaction220 t = YYAction (-6);
private yyaction221 t =   case yytoken t of {
    VARID -> YYAction 219;
    CONID -> YYAction 220;
    QUALIFIER -> YYAction 221;
    PACKAGE -> YYAction 222;
    STRCONST -> YYAction 223;
    _ -> (YYAction yyErr);
  };
private yyaction222 t =   case yychar t of {
  '.' -> YYAction 358;
  ';' -> YYAction (-7);
  '{' -> YYAction (-7);
  '}' -> YYAction (-7);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-7);
    DCOLON -> YYAction (-7);
    _ -> (YYAction yyErr);
  };
};
private yyaction223 t = YYAction (-11);
private yyaction224 t =   case yychar t of {
  '}' -> YYAction 359;
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction225 t = YYAction (-220);
private yyaction226 t = YYAction (-4);
private yyaction227 t = YYAction (-221);
private yyaction228 t = YYAction (-222);
private yyaction229 t =   case yychar t of {
  '{' -> YYAction 224;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-224);
    _ -> (YYAction yyErr);
  };
};
private yyaction230 t = YYAction (-225);
private yyaction231 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction232 t = YYAction (-258);
private yyaction233 t =   case yytoken t of {
    VARID -> YYAction 366;
    _ -> (YYAction yyErr);
  };
private yyaction234 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    DOCUMENTATION -> YYAction 368;
    PRIVATE -> YYAction 369;
    PROTECTED -> YYAction 370;
    PUBLIC -> YYAction 371;
    _ -> (YYAction yyErr);
  };
};
private yyaction235 t =   case yychar t of {
  '(' -> YYAction 233;
  '=' -> YYAction (-302);
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
};
private yyaction236 t =   case yychar t of {
  '=' -> YYAction 379;
  _ -> (YYAction yyErr);
};
private yyaction237 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    DOCUMENTATION -> YYAction 368;
    NATIVE -> YYAction 380;
    PRIVATE -> YYAction 369;
    PROTECTED -> YYAction 370;
    PUBLIC -> YYAction 371;
    PURE -> YYAction 381;
    MUTABLE -> YYAction 382;
    _ -> (YYAction yyErr);
  };
};
private yyaction238 t =   case yychar t of {
  '=' -> YYAction 386;
  _ -> (YYAction yyErr);
};
private yyaction239 t =   case yytoken t of {
    CONID -> YYAction 206;
    _ -> (YYAction yyErr);
  };
private yyaction240 t =   case yychar t of {
  ',' -> YYAction 387;
  ')' -> YYAction (-271);
  _ -> (YYAction yyErr);
};
private yyaction241 t =   case yychar t of {
  ')' -> YYAction 388;
  _ -> (YYAction yyErr);
};
private yyaction242 t = YYAction (-270);
private yyaction243 t =   case yytoken t of {
    CONID -> YYAction 389;
    _ -> (YYAction yyErr);
  };
private yyaction244 t = YYAction (-277);
private yyaction245 t =   case yychar t of {
  ',' -> YYAction 390;
  ')' -> YYAction (-279);
  _ -> (YYAction yyErr);
};
private yyaction246 t =   case yychar t of {
  ')' -> YYAction 391;
  _ -> (YYAction yyErr);
};
private yyaction247 t =   case yychar t of {
  '(' -> YYAction 247;
  ')' -> YYAction 394;
  ',' -> YYAction 163;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 392;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    ARROW -> YYAction 393;
    _ -> (YYAction yyErr);
  };
};
private yyaction248 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  ']' -> YYAction 397;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction249 t = YYAction (-260);
private yyaction250 t = YYAction (-278);
private yyaction251 t = YYAction (-252);
private yyaction252 t = YYAction (-253);
private yyaction253 t =   case yychar t of {
  '(' -> YYAction 399;
  '[' -> YYAction 400;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction254 t = YYAction (-286);
private yyaction255 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction256 t =   case yychar t of {
  '=' -> YYAction 403;
  _ -> (YYAction yyErr);
};
private yyaction257 t =   case yychar t of {
  '(' -> YYAction 148;
  ')' -> YYAction 404;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction258 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  ')' -> YYAction 405;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction259 t =   case yychar t of {
  '(' -> YYAction 148;
  ')' -> YYAction 406;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction260 t = YYAction (-391);
private yyaction261 t =   case yytoken t of {
    THEN -> YYAction 407;
    _ -> (YYAction yyErr);
  };
private yyaction262 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction263 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction264 t =   case yychar t of {
  '{' -> YYAction 410;
  _ -> (YYAction yyErr);
};
private yyaction265 t = YYAction (-139);
private yyaction266 t =   case yychar t of {
  ';' -> YYAction (-140);
  '}' -> YYAction (-140);
  _ ->   case yytoken t of {
    WHERE -> YYAction 177;
    _ -> (YYAction yyErr);
  };
};
private yyaction267 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-141);
  _ -> (YYAction yyErr);
};
private yyaction268 t =   case yychar t of {
  '}' -> YYAction 412;
  _ -> (YYAction yyErr);
};
private yyaction269 t =   case yychar t of {
  '{' -> YYAction 413;
  _ -> (YYAction yyErr);
};
private yyaction270 t =   case yychar t of {
  '=' -> YYAction 415;
  ';' -> YYAction (-371);
  '}' -> YYAction (-371);
  ',' -> YYAction (-371);
  ']' -> YYAction (-371);
  _ ->   case yytoken t of {
    GETS -> YYAction 414;
    _ -> (YYAction yyErr);
  };
};
private yyaction271 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-368);
  _ -> (YYAction yyErr);
};
private yyaction272 t = YYAction (-362);
private yyaction273 t =   case yychar t of {
  '}' -> YYAction 417;
  _ -> (YYAction yyErr);
};
private yyaction274 t =   case yychar t of {
  '-' -> YYAction (-435);
  '.' -> YYAction (-435);
  '(' -> YYAction (-435);
  ',' -> YYAction (-211);
  '|' -> YYAction (-435);
  '[' -> YYAction (-435);
  '?' -> YYAction (-435);
  '!' -> YYAction (-435);
  '=' -> YYAction (-435);
  '_' -> YYAction (-435);
  _ ->   case yytoken t of {
    VARID -> YYAction (-435);
    CONID -> YYAction (-435);
    QUALIFIER -> YYAction (-435);
    TRUE -> YYAction (-435);
    FALSE -> YYAction (-435);
    DO -> YYAction (-435);
    INTCONST -> YYAction (-435);
    STRCONST -> YYAction (-435);
    LONGCONST -> YYAction (-435);
    FLTCONST -> YYAction (-435);
    DBLCONST -> YYAction (-435);
    CHRCONST -> YYAction (-435);
    REGEXP -> YYAction (-435);
    BIGCONST -> YYAction (-435);
    DCOLON -> YYAction (-211);
    SOMEOP -> YYAction (-435);
    _ -> (YYAction yyErr);
  };
};
private yyaction275 t = YYAction (-448);
private yyaction276 t =   case yychar t of {
  '-' -> YYAction (-434);
  '.' -> YYAction (-434);
  '(' -> YYAction (-434);
  ',' -> YYAction (-209);
  '|' -> YYAction (-434);
  '[' -> YYAction (-434);
  '?' -> YYAction (-434);
  '!' -> YYAction (-434);
  '=' -> YYAction (-434);
  '_' -> YYAction (-434);
  _ ->   case yytoken t of {
    VARID -> YYAction (-434);
    CONID -> YYAction (-434);
    QUALIFIER -> YYAction (-434);
    TRUE -> YYAction (-434);
    FALSE -> YYAction (-434);
    DO -> YYAction (-434);
    INTCONST -> YYAction (-434);
    STRCONST -> YYAction (-434);
    LONGCONST -> YYAction (-434);
    FLTCONST -> YYAction (-434);
    DBLCONST -> YYAction (-434);
    CHRCONST -> YYAction (-434);
    REGEXP -> YYAction (-434);
    BIGCONST -> YYAction (-434);
    DCOLON -> YYAction (-209);
    SOMEOP -> YYAction (-434);
    _ -> (YYAction yyErr);
  };
};
private yyaction277 t =   case yychar t of {
  ')' -> YYAction 418;
  _ -> (YYAction yyErr);
};
private yyaction278 t =   case yychar t of {
  '-' -> YYAction (-433);
  '.' -> YYAction (-433);
  '(' -> YYAction (-433);
  ',' -> YYAction (-210);
  '|' -> YYAction (-433);
  '[' -> YYAction (-433);
  '?' -> YYAction (-433);
  '!' -> YYAction (-433);
  '=' -> YYAction (-433);
  '_' -> YYAction (-433);
  _ ->   case yytoken t of {
    VARID -> YYAction (-433);
    CONID -> YYAction (-433);
    QUALIFIER -> YYAction (-433);
    TRUE -> YYAction (-433);
    FALSE -> YYAction (-433);
    DO -> YYAction (-433);
    INTCONST -> YYAction (-433);
    STRCONST -> YYAction (-433);
    LONGCONST -> YYAction (-433);
    FLTCONST -> YYAction (-433);
    DBLCONST -> YYAction (-433);
    CHRCONST -> YYAction (-433);
    REGEXP -> YYAction (-433);
    BIGCONST -> YYAction (-433);
    DCOLON -> YYAction (-210);
    SOMEOP -> YYAction (-433);
    _ -> (YYAction yyErr);
  };
};
private yyaction279 t = YYAction (-432);
private yyaction280 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction281 t = YYAction (-441);
private yyaction282 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction283 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ')' -> YYAction (-195);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction284 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  ')' -> YYAction 423;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction285 t =   case yychar t of {
  ')' -> YYAction 424;
  _ -> (YYAction yyErr);
};
private yyaction286 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ')' -> YYAction (-462);
  ']' -> YYAction (-462);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    DOTDOT -> YYAction (-462);
    _ -> (YYAction yyErr);
  };
};
private yyaction287 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 269;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction288 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  ']' -> YYAction 428;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction289 t = YYAction (-443);
private yyaction290 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction291 t = YYAction (-386);
private yyaction292 t = YYAction (-385);
private yyaction293 t = YYAction (-408);
private yyaction294 t = YYAction (-31);
private yyaction295 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 431;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction296 t = YYAction (-429);
private yyaction297 t =   case yychar t of {
  '=' -> YYAction 433;
  '}' -> YYAction (-459);
  ',' -> YYAction (-459);
  _ -> (YYAction yyErr);
};
private yyaction298 t =   case yychar t of {
  '}' -> YYAction 434;
  _ -> (YYAction yyErr);
};
private yyaction299 t =   case yychar t of {
  ',' -> YYAction 435;
  '}' -> YYAction (-449);
  _ -> (YYAction yyErr);
};
private yyaction300 t = YYAction (-205);
private yyaction301 t =   case yytoken t of {
    VARID -> YYAction 436;
    _ -> (YYAction yyErr);
  };
private yyaction302 t = YYAction (-207);
private yyaction303 t = YYAction (-235);
private yyaction304 t = YYAction (-236);
private yyaction305 t =   case yychar t of {
  '-' -> YYAction (-242);
  ';' -> YYAction (-242);
  '}' -> YYAction (-242);
  ')' -> YYAction (-242);
  ',' -> YYAction (-242);
  '|' -> YYAction (-242);
  ']' -> YYAction (-242);
  '=' -> YYAction (-242);
  _ ->   case yytoken t of {
    ARROW -> YYAction 439;
    EARROW -> YYAction 440;
    DOCUMENTATION -> YYAction (-242);
    WHERE -> YYAction (-242);
    CLASS -> YYAction (-242);
    THEN -> YYAction (-242);
    ELSE -> YYAction (-242);
    OF -> YYAction (-242);
    THROWS -> YYAction (-242);
    DCOLON -> YYAction (-242);
    GETS -> YYAction (-242);
    DOTDOT -> YYAction (-242);
    SOMEOP -> YYAction (-242);
    _ -> (YYAction yyErr);
  };
};
private yyaction306 t = YYAction (-241);
private yyaction307 t = YYAction (-251);
private yyaction308 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  '-' -> YYAction (-320);
  ';' -> YYAction (-320);
  '}' -> YYAction (-320);
  ')' -> YYAction (-320);
  ',' -> YYAction (-320);
  '|' -> YYAction (-320);
  ']' -> YYAction (-320);
  '=' -> YYAction (-320);
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    DOCUMENTATION -> YYAction (-320);
    WHERE -> YYAction (-320);
    CLASS -> YYAction (-320);
    THEN -> YYAction (-320);
    ELSE -> YYAction (-320);
    OF -> YYAction (-320);
    THROWS -> YYAction (-320);
    ARROW -> YYAction (-320);
    DCOLON -> YYAction (-320);
    GETS -> YYAction (-320);
    EARROW -> YYAction (-320);
    DOTDOT -> YYAction (-320);
    SOMEOP -> YYAction (-320);
    _ -> (YYAction yyErr);
  };
};
private yyaction309 t = YYAction (-213);
private yyaction310 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 445;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    NATIVE -> YYAction 155;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 442;
    PROTECTED -> YYAction 443;
    PUBLIC -> YYAction 444;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction311 t =   case yychar t of {
  ',' -> YYAction (-371);
  '=' -> YYAction (-371);
  _ ->   case yytoken t of {
    GETS -> YYAction 414;
    ARROW -> YYAction (-371);
    _ -> (YYAction yyErr);
  };
};
private yyaction312 t =   case yychar t of {
  ',' -> YYAction 451;
  '=' -> YYAction (-373);
  _ ->   case yytoken t of {
    ARROW -> YYAction (-373);
    _ -> (YYAction yyErr);
  };
};
private yyaction313 t =   case yychar t of {
  '=' -> YYAction 453;
  _ ->   case yytoken t of {
    ARROW -> YYAction 452;
    _ -> (YYAction yyErr);
  };
};
private yyaction314 t = YYAction (-345);
private yyaction315 t = YYAction (-378);
private yyaction316 t =   case yychar t of {
  '-' -> YYAction 195;
  ';' -> YYAction (-394);
  '}' -> YYAction (-394);
  ')' -> YYAction (-394);
  ',' -> YYAction (-394);
  '|' -> YYAction (-394);
  ']' -> YYAction (-394);
  '=' -> YYAction (-394);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 194;
    WHERE -> YYAction (-394);
    THEN -> YYAction (-394);
    ELSE -> YYAction (-394);
    OF -> YYAction (-394);
    ARROW -> YYAction (-394);
    DCOLON -> YYAction (-394);
    GETS -> YYAction (-394);
    DOTDOT -> YYAction (-394);
    _ -> (YYAction yyErr);
  };
};
private yyaction317 t =   case yychar t of {
  '-' -> YYAction 195;
  ';' -> YYAction (-395);
  '}' -> YYAction (-395);
  ')' -> YYAction (-395);
  ',' -> YYAction (-395);
  '|' -> YYAction (-395);
  ']' -> YYAction (-395);
  '=' -> YYAction (-395);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 194;
    WHERE -> YYAction (-395);
    THEN -> YYAction (-395);
    ELSE -> YYAction (-395);
    OF -> YYAction (-395);
    ARROW -> YYAction (-395);
    DCOLON -> YYAction (-395);
    GETS -> YYAction (-395);
    DOTDOT -> YYAction (-395);
    _ -> (YYAction yyErr);
  };
};
private yyaction318 t = YYAction (-413);
private yyaction319 t =   case yytoken t of {
    VARID -> YYAction 455;
    _ -> (YYAction yyErr);
  };
private yyaction320 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction321 t = YYAction (-414);
private yyaction322 t = YYAction (-415);
private yyaction323 t =   case yychar t of {
  '?' -> YYAction 459;
  '=' -> YYAction 460;
  '}' -> YYAction (-457);
  ',' -> YYAction (-457);
  _ ->   case yytoken t of {
    GETS -> YYAction 458;
    _ -> (YYAction yyErr);
  };
};
private yyaction324 t =   case yychar t of {
  '}' -> YYAction 461;
  _ -> (YYAction yyErr);
};
private yyaction325 t =   case yychar t of {
  ',' -> YYAction 462;
  '}' -> YYAction (-452);
  _ -> (YYAction yyErr);
};
private yyaction326 t =   case yychar t of {
  '}' -> YYAction 463;
  _ -> (YYAction yyErr);
};
private yyaction327 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    QUALIFIER -> YYAction 464;
    _ -> (YYAction yyErr);
  };
};
private yyaction328 t =   case yychar t of {
  ')' -> YYAction 466;
  _ -> (YYAction yyErr);
};
private yyaction329 t = YYAction (-194);
private yyaction330 t =   case yychar t of {
  ',' -> YYAction 467;
  ')' -> YYAction (-181);
  _ -> (YYAction yyErr);
};
private yyaction331 t = YYAction (-193);
private yyaction332 t = YYAction (-21);
private yyaction333 t =   case yychar t of {
  '(' -> YYAction 211;
  ';' -> YYAction (-147);
  '}' -> YYAction (-147);
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    PUBLIC -> YYAction 210;
    _ -> (YYAction yyErr);
  };
};
private yyaction334 t = YYAction (-146);
private yyaction335 t = YYAction (-151);
private yyaction336 t =   case yychar t of {
  '(' -> YYAction 469;
  ')' -> YYAction (-188);
  ',' -> YYAction (-188);
  _ ->   case yytoken t of {
    VARID -> YYAction (-188);
    CONID -> YYAction (-188);
    SOMEOP -> YYAction (-188);
    _ -> (YYAction yyErr);
  };
};
private yyaction337 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    CONID -> YYAction 115;
    QUALIFIER -> YYAction 470;
    _ -> (YYAction yyErr);
  };
};
private yyaction338 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 336;
    QUALIFIER -> YYAction 337;
    PUBLIC -> YYAction 338;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction339 t = YYAction (-149);
private yyaction340 t =   case yychar t of {
  ')' -> YYAction 472;
  _ -> (YYAction yyErr);
};
private yyaction341 t =   case yychar t of {
  ',' -> YYAction 473;
  ')' -> YYAction (-152);
  _ -> (YYAction yyErr);
};
private yyaction342 t =   case yychar t of {
  ')' -> YYAction (-161);
  ',' -> YYAction (-161);
  _ ->   case yytoken t of {
    VARID -> YYAction 474;
    CONID -> YYAction 475;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction343 t = YYAction (-155);
private yyaction344 t = YYAction (-158);
private yyaction345 t = YYAction (-159);
private yyaction346 t = YYAction (-160);
private yyaction347 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 336;
    QUALIFIER -> YYAction 337;
    PUBLIC -> YYAction 338;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction348 t = YYAction (-46);
private yyaction349 t = YYAction (-245);
private yyaction350 t =   case yychar t of {
  ';' -> YYAction (-244);
  '}' -> YYAction (-244);
  ')' -> YYAction (-244);
  ',' -> YYAction (-244);
  '|' -> YYAction (-244);
  ']' -> YYAction (-244);
  _ ->   case yytoken t of {
    ARROW -> YYAction 479;
    WHERE -> YYAction (-244);
    CLASS -> YYAction (-244);
    _ -> (YYAction yyErr);
  };
};
private yyaction351 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction352 t =   case yytoken t of {
    WHERE -> YYAction 481;
    _ -> (YYAction yyErr);
  };
private yyaction353 t = YYAction (-211);
private yyaction354 t = YYAction (-209);
private yyaction355 t = YYAction (-210);
private yyaction356 t =   case yytoken t of {
    VARID -> YYAction 219;
    CONID -> YYAction 220;
    QUALIFIER -> YYAction 221;
    PACKAGE -> YYAction 222;
    STRCONST -> YYAction 223;
    _ -> (YYAction yyErr);
  };
private yyaction357 t = YYAction (-10);
private yyaction358 t =   case yytoken t of {
    VARID -> YYAction 219;
    CONID -> YYAction 220;
    QUALIFIER -> YYAction 221;
    PACKAGE -> YYAction 222;
    STRCONST -> YYAction 223;
    _ -> (YYAction yyErr);
  };
private yyaction359 t = YYAction (-295);
private yyaction360 t =   case yychar t of {
  ',' -> YYAction 485;
  ';' -> YYAction (-247);
  '}' -> YYAction (-247);
  ')' -> YYAction (-247);
  '|' -> YYAction (-247);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-247);
    _ -> (YYAction yyErr);
  };
};
private yyaction361 t =   case yychar t of {
  '}' -> YYAction 486;
  _ -> (YYAction yyErr);
};
private yyaction362 t = YYAction (-223);
private yyaction363 t =   case yychar t of {
  ';' -> YYAction (-228);
  '}' -> YYAction (-228);
  '|' -> YYAction (-228);
  _ ->   case yytoken t of {
    THROWS -> YYAction 487;
    _ -> (YYAction yyErr);
  };
};
private yyaction364 t =   case yychar t of {
  '|' -> YYAction 488;
  ';' -> YYAction (-229);
  '}' -> YYAction (-229);
  _ -> (YYAction yyErr);
};
private yyaction365 t = YYAction (-231);
private yyaction366 t =   case yytoken t of {
    DCOLON -> YYAction 489;
    _ -> (YYAction yyErr);
  };
private yyaction367 t =   case yychar t of {
  '{' -> YYAction 490;
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  ';' -> YYAction (-316);
  '}' -> YYAction (-316);
  '|' -> YYAction (-316);
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    DOCUMENTATION -> YYAction (-316);
    WHERE -> YYAction (-316);
    _ -> (YYAction yyErr);
  };
};
private yyaction368 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    PRIVATE -> YYAction 369;
    PROTECTED -> YYAction 370;
    PUBLIC -> YYAction 371;
    _ -> (YYAction yyErr);
  };
};
private yyaction369 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    _ -> (YYAction yyErr);
  };
};
private yyaction370 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    _ -> (YYAction yyErr);
  };
};
private yyaction371 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    _ -> (YYAction yyErr);
  };
};
private yyaction372 t =   case yytoken t of {
    CONID -> YYAction 367;
    _ -> (YYAction yyErr);
  };
private yyaction373 t =   case yytoken t of {
    CONID -> YYAction 367;
    _ -> (YYAction yyErr);
  };
private yyaction374 t = YYAction (-301);
private yyaction375 t =   case yychar t of {
  ';' -> YYAction (-306);
  '}' -> YYAction (-306);
  '|' -> YYAction (-306);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 499;
    WHERE -> YYAction (-306);
    _ -> (YYAction yyErr);
  };
};
private yyaction376 t = YYAction (-309);
private yyaction377 t = YYAction (-315);
private yyaction378 t = YYAction (-303);
private yyaction379 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    DOCUMENTATION -> YYAction 368;
    PRIVATE -> YYAction 369;
    PROTECTED -> YYAction 370;
    PUBLIC -> YYAction 371;
    _ -> (YYAction yyErr);
  };
};
private yyaction380 t = YYAction (-291);
private yyaction381 t =   case yytoken t of {
    NATIVE -> YYAction 501;
    _ -> (YYAction yyErr);
  };
private yyaction382 t =   case yytoken t of {
    NATIVE -> YYAction 502;
    _ -> (YYAction yyErr);
  };
private yyaction383 t =   case yytoken t of {
    VARID -> YYAction 219;
    CONID -> YYAction 220;
    QUALIFIER -> YYAction 221;
    PACKAGE -> YYAction 222;
    STRCONST -> YYAction 223;
    _ -> (YYAction yyErr);
  };
private yyaction384 t = YYAction (-299);
private yyaction385 t =   case yychar t of {
  '|' -> YYAction 505;
  ';' -> YYAction (-304);
  '}' -> YYAction (-304);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-304);
    _ -> (YYAction yyErr);
  };
};
private yyaction386 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    DOCUMENTATION -> YYAction 368;
    NATIVE -> YYAction 380;
    PRIVATE -> YYAction 369;
    PROTECTED -> YYAction 370;
    PUBLIC -> YYAction 371;
    PURE -> YYAction 381;
    MUTABLE -> YYAction 382;
    _ -> (YYAction yyErr);
  };
};
private yyaction387 t =   case yychar t of {
  ')' -> YYAction (-272);
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction388 t = YYAction (-275);
private yyaction389 t =   case yychar t of {
  '(' -> YYAction 233;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
};
private yyaction390 t =   case yychar t of {
  ')' -> YYAction (-280);
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction391 t = YYAction (-283);
private yyaction392 t =   case yychar t of {
  '(' -> YYAction (-258);
  ')' -> YYAction (-258);
  ',' -> YYAction (-258);
  '|' -> YYAction (-258);
  '[' -> YYAction (-258);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 489;
    VARID -> YYAction (-258);
    CONID -> YYAction (-258);
    QUALIFIER -> YYAction (-258);
    ARROW -> YYAction (-258);
    _ -> (YYAction yyErr);
  };
};
private yyaction393 t =   case yychar t of {
  ')' -> YYAction 511;
  _ -> (YYAction yyErr);
};
private yyaction394 t = YYAction (-262);
private yyaction395 t =   case yychar t of {
  ')' -> YYAction 512;
  ',' -> YYAction 513;
  '|' -> YYAction 514;
  _ -> (YYAction yyErr);
};
private yyaction396 t =   case yychar t of {
  ')' -> YYAction 515;
  _ -> (YYAction yyErr);
};
private yyaction397 t = YYAction (-261);
private yyaction398 t =   case yychar t of {
  ']' -> YYAction 516;
  _ -> (YYAction yyErr);
};
private yyaction399 t =   case yychar t of {
  ')' -> YYAction 394;
  ',' -> YYAction 163;
  _ ->   case yytoken t of {
    ARROW -> YYAction 393;
    _ -> (YYAction yyErr);
  };
};
private yyaction400 t =   case yychar t of {
  ']' -> YYAction 397;
  _ -> (YYAction yyErr);
};
private yyaction401 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction402 t = YYAction (-338);
private yyaction403 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction404 t = YYAction (-435);
private yyaction405 t = YYAction (-434);
private yyaction406 t = YYAction (-433);
private yyaction407 t = YYAction (-390);
private yyaction408 t =   case yychar t of {
  ';' -> YYAction 520;
  _ ->   case yytoken t of {
    ELSE -> YYAction 519;
    _ -> (YYAction yyErr);
  };
};
private yyaction409 t = YYAction (-388);
private yyaction410 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction411 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-142);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction412 t =   case yytoken t of {
    IN -> YYAction 527;
    _ -> (YYAction yyErr);
  };
private yyaction413 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction414 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction415 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction416 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-369);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 269;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction417 t = YYAction (-412);
private yyaction418 t = YYAction (-436);
private yyaction419 t =   case yychar t of {
  ';' -> YYAction 532;
  ')' -> YYAction (-463);
  _ -> (YYAction yyErr);
};
private yyaction420 t =   case yychar t of {
  ')' -> YYAction 533;
  _ -> (YYAction yyErr);
};
private yyaction421 t =   case yychar t of {
  ',' -> YYAction 286;
  ')' -> YYAction (-460);
  ']' -> YYAction (-460);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-460);
    _ -> (YYAction yyErr);
  };
};
private yyaction422 t =   case yychar t of {
  ')' -> YYAction 534;
  _ -> (YYAction yyErr);
};
private yyaction423 t = YYAction (-438);
private yyaction424 t = YYAction (-437);
private yyaction425 t = YYAction (-461);
private yyaction426 t =   case yychar t of {
  ',' -> YYAction 535;
  ']' -> YYAction (-365);
  _ -> (YYAction yyErr);
};
private yyaction427 t =   case yychar t of {
  ']' -> YYAction 536;
  _ -> (YYAction yyErr);
};
private yyaction428 t = YYAction (-444);
private yyaction429 t =   case yychar t of {
  ']' -> YYAction 537;
  _ -> (YYAction yyErr);
};
private yyaction430 t = YYAction (-387);
private yyaction431 t = YYAction (-343);
private yyaction432 t =   case yychar t of {
  '}' -> YYAction 538;
  _ -> (YYAction yyErr);
};
private yyaction433 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction434 t = YYAction (-430);
private yyaction435 t =   case yychar t of {
  '}' -> YYAction (-451);
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction436 t = YYAction (-234);
private yyaction437 t =   case yychar t of {
  '.' -> YYAction 542;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 541;
    _ -> (YYAction yyErr);
  };
};
private yyaction438 t =   case yychar t of {
  '.' -> YYAction (-232);
  _ ->   case yytoken t of {
    VARID -> YYAction 436;
    SOMEOP -> YYAction (-232);
    _ -> (YYAction yyErr);
  };
};
private yyaction439 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction440 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction441 t = YYAction (-321);
private yyaction442 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 155;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction443 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 155;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction444 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 155;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction445 t = YYAction (-341);
private yyaction446 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ';' -> YYAction (-136);
  '}' -> YYAction (-136);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    NATIVE -> YYAction 155;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 442;
    PROTECTED -> YYAction 443;
    PUBLIC -> YYAction 444;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction447 t = YYAction (-132);
private yyaction448 t =   case yychar t of {
  '}' -> YYAction 552;
  _ -> (YYAction yyErr);
};
private yyaction449 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-126);
  _ -> (YYAction yyErr);
};
private yyaction450 t = YYAction (-138);
private yyaction451 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '=' -> YYAction (-375);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    ARROW -> YYAction (-375);
    _ -> (YYAction yyErr);
  };
};
private yyaction452 t = YYAction (-360);
private yyaction453 t = YYAction (-361);
private yyaction454 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction455 t =   case yychar t of {
  '?' -> YYAction 557;
  '=' -> YYAction 558;
  '}' -> YYAction (-457);
  ',' -> YYAction (-457);
  _ ->   case yytoken t of {
    GETS -> YYAction 556;
    _ -> (YYAction yyErr);
  };
};
private yyaction456 t =   case yychar t of {
  '}' -> YYAction 559;
  _ -> (YYAction yyErr);
};
private yyaction457 t =   case yychar t of {
  ']' -> YYAction 560;
  _ -> (YYAction yyErr);
};
private yyaction458 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 561;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction459 t =   case yychar t of {
  '}' -> YYAction 563;
  _ -> (YYAction yyErr);
};
private yyaction460 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 564;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction461 t = YYAction (-419);
private yyaction462 t =   case yychar t of {
  '}' -> YYAction (-454);
  _ ->   case yytoken t of {
    VARID -> YYAction 566;
    _ -> (YYAction yyErr);
  };
};
private yyaction463 t = YYAction (-2);
private yyaction464 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    _ -> (YYAction yyErr);
  };
};
private yyaction465 t = YYAction (-192);
private yyaction466 t = YYAction (-23);
private yyaction467 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    QUALIFIER -> YYAction 327;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction468 t = YYAction (-145);
private yyaction469 t =   case yychar t of {
  ')' -> YYAction 571;
  _ ->   case yytoken t of {
    VARID -> YYAction 474;
    CONID -> YYAction 475;
    PUBLIC -> YYAction 570;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction470 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  _ ->   case yytoken t of {
    VARID -> YYAction 114;
    CONID -> YYAction 206;
    _ -> (YYAction yyErr);
  };
};
private yyaction471 t = YYAction (-163);
private yyaction472 t = YYAction (-150);
private yyaction473 t =   case yychar t of {
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  ')' -> YYAction (-153);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 336;
    QUALIFIER -> YYAction 337;
    PUBLIC -> YYAction 338;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction474 t = YYAction (-170);
private yyaction475 t = YYAction (-171);
private yyaction476 t = YYAction (-172);
private yyaction477 t = YYAction (-162);
private yyaction478 t =   case yychar t of {
  ')' -> YYAction 576;
  _ -> (YYAction yyErr);
};
private yyaction479 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction480 t = YYAction (-48);
private yyaction481 t =   case yychar t of {
  '{' -> YYAction 578;
  _ -> (YYAction yyErr);
};
private yyaction482 t = YYAction (-44);
private yyaction483 t = YYAction (-8);
private yyaction484 t = YYAction (-9);
private yyaction485 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction486 t = YYAction (-294);
private yyaction487 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction488 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction489 t =   case yychar t of {
  '(' -> YYAction 584;
  _ ->   case yytoken t of {
    VARID -> YYAction 582;
    SOMEOP -> YYAction 583;
    _ -> (YYAction yyErr);
  };
};
private yyaction490 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 587;
    PUBLIC -> YYAction 588;
    _ -> (YYAction yyErr);
  };
};
private yyaction491 t = YYAction (-319);
private yyaction492 t = YYAction (-318);
private yyaction493 t = YYAction (-308);
private yyaction494 t = YYAction (-311);
private yyaction495 t = YYAction (-312);
private yyaction496 t = YYAction (-310);
private yyaction497 t = YYAction (-314);
private yyaction498 t = YYAction (-313);
private yyaction499 t = YYAction (-307);
private yyaction500 t = YYAction (-300);
private yyaction501 t = YYAction (-289);
private yyaction502 t = YYAction (-290);
private yyaction503 t =   case yychar t of {
  '{' -> YYAction 224;
  ';' -> YYAction (-292);
  '}' -> YYAction (-292);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-292);
    _ -> (YYAction yyErr);
  };
};
private yyaction504 t = YYAction (-296);
private yyaction505 t =   case yychar t of {
  '?' -> YYAction 372;
  '!' -> YYAction 373;
  _ ->   case yytoken t of {
    CONID -> YYAction 367;
    DOCUMENTATION -> YYAction 368;
    PRIVATE -> YYAction 369;
    PROTECTED -> YYAction 370;
    PUBLIC -> YYAction 371;
    _ -> (YYAction yyErr);
  };
};
private yyaction506 t =   case yytoken t of {
    VARID -> YYAction 219;
    CONID -> YYAction 220;
    QUALIFIER -> YYAction 221;
    PACKAGE -> YYAction 222;
    STRCONST -> YYAction 223;
    _ -> (YYAction yyErr);
  };
private yyaction507 t = YYAction (-298);
private yyaction508 t = YYAction (-273);
private yyaction509 t =   case yychar t of {
  ';' -> YYAction (-340);
  '}' -> YYAction (-340);
  _ ->   case yytoken t of {
    WHERE -> YYAction 188;
    _ -> (YYAction yyErr);
  };
};
private yyaction510 t = YYAction (-281);
private yyaction511 t = YYAction (-264);
private yyaction512 t = YYAction (-254);
private yyaction513 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction514 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction515 t = YYAction (-263);
private yyaction516 t = YYAction (-257);
private yyaction517 t = YYAction (-284);
private yyaction518 t = YYAction (-339);
private yyaction519 t = YYAction (-393);
private yyaction520 t =   case yytoken t of {
    ELSE -> YYAction 606;
    _ -> (YYAction yyErr);
  };
private yyaction521 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction522 t = YYAction (-359);
private yyaction523 t =   case yychar t of {
  '|' -> YYAction 190;
  '=' -> YYAction 453;
  _ ->   case yytoken t of {
    ARROW -> YYAction 452;
    _ -> (YYAction yyErr);
  };
};
private yyaction524 t =   case yychar t of {
  ';' -> YYAction 610;
  '}' -> YYAction (-382);
  _ ->   case yytoken t of {
    WHERE -> YYAction 177;
    _ -> (YYAction yyErr);
  };
};
private yyaction525 t =   case yychar t of {
  '}' -> YYAction 612;
  _ -> (YYAction yyErr);
};
private yyaction526 t = YYAction (-143);
private yyaction527 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction528 t =   case yychar t of {
  '}' -> YYAction 614;
  _ -> (YYAction yyErr);
};
private yyaction529 t = YYAction (-372);
private yyaction530 t = YYAction (-363);
private yyaction531 t = YYAction (-370);
private yyaction532 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ')' -> YYAction (-465);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction533 t = YYAction (-440);
private yyaction534 t = YYAction (-439);
private yyaction535 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  ']' -> YYAction (-367);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 269;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction536 t = YYAction (-446);
private yyaction537 t = YYAction (-445);
private yyaction538 t = YYAction (-344);
private yyaction539 t = YYAction (-458);
private yyaction540 t = YYAction (-450);
private yyaction541 t = YYAction (-239);
private yyaction542 t = YYAction (-238);
private yyaction543 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    _ -> (YYAction yyErr);
  };
};
private yyaction544 t = YYAction (-233);
private yyaction545 t =   case yychar t of {
  '-' -> YYAction (-242);
  ';' -> YYAction (-242);
  '}' -> YYAction (-242);
  ')' -> YYAction (-242);
  ',' -> YYAction (-242);
  '|' -> YYAction (-242);
  ']' -> YYAction (-242);
  '=' -> YYAction (-242);
  _ ->   case yytoken t of {
    ARROW -> YYAction 439;
    DOCUMENTATION -> YYAction (-242);
    WHERE -> YYAction (-242);
    CLASS -> YYAction (-242);
    THEN -> YYAction (-242);
    ELSE -> YYAction (-242);
    OF -> YYAction (-242);
    THROWS -> YYAction (-242);
    DCOLON -> YYAction (-242);
    GETS -> YYAction (-242);
    DOTDOT -> YYAction (-242);
    SOMEOP -> YYAction (-242);
    _ -> (YYAction yyErr);
  };
};
private yyaction546 t = YYAction (-243);
private yyaction547 t = YYAction (-240);
private yyaction548 t = YYAction (-133);
private yyaction549 t = YYAction (-134);
private yyaction550 t = YYAction (-135);
private yyaction551 t = YYAction (-137);
private yyaction552 t = YYAction (-342);
private yyaction553 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 59;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-127);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 27;
    NATIVE -> YYAction 155;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    PRIVATE -> YYAction 442;
    PROTECTED -> YYAction 443;
    PUBLIC -> YYAction 444;
    PURE -> YYAction 49;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction554 t = YYAction (-374);
private yyaction555 t = YYAction (-376);
private yyaction556 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 619;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction557 t =   case yychar t of {
  '}' -> YYAction 620;
  _ -> (YYAction yyErr);
};
private yyaction558 t =   case yychar t of {
  '-' -> YYAction 58;
  '}' -> YYAction 621;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction559 t = YYAction (-423);
private yyaction560 t = YYAction (-424);
private yyaction561 t = YYAction (-418);
private yyaction562 t = YYAction (-455);
private yyaction563 t = YYAction (-416);
private yyaction564 t = YYAction (-417);
private yyaction565 t = YYAction (-456);
private yyaction566 t =   case yychar t of {
  '=' -> YYAction 623;
  '}' -> YYAction (-457);
  ',' -> YYAction (-457);
  _ ->   case yytoken t of {
    GETS -> YYAction 622;
    _ -> (YYAction yyErr);
  };
};
private yyaction567 t = YYAction (-453);
private yyaction568 t = YYAction (-191);
private yyaction569 t = YYAction (-182);
private yyaction570 t =   case yytoken t of {
    VARID -> YYAction 474;
    CONID -> YYAction 475;
    PUBLIC -> YYAction 570;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
private yyaction571 t = YYAction (-157);
private yyaction572 t =   case yychar t of {
  ')' -> YYAction 625;
  _ -> (YYAction yyErr);
};
private yyaction573 t =   case yychar t of {
  ')' -> YYAction (-164);
  ',' -> YYAction (-164);
  _ ->   case yytoken t of {
    VARID -> YYAction 474;
    CONID -> YYAction 475;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction574 t =   case yychar t of {
  ',' -> YYAction 627;
  ')' -> YYAction (-167);
  _ -> (YYAction yyErr);
};
private yyaction575 t = YYAction (-154);
private yyaction576 t = YYAction (-148);
private yyaction577 t = YYAction (-246);
private yyaction578 t =   case yychar t of {
  '-' -> YYAction 677;
  ';' -> YYAction 678;
  '{' -> YYAction 679;
  '}' -> YYAction 680;
  '.' -> YYAction 681;
  '(' -> YYAction 682;
  ')' -> YYAction 683;
  ',' -> YYAction 684;
  '|' -> YYAction 685;
  '[' -> YYAction 686;
  ']' -> YYAction 687;
  '?' -> YYAction 688;
  '!' -> YYAction 689;
  '=' -> YYAction 690;
  '\\' -> YYAction 691;
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QVARID -> YYAction 630;
    QCONID -> YYAction 631;
    QUALIFIER -> YYAction 632;
    DOCUMENTATION -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    INTERPRET -> YYAction 676;
    _ -> (YYAction yyErr);
  };
};
private yyaction579 t = YYAction (-248);
private yyaction580 t = YYAction (-227);
private yyaction581 t = YYAction (-230);
private yyaction582 t = YYAction (-268);
private yyaction583 t = YYAction (-267);
private yyaction584 t =   case yychar t of {
  '(' -> YYAction 584;
  _ ->   case yytoken t of {
    VARID -> YYAction 582;
    SOMEOP -> YYAction 583;
    _ -> (YYAction yyErr);
  };
};
private yyaction585 t =   case yychar t of {
  ')' -> YYAction 695;
  _ -> (YYAction yyErr);
};
private yyaction586 t =   case yychar t of {
  ')' -> YYAction (-266);
  _ ->   case yytoken t of {
    ARROW -> YYAction 696;
    _ -> (YYAction yyErr);
  };
};
private yyaction587 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction588 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
};
private yyaction589 t =   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
private yyaction590 t =   case yytoken t of {
    VARID -> YYAction 123;
    _ -> (YYAction yyErr);
  };
private yyaction591 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    PRIVATE -> YYAction 587;
    PUBLIC -> YYAction 588;
    _ -> (YYAction yyErr);
  };
};
private yyaction592 t = YYAction (-337);
private yyaction593 t =   case yychar t of {
  '}' -> YYAction 702;
  _ -> (YYAction yyErr);
};
private yyaction594 t =   case yychar t of {
  ',' -> YYAction 704;
  '}' -> YYAction (-322);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 703;
    _ -> (YYAction yyErr);
  };
};
private yyaction595 t =   case yytoken t of {
    DCOLON -> YYAction 705;
    _ -> (YYAction yyErr);
  };
private yyaction596 t =   case yychar t of {
  ',' -> YYAction 706;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-329);
    _ -> (YYAction yyErr);
  };
};
private yyaction597 t = YYAction (-331);
private yyaction598 t = YYAction (-334);
private yyaction599 t = YYAction (-293);
private yyaction600 t = YYAction (-305);
private yyaction601 t = YYAction (-297);
private yyaction602 t = YYAction (-276);
private yyaction603 t =   case yychar t of {
  ')' -> YYAction 707;
  _ -> (YYAction yyErr);
};
private yyaction604 t =   case yychar t of {
  '|' -> YYAction 708;
  ')' -> YYAction (-249);
  _ -> (YYAction yyErr);
};
private yyaction605 t =   case yychar t of {
  ')' -> YYAction 709;
  _ -> (YYAction yyErr);
};
private yyaction606 t = YYAction (-392);
private yyaction607 t = YYAction (-398);
private yyaction608 t = YYAction (-380);
private yyaction609 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction610 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  '}' -> YYAction (-384);
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction611 t = YYAction (-381);
private yyaction612 t = YYAction (-399);
private yyaction613 t = YYAction (-400);
private yyaction614 t =   case yychar t of {
  ';' -> YYAction (-364);
  '}' -> YYAction (-364);
  ',' -> YYAction (-364);
  ']' -> YYAction (-364);
  _ ->   case yytoken t of {
    IN -> YYAction 527;
    _ -> (YYAction yyErr);
  };
};
private yyaction615 t = YYAction (-464);
private yyaction616 t = YYAction (-366);
private yyaction617 t = YYAction (-237);
private yyaction618 t = YYAction (-128);
private yyaction619 t = YYAction (-422);
private yyaction620 t = YYAction (-420);
private yyaction621 t = YYAction (-421);
private yyaction622 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction623 t =   case yychar t of {
  '-' -> YYAction 58;
  '(' -> YYAction 148;
  '[' -> YYAction 60;
  '?' -> YYAction 61;
  '!' -> YYAction 62;
  '\\' -> YYAction 63;
  '_' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 147;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 39;
    FALSE -> YYAction 40;
    IF -> YYAction 41;
    CASE -> YYAction 42;
    LET -> YYAction 44;
    DO -> YYAction 45;
    INTCONST -> YYAction 50;
    STRCONST -> YYAction 51;
    LONGCONST -> YYAction 52;
    FLTCONST -> YYAction 53;
    DBLCONST -> YYAction 54;
    CHRCONST -> YYAction 55;
    REGEXP -> YYAction 56;
    BIGCONST -> YYAction 57;
    _ -> (YYAction yyErr);
  };
};
private yyaction624 t = YYAction (-166);
private yyaction625 t = YYAction (-156);
private yyaction626 t = YYAction (-165);
private yyaction627 t =   case yychar t of {
  ')' -> YYAction (-168);
  _ ->   case yytoken t of {
    VARID -> YYAction 474;
    CONID -> YYAction 475;
    PUBLIC -> YYAction 570;
    SOMEOP -> YYAction 125;
    _ -> (YYAction yyErr);
  };
};
private yyaction628 t = YYAction (-51);
private yyaction629 t = YYAction (-52);
private yyaction630 t = YYAction (-53);
private yyaction631 t = YYAction (-54);
private yyaction632 t = YYAction (-55);
private yyaction633 t = YYAction (-56);
private yyaction634 t = YYAction (-57);
private yyaction635 t = YYAction (-58);
private yyaction636 t = YYAction (-59);
private yyaction637 t = YYAction (-60);
private yyaction638 t = YYAction (-61);
private yyaction639 t = YYAction (-62);
private yyaction640 t = YYAction (-63);
private yyaction641 t = YYAction (-64);
private yyaction642 t = YYAction (-65);
private yyaction643 t = YYAction (-66);
private yyaction644 t = YYAction (-67);
private yyaction645 t = YYAction (-68);
private yyaction646 t = YYAction (-69);
private yyaction647 t = YYAction (-70);
private yyaction648 t = YYAction (-71);
private yyaction649 t = YYAction (-72);
private yyaction650 t = YYAction (-73);
private yyaction651 t = YYAction (-74);
private yyaction652 t = YYAction (-75);
private yyaction653 t = YYAction (-76);
private yyaction654 t = YYAction (-77);
private yyaction655 t = YYAction (-78);
private yyaction656 t = YYAction (-79);
private yyaction657 t = YYAction (-80);
private yyaction658 t = YYAction (-81);
private yyaction659 t = YYAction (-82);
private yyaction660 t = YYAction (-83);
private yyaction661 t = YYAction (-84);
private yyaction662 t = YYAction (-85);
private yyaction663 t = YYAction (-86);
private yyaction664 t = YYAction (-87);
private yyaction665 t = YYAction (-88);
private yyaction666 t = YYAction (-89);
private yyaction667 t = YYAction (-90);
private yyaction668 t = YYAction (-91);
private yyaction669 t = YYAction (-92);
private yyaction670 t = YYAction (-93);
private yyaction671 t = YYAction (-94);
private yyaction672 t = YYAction (-95);
private yyaction673 t = YYAction (-96);
private yyaction674 t = YYAction (-97);
private yyaction675 t = YYAction (-98);
private yyaction676 t = YYAction (-99);
private yyaction677 t = YYAction (-108);
private yyaction678 t = YYAction (-109);
private yyaction679 t =   case yychar t of {
  '-' -> YYAction 677;
  ';' -> YYAction 678;
  '{' -> YYAction 679;
  '}' -> YYAction 713;
  '.' -> YYAction 681;
  '(' -> YYAction 682;
  ')' -> YYAction 683;
  ',' -> YYAction 684;
  '|' -> YYAction 685;
  '[' -> YYAction 686;
  ']' -> YYAction 687;
  '?' -> YYAction 688;
  '!' -> YYAction 689;
  '=' -> YYAction 690;
  '\\' -> YYAction 691;
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QVARID -> YYAction 630;
    QCONID -> YYAction 631;
    QUALIFIER -> YYAction 632;
    DOCUMENTATION -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    INTERPRET -> YYAction 676;
    _ -> (YYAction yyErr);
  };
};
private yyaction680 t = YYAction (-50);
private yyaction681 t = YYAction (-106);
private yyaction682 t = YYAction (-104);
private yyaction683 t = YYAction (-105);
private yyaction684 t = YYAction (-100);
private yyaction685 t = YYAction (-101);
private yyaction686 t = YYAction (-102);
private yyaction687 t = YYAction (-103);
private yyaction688 t = YYAction (-107);
private yyaction689 t = YYAction (-110);
private yyaction690 t = YYAction (-111);
private yyaction691 t = YYAction (-112);
private yyaction692 t =   case yychar t of {
  '}' -> YYAction 715;
  _ -> (YYAction yyErr);
};
private yyaction693 t =   case yychar t of {
  '-' -> YYAction 677;
  ';' -> YYAction 678;
  '{' -> YYAction 679;
  '.' -> YYAction 681;
  '(' -> YYAction 682;
  ')' -> YYAction 683;
  ',' -> YYAction 684;
  '|' -> YYAction 685;
  '[' -> YYAction 686;
  ']' -> YYAction 687;
  '?' -> YYAction 688;
  '!' -> YYAction 689;
  '=' -> YYAction 690;
  '\\' -> YYAction 691;
  '}' -> YYAction (-113);
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QVARID -> YYAction 630;
    QCONID -> YYAction 631;
    QUALIFIER -> YYAction 632;
    DOCUMENTATION -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    INTERPRET -> YYAction 676;
    _ -> (YYAction yyErr);
  };
};
private yyaction694 t =   case yychar t of {
  ')' -> YYAction 717;
  _ -> (YYAction yyErr);
};
private yyaction695 t = YYAction (-259);
private yyaction696 t =   case yychar t of {
  '(' -> YYAction 584;
  _ ->   case yytoken t of {
    VARID -> YYAction 582;
    SOMEOP -> YYAction 583;
    _ -> (YYAction yyErr);
  };
};
private yyaction697 t = YYAction (-333);
private yyaction698 t = YYAction (-332);
private yyaction699 t = YYAction (-336);
private yyaction700 t = YYAction (-335);
private yyaction701 t =   case yytoken t of {
    DCOLON -> YYAction 719;
    _ -> (YYAction yyErr);
  };
private yyaction702 t = YYAction (-317);
private yyaction703 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  '}' -> YYAction (-324);
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 587;
    PUBLIC -> YYAction 588;
    _ -> (YYAction yyErr);
  };
};
private yyaction704 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  '}' -> YYAction (-323);
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 587;
    PUBLIC -> YYAction 588;
    _ -> (YYAction yyErr);
  };
};
private yyaction705 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction706 t =   case yychar t of {
  '?' -> YYAction 589;
  '!' -> YYAction 590;
  _ ->   case yytoken t of {
    VARID -> YYAction 123;
    PRIVATE -> YYAction 587;
    PUBLIC -> YYAction 588;
    _ -> (YYAction yyErr);
  };
};
private yyaction707 t = YYAction (-255);
private yyaction708 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction709 t = YYAction (-256);
private yyaction710 t = YYAction (-379);
private yyaction711 t = YYAction (-383);
private yyaction712 t = YYAction (-169);
private yyaction713 t =   case yychar t of {
  '-' -> YYAction 677;
  ';' -> YYAction 678;
  '{' -> YYAction 679;
  '.' -> YYAction 681;
  '(' -> YYAction 682;
  ')' -> YYAction 683;
  ',' -> YYAction 684;
  '|' -> YYAction 685;
  '[' -> YYAction 686;
  ']' -> YYAction 687;
  '?' -> YYAction 688;
  '!' -> YYAction 689;
  '=' -> YYAction 690;
  '\\' -> YYAction 691;
  '}' -> YYAction (-117);
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QVARID -> YYAction 630;
    QCONID -> YYAction 631;
    QUALIFIER -> YYAction 632;
    DOCUMENTATION -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    INTERPRET -> YYAction 676;
    _ -> (YYAction yyErr);
  };
};
private yyaction714 t =   case yychar t of {
  '}' -> YYAction 726;
  _ -> (YYAction yyErr);
};
private yyaction715 t = YYAction (-49);
private yyaction716 t = YYAction (-114);
private yyaction717 t = YYAction (-269);
private yyaction718 t = YYAction (-265);
private yyaction719 t =   case yychar t of {
  '(' -> YYAction 247;
  '[' -> YYAction 248;
  _ ->   case yytoken t of {
    VARID -> YYAction 232;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 135;
    FORALL -> YYAction 301;
    _ -> (YYAction yyErr);
  };
};
private yyaction720 t = YYAction (-326);
private yyaction721 t = YYAction (-325);
private yyaction722 t = YYAction (-327);
private yyaction723 t = YYAction (-330);
private yyaction724 t = YYAction (-250);
private yyaction725 t = YYAction (-118);
private yyaction726 t =   case yychar t of {
  '-' -> YYAction 677;
  ';' -> YYAction 678;
  '{' -> YYAction 679;
  '.' -> YYAction 681;
  '(' -> YYAction 682;
  ')' -> YYAction 683;
  ',' -> YYAction 684;
  '|' -> YYAction 685;
  '[' -> YYAction 686;
  ']' -> YYAction 687;
  '?' -> YYAction 688;
  '!' -> YYAction 689;
  '=' -> YYAction 690;
  '\\' -> YYAction 691;
  '}' -> YYAction (-115);
  _ ->   case yytoken t of {
    VARID -> YYAction 628;
    CONID -> YYAction 629;
    QVARID -> YYAction 630;
    QCONID -> YYAction 631;
    QUALIFIER -> YYAction 632;
    DOCUMENTATION -> YYAction 633;
    PACKAGE -> YYAction 634;
    IMPORT -> YYAction 635;
    INFIX -> YYAction 636;
    INFIXR -> YYAction 637;
    INFIXL -> YYAction 638;
    NATIVE -> YYAction 639;
    DATA -> YYAction 640;
    WHERE -> YYAction 641;
    CLASS -> YYAction 642;
    INSTANCE -> YYAction 643;
    ABSTRACT -> YYAction 644;
    TYPE -> YYAction 645;
    TRUE -> YYAction 646;
    FALSE -> YYAction 647;
    IF -> YYAction 648;
    THEN -> YYAction 649;
    ELSE -> YYAction 650;
    CASE -> YYAction 651;
    OF -> YYAction 652;
    DERIVE -> YYAction 653;
    LET -> YYAction 654;
    IN -> YYAction 655;
    DO -> YYAction 656;
    FORALL -> YYAction 657;
    PRIVATE -> YYAction 658;
    PROTECTED -> YYAction 659;
    PUBLIC -> YYAction 660;
    PURE -> YYAction 661;
    THROWS -> YYAction 662;
    MUTABLE -> YYAction 663;
    INTCONST -> YYAction 664;
    STRCONST -> YYAction 665;
    LONGCONST -> YYAction 666;
    FLTCONST -> YYAction 667;
    DBLCONST -> YYAction 668;
    CHRCONST -> YYAction 669;
    ARROW -> YYAction 670;
    DCOLON -> YYAction 671;
    GETS -> YYAction 672;
    EARROW -> YYAction 673;
    DOTDOT -> YYAction 674;
    SOMEOP -> YYAction 675;
    INTERPRET -> YYAction 676;
    _ -> (YYAction yyErr);
  };
};
private yyaction727 t = YYAction (-328);
private yyaction728 t = YYAction (-116);
private reduce1 =  \(a,d,p)\w\b     -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce2 =  \(a,d,p)\w\_\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.pure $ Program.Module (a,b,d) }
;
private reduce3 =  \p\d\_ -> do {
                                                    changeST Global.{sub <- SubSt.{thisPos = yyline p}};
                                                    YYM.pure $ Program.Module ("Main", d, Nothing); }
;
private reduce4 =  \r -> do { g <- getST; pure (substRuntime g r) }
;
private reduce5 =  \t -> Token.value t 
;
private reduce6 =  \t -> Token.value t 
;
private reduce7 =  \t -> Token.value t 
;
private reduce8 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce9 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce10 =  \a\c   -> Token.value a ++ "." ++ c 
;
private reduce11 =  \x -> let s = Token.value x; i = length s - 1 in substr s 1 i 
;
private reduce12 =  \t     -> do {
                                                changeST Global.{sub <- SubSt.{
                                                    idKind <- insert (KeyTk t) (Left())}};
                                                YYM.pure (Token.value t, yyline t) }
;
private reduce13 =  \a\_\(c,p) -> (repljavakws (Token.value a) ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce14 =  \a\(c,p)   -> (Token.value a ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce15 =  \(nm, pos) -> (magicPack nm, pos) 
;
private reduce16 =  Token.value 
;
private reduce17 =  \b\a   -> (Token.value b ++ "\n" ++ a) 
;
private reduce18 =  \b\_\a -> (Token.value b ++ "\n" ++ a) 
;
private reduce19 =  \docu\p\b   -> (fst b, Just docu, snd b) 
;
private reduce20 =  \p\b        -> (fst b, Nothing, snd b) 
;
private reduce21 =  \docu\p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, Just docu, snd b) }
;
private reduce22 =  \p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.pure (fst b, Nothing, snd b) }
;
private reduce23 =  \p\vs\v\qs\_ -> do {
                                                     g <- getST;
                                                     let {clause = unwords vs};
                                                     let {expected = ["inline" , "inline candidates"]};
                                                     when (clause `notElem` expected) do {
                                                        yyerror (yyline v) (show (head expected) ++ " expected instead of " ++ show clause)
                                                     };
                                                     changeST Global.{sub <- SubSt.{
                                                            toExport = qs}};
                                                     YYM.pure p;}
                                                 
;
private reduce24 =  Token.value 
;
private reduce25 =  single 
;
private reduce26 =  (:) 
;
private reduce27 =  const 1 
;
private reduce28 =  \_\n -> 1+n
;
private reduce30 =  const 
;
private reduce31 =  \a\_\b -> a ++ b 
;
private reduce32 =  single 
;
private reduce33 =  (:) 
;
private reduce36 =  \_\ds -> map (updVis Private) ds 
;
private reduce37 =  \_\ds -> map (updVis Protected) ds 
;
private reduce38 =  \_\ds -> map (updVis Public) ds 
;
private reduce39 =  \_\(d::Def) -> [d.{ctrs <- map updCtr}] 
;
private reduce40 =  single 
;
private reduce41 =  single 
;
private reduce42 =  single 
;
private reduce44 =  \_\m\t\i\js -> ModDcl {pos = yyline m, extends=t, implements=i, code=js }
;
private reduce45 =  Nothing 
;
private reduce46 =  \a\b -> Just b 
;
private reduce47 =  [] 
;
private reduce48 =  \_\taus -> taus 
;
private reduce49 =  \_\_\c\_ -> c  
;
private reduce50 =  \_\_\_   -> [] 
;
private reduce113 =  single 
;
private reduce114 =  (:) 
;
private reduce115 =  \a\b\c -> a:(b++[c]) 
;
private reduce116 =  \a\b\c\d -> (a:b)++(c:d) 
;
private reduce117 =  \a\b -> [a,b] 
;
private reduce118 =  \a\b\cs -> a:b:cs 
;
private reduce119 =  \t -> DocDcl {pos = yyline t, text = t.value}
;
private reduce120 =  single 
;
private reduce121 =  single 
;
private reduce122 =  single 
;
private reduce123 =  single 
;
private reduce124 =  single 
;
private reduce127 =  const 
;
private reduce128 =  \d\_\ds -> d ++ ds 
;
private reduce130 =  single 
;
private reduce133 =  \_\ds -> map (updVis Private) ds 
;
private reduce134 =  \_\ds -> map (updVis Protected) ds 
;
private reduce135 =  \_\ds -> map (updVis Public) ds 
;
private reduce136 =  single 
;
private reduce137 =  (:) 
;
private reduce142 =  const 
;
private reduce143 =  \ds1\_\ds2 -> ds1 ++ ds2 
;
private reduce144 =  \i\b\c -> ImpDcl {pos=snd b, pack=fst b, imports=c, as=Nothing} 
;
private reduce145 =  \i\p\a\c\l -> do
            when (Token.value a != "as") do
                yyerror (yyline a) (show "as" ++ " expected instead of " ++ show (Token.value a))
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce146 =  \i\p\c\l -> do
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.pure ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce147 =  linkAll 
;
private reduce148 =  \v\_\is\_ -> do
            when ( v.value `notElem` [ "except", "excluding", "without", "auÃer", "ohne", "hiding" ]) do
                yyerror (yyline v) (show "hiding" ++ " expected instead of " ++ show v.value)
            YYM.pure linkAll.{items=is}
        
;
private reduce149 =  \_\_    -> linkNone 
;
private reduce150 =  \_\is\_ -> linkNone.{items = is}  
;
private reduce151 =  \_\il   -> ImportList.{publik = true} il 
;
private reduce152 =  single 
;
private reduce153 =  \s\_ -> [s] 
;
private reduce154 =  liste  
;
private reduce155 =  \v        -> protoItem.{ name = v } 
;
private reduce156 =  \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} 
;
private reduce157 =  \v\_\_    -> protoItem.{ name = Simple v, members = Just []} 
;
private reduce158 =  \v        -> protoItem.{ name = v } 
;
private reduce159 =  \t        -> protoItem.{ name = opSname t } 
;
private reduce160 =  \v        -> protoItem.{ name = Simple v} 
;
private reduce161 =  \s      -> ImportItem.{alias = (enclosed . Token.value . SName.id . ImportItem.name) s} s
;
private reduce162 =  \s\a    -> ImportItem.{alias = enclosed (Token.value a)} s 
;
private reduce163 =  \_\s    -> ImportItem.export s 
;
private reduce164 =  \v     -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value v)} 
;
private reduce165 =  \v\a   -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value a)} 
;
private reduce166 =  \_\s   -> ImportItem.export s 
;
private reduce167 =  single 
;
private reduce168 =  \s\_ -> [s] 
;
private reduce169 =  liste  
;
private reduce172 =  \v -> do { op <- unqualified v; pure op }
;
private reduce175 =  Token.{tokid = VARID} 
;
private reduce176 =  Token.{tokid = VARID} 
;
private reduce177 =  Token.{tokid = VARID} 
;
private reduce178 =  Token.{tokid = VARID} 
;
private reduce179 =  Token.{tokid = VARID} 
;
private reduce180 =  Token.{tokid = VARID} 
;
private reduce181 =  single 
;
private reduce182 =  liste  
;
private reduce183 =  \n\t\v     -> With2 n t v
;
private reduce184 =  \t\v       -> With1 t v
;
private reduce185 =  \v         -> Simple v 
;
private reduce186 =  \n\t\v     -> With2 n t v
;
private reduce187 =  \t\v       -> With1 t v
;
private reduce188 =  \v         -> Simple v 
;
private reduce191 =  \n\t\v     -> With2 n t v
;
private reduce192 =  \t\v       -> With1 t v
;
private reduce193 =  Simple  
;
private reduce194 =  opSname 
;
private reduce198 =  \f\i -> do
                                    t <- infixop (yyline i) NOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce199 =  \f\i -> do
                                    t <- infixop (yyline i) LOP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce200 =  \f\i -> do
                                    t <- infixop (yyline i) ROP1 (Token.value i)
                                    YYM.pure (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce201 =  Token.value 
;
private reduce202 =  Token.value 
;
private reduce203 =  Token.value 
;
private reduce204 =  single  
;
private reduce205 =  (:) 
;
private reduce206 =  \(def::Def)\o -> def.{ops = o}
;
private reduce207 =  \as\_\s -> map (annotation s) as 
;
private reduce209 =  \_\a\_ -> do unqualified a 
;
private reduce210 =  \_\a\_ -> a 
;
private reduce211 =  \_\a\_ -> a 
;
private reduce212 =  single   
;
private reduce213 =  liste    
;
private reduce214 =  \_\(d::Def) -> d.{isPure = true} 
;
private reduce219 =  \o -> do unqualified o 
;
private reduce221 =  \o -> do unqualified o >>= pure . _.value 
;
private reduce222 =  Token.value 
;
private reduce223 =  \f\j\g -> (f,j,Just g) 
;
private reduce224 =  \f\j -> (f,j,Nothing) 
;
private reduce225 =  \f\g -> (f,Token.value f, Just g)  
;
private reduce226 =  \f   -> (f,Token.value f, Nothing) 
;
private reduce227 =  \a\_\c -> (a, c) 
;
private reduce228 =  \a -> (a, [])    
;
private reduce229 =  single 
;
private reduce230 =  liste 
;
private reduce231 =  \_\(fr,jv,ga)\col\t ->
                    NatDcl {pos=yyline fr, vis=Public, name=fr.value,
                                                meth=jv, txs=t, isPure=false,
                                                gargs = ga, 
                                                doc=Nothing}
;
private reduce232 =  single 
;
private reduce233 =  (:)    
;
private reduce234 =  Token.value 
;
private reduce236 =  ForAll [] 
;
private reduce237 =  \_\bs\_\r      -> ForAll  [ (b,KVar) | b <- bs ]  r 
;
private reduce239 =  \dot -> do
                                        when (Token.value dot != "â¢") do
                                            yyerror (yyline dot)
                                                ("'.' expected instead of " ++ show dot.value)
                                        YYM.pure dot
                                    
;
private reduce240 =  \tau\t\rho -> do
                                        context <- tauToCtx tau
                                        YYM.pure (Rho.{context} rho)
                                     
;
private reduce242 =  RhoTau [] 
;
private reduce243 =  \a\_\b     -> case a of
                                            TSig s -> RhoFun [] s b 
                                            _ -> RhoFun [] (ForAll [] (RhoTau [] a)) b 
;
private reduce245 =  TSig 
;
private reduce246 =  \a\f\b ->  case a of
                            TSig s -> TSig (ForAll [] (RhoFun [] s (RhoTau [] b))) 
                            _      -> TApp (TApp (TCon (yyline f) (fromBase f.{tokid=CONID, value="->"})) a) b 
                         
;
private reduce247 =  single 
;
private reduce248 =  liste  
;
private reduce249 =  single 
;
private reduce250 =  liste  
;
private reduce251 =  \taus -> Tau.mkapp (head taus) (tail taus) 
;
private reduce253 =  \(tn::SName) -> TCon (yyline tn.id) tn
;
private reduce254 =  \_\t\_ -> t 
;
private reduce255 = \_\t\(c::Token)\ts\_ ->
                            let
                                tus = t:ts;
                                i = length tus;
                                tname = fromBase c.{tokid=CONID, value=tuple i}
                            in  (TCon (yyline c) tname).mkapp tus
                        
;
private reduce256 =  \_\t\e\ts\_ -> mkEither (yyline e) t ts 
;
private reduce257 = \a\t\_ -> TApp (TCon (yyline a)
                                             (fromBase a.{tokid=CONID, value="[]"}))
                                        t 
;
private reduce258 =  \n         -> TVar (yyline n) KVar (Token.value n)  
;
private reduce259 =  \_\n\_\k\_ -> TVar (yyline n) k    (Token.value n)  
;
private reduce261 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="[]"} 
;
private reduce262 =  \(a::Token)\_ -> fromBase a.{tokid=CONID, value="()"} 
;
private reduce263 =  \(z::Token)\n\_ -> fromBase z.{tokid=CONID, value=tuple (n+1)} 
;
private reduce264 =  \_\(a::Token)\_ -> fromBase a.{tokid=CONID, value="->"} 
;
private reduce265 =  \a\_\c -> KApp a c 
;
private reduce267 =  \star -> do
                                let w = Token.value star
                                when  (w != "*") do
                                    yyerror (yyline star) 
                                            ("expected `*`, found `" ++ w ++ "`") 
                                pure KType
                            
;
private reduce268 =  \v -> do
                                let w = Token.value v
                                if w == "generic" then pure KGen
                                else do
                                    yyerror (yyline v) 
                                            ("expected `generic` instead of `" ++ w ++ "`")
                                    pure KType
                            
;
private reduce269 =  \_\b\_ -> b 
;
private reduce270 =  \c\v -> Ctx {pos=Pos (SName.id c) v.pos.last, cname=c, tau=v} 
;
private reduce271 =  single 
;
private reduce272 =  \c\_ -> [c] 
;
private reduce273 =  liste  
;
private reduce274 =  single 
;
private reduce275 =  \_\x\_ -> x 
;
private reduce276 = 
        \_\ctxs\_\c\v\defs -> do
            sups <- classContext (Token.value c) ctxs (v::TauS).var
            pure ClaDcl{
                    pos = yyline c, 
                    vis = Public,
                    name = Token.value c,
                    clvar = v,
                    supers = sups,
                    defs,
                    doc = Nothing}
    
;
private reduce277 = 
        \kw\ctxs\defs -> case ctxs of
            Ctx{pos,cname,tau}:rest -> do
                unless (null rest) 
                    (yyerror (yyline kw) "classname missing after contexts")
                when (SName.{ty?} cname)
                    (yyerror (yyline cname.id) "classname must not be qualified") 
                pure ClaDcl {pos, vis = Public, name=cname.id.value,
                               clvar = tau, supers = [],
                               defs, doc = Nothing}
            _ -> Prelude.error "fatal: empty ccontext (cannot happen)" 
    
;
private reduce278 =  \c\t -> Ctx {pos=Pos (SName.id c) t.getpos.last, cname=c, tau=t} 
;
private reduce279 =  single 
;
private reduce280 =  \c\_ -> [c] 
;
private reduce281 =  liste  
;
private reduce282 =  single 
;
private reduce283 =  \_\x\_ -> x 
;
private reduce284 = 
        \ctxs\ea\cls\tau -> InsDcl {
            pos = yyline ea,
            vis = Public,
            clas = cls,
            typ = ForAll [] (RhoTau ctxs tau),
            defs = [],
            doc = Nothing}
    
;
private reduce285 = 
        \ctxs -> case ctxs of
            Ctx{pos, cname, tau}:rest -> do
                unless (null rest) 
                        (yyerror pos "classname missing after instance contexts")
                pure InsDcl {
                    pos, vis = Public, clas = cname,
                    typ = ForAll [] (RhoTau [] tau),
                    defs = [],
                    doc = Nothing,
                    }
            _ -> Prelude.error "fatal: empty instance context"
    
;
private reduce286 = 
        \ins\head\defs -> (head::Def).{defs, pos = yyline ins}
    
;
private reduce287 =  
        \d\(i::Def) -> DrvDcl {pos = yyline d, vis = Public, clas=i.clas, typ=i.typ, doc=Nothing}
    
;
private reduce288 =  \def\defs -> (def::Def).{defs = defs} 
;
private reduce289 =  \_\_ -> (true, false)  
;
private reduce290 =  \_\_ -> (false, true)  
;
private reduce291 =  \_   -> (false, false) 
;
private reduce292 =  \x     ->  (x, Nothing) 
;
private reduce293 =  \x\gs  ->  (x, Just gs) 
;
private reduce294 =  \_\ts\_   -> ts 
;
private reduce295 =  \_\_      -> [] 
;
private reduce296 = 
        \dat\d\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=[], defs=[],
                                    gargs,  
                                    isPure = fst pur, isMutable = snd pur, 
                                    doc=Nothing}
    
;
private reduce297 = 
        \dat\d\ds\docu\pur\(jt,gargs) -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=ds, defs=[],
                                    gargs, 
                                    isPure = fst pur, isMutable = snd pur,
                                    doc=Nothing}
    
;
private reduce298 = 
        \dat\d\ds\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=ds, ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce299 = 
        \dat\d\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = false,
                                        vars=[], ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce300 = 
        \dat\d\ds\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=ds, ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce301 = 
        \dat\d\docu\alt -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                        newt = true,
                                        vars=[], ctrs=[alt], defs=[], doc=Nothing}
    
;
private reduce302 =  single 
;
private reduce303 =  (:) 
;
private reduce304 =  single 
;
private reduce305 =  liste  
;
private reduce307 =  \dc\doc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce308 =  \doc\dc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce310 =  \_\dc -> (dc::DConS).{vis = Public}    
;
private reduce311 =  \_\dc -> (dc::DConS).{vis = Private}   
;
private reduce312 =  \_\dc -> (dc::DConS).{vis = Protected} 
;
private reduce313 =  \_\dcon ->  DCon.{ -- strict=true,
                                                    flds <-map ConField.{strict=true}}  dcon 
;
private reduce314 =  \_\dcon ->  DCon.{ -- strict=false,
                                                    flds <-map ConField.{strict=false}} dcon 
;
private reduce316 =  \c        -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=[], doc=Nothing } 
;
private reduce317 =  \c\_\fs\_ -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce318 =  \c\fs     -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce319 =  \taus -> do
                                    g <- getST
                                    let field  = Field Position.null Nothing Nothing Public false
                                                    â¢ toSig
                                        toSig (TSig s) = s
                                        toSig tau      = (ForAll [] . RhoTau []) tau
                                    pure (map field taus)
                                
;
private reduce320 =  single 
;
private reduce321 =  (:) 
;
private reduce323 =  const 
;
private reduce324 =  \cs\(d::Token) -> map ConField.{doc <- addDoc d.value} cs 
;
private reduce325 =  \as\c\ls -> as ++ ls 
;
private reduce326 =  \as\(d::Token)\ls -> map ConField.{doc <- addDoc d.value} as ++ ls 
;
private reduce327 =  \vs\_\t -> [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce328 =  \(d::String)\vs\_\t ->
                                        map ConField.{doc=Just d}
                                            [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce329 =  single 
;
private reduce330 =  liste  
;
private reduce332 =  \_ \(pos,name,vis,strict) -> (pos,name,Public, strict) 
;
private reduce333 =  \_ \(pos,name,vis,strict) -> (pos,name,Private,strict) 
;
private reduce335 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, true) 
;
private reduce336 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, false) 
;
private reduce337 =  \v -> do
                                    g <- getST
                                    pure (yyline v, v.value, Public, false)
                                
;
private reduce338 =  \t\i   \_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=[], 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce339 =  \t\i\vs\_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=vs, 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce340 =  [] 
;
private reduce341 =  \_\_\_ -> []
;
private reduce342 =  \_\_\defs\_ -> defs
;
private reduce343 =  \_\_\_ -> []
;
private reduce344 =  \_\_\defs\_ -> defs
;
private reduce345 =  \(ex,pats)\eq\expr -> fundef ex pats expr 
;
private reduce346 =  \(ex,pats)\gds -> fungds ex pats gds 
;
private reduce347 =  \fdefs\defs ->
        case fdefs of
            [fd] | FunDcl {expr=x} <- fd = YYM.pure [fd.{expr = Let defs x}]
            _ = do
                yyerror (head fdefs).pos ("illegal function definition, where { ... } after annotation?")
                YYM.pure fdefs
    
;
private reduce348 =  \x -> do
                                            x <- funhead x
                                            YYM.pure x
                                    
;
private reduce349 =  \x ->  Lit (yyline x) LBool "true" 
;
private reduce350 =  \x ->  Lit (yyline x) LBool "false"
;
private reduce351 =  \x ->  do litchar x 
;
private reduce352 =  \x ->  Lit (yyline x) LString (Token.value x) 
;
private reduce353 =  \x ->  Lit (yyline x) LInt    (Token.value x) 
;
private reduce354 =  \x ->  Lit (yyline x) LBig    (bignum x)      
;
private reduce355 =  \x ->  Lit (yyline x) LLong   (Token.value x) 
;
private reduce356 =  \x ->  Lit (yyline x) LFloat  (Token.value x) 
;
private reduce357 =  \x ->  Lit (yyline x) LDouble (Token.value x) 
;
private reduce358 =  \x ->  do litregexp x 
;
private reduce363 =  \e\t\x -> do { (ex,pat) <- funhead e; YYM.pure (Right (fundef ex pat x)) }
;
private reduce364 =  \_\_\ds\_ -> Right ds 
;
private reduce365 =  single 
;
private reduce366 =  liste  
;
private reduce367 =  (const . single) 
;
private reduce368 =  single 
;
private reduce369 =  (const . single) 
;
private reduce370 =  liste 
;
private reduce371 =  \e     ->  Left (Nothing, e) 
;
private reduce372 =  \p\g\e ->  Left (Just p,  e) 
;
private reduce373 =  single 
;
private reduce374 =  liste  
;
private reduce375 =  (const . single) 
;
private reduce376 =  \a\qs\_\x  -> (yyline a, qs, x) 
;
private reduce377 =  single 
;
private reduce378 =  (:) 
;
private reduce379 =  \p\a\e ->
                                        CAlt {pat=p, ex=e}
;
private reduce380 =  \p\gs -> guardedalt p gs
;
private reduce381 = \(calt::CAltS)\defs ->
                                        let
                                            nx = Let defs calt.ex;
                                        in calt.{ ex = nx } 
;
private reduce382 =  single 
;
private reduce383 =  liste  
;
private reduce384 =  \a\_    ->  [a] 
;
private reduce385 =  \_\ps\b  -> foldr (\p\x -> Lam p x false) b ps 
;
private reduce387 =  \_\x -> x 
;
private reduce388 =  \x\_\t  -> Ann {ex = x, typ=t} 
;
private reduce390 =  flip const 
;
private reduce392 =  flip const 
;
private reduce394 =  mkapp 
;
private reduce395 =  mkapp 
;
private reduce396 =  \m\x -> nApp (Vbl (contextName m "negate")) x
;
private reduce398 =  \_\c\_\t\_\e  -> Ifte c t e
;
private reduce399 =  \_\e\_\_\as\_ -> Case CNormal e as
;
private reduce400 =  \_\_\ds\_\_\e -> Let ds e
;
private reduce402 =  underscore 
;
private reduce404 =  nApp 
;
private reduce406 =  \u\p -> nApp (Vbl {name=Simple u}) p
;
private reduce407 =  single 
;
private reduce408 =  (:) 
;
private reduce409 =  With1 
;
private reduce410 =  With2 
;
private reduce412 =  \d\_\defs\_   -> do mkMonad (yyline d) defs 
;
private reduce413 =  \p\_\(v::Token) -> umem p v id
;
private reduce414 =  \p\_\v -> do {v <- unqualified v;
                                                    YYM.pure (umem p v id)}
;
private reduce415 =  \p\_\v -> umem p v id
;
private reduce416 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("has$" ++)}) 
;
private reduce417 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("upd$" ++)}) 
;
private reduce418 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("chg$" ++)}) 
;
private reduce419 =  \q\(p::Token)\fs\_ -> let {
                        -- n   = Simple q;
                        flp = Vbl (wellKnown p "flip");
                        bul = Vbl (contextName p "â¢");
                        c []     = undefined;
                        c (f:fs) = fold cex (chup f) fs where {
                            cex x f = bul `nApp` x `nApp` chup f;
                            chup :: (Token, Bool, Exp) -> Exp;
                            chup (r, true, e)  = flp `nApp` Vbl  (q r.{value <- ("chg$"++)}) `nApp` e;
                            chup (r, false, e) = flp `nApp` Vbl  (q r.{value <- ("upd$"++)}) `nApp` e;
                                      }} in c fs 
;
private reduce420 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id
;
private reduce421 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id
;
private reduce422 = \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id
;
private reduce423 =  \x\(p::Token)\_\fs\_ ->
                                let {
                        u x [] = x;
                        u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                        u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                } in u x fs
;
private reduce424 =  \p\t\_\v\_  ->
                                        let elem = t.{tokid = VARID, value = "elemAt"}
                                        in Vbl {name=Simple elem}
                                            `nApp` p
                                            `nApp` v
;
private reduce425 =  \x   -> Vbl {name=x} 
;
private reduce427 =  \t   -> Vbl {name = Simple t.{tokid=VARID, value="_"}} 
;
private reduce428 =  \qc  -> Con {name=qc} 
;
private reduce429 =  \qc\_\z    -> ConFS {name=qc, fields=[]}
;
private reduce430 =  \qc\_\fs\z -> ConFS {name=qc, fields=fs}
;
private reduce431 =  \z\_   -> Con (fromBase z.{tokid=CONID, value="()"})
;
private reduce432 =  \z\n\_ -> Con (fromBase z.{tokid=CONID, value=tuple (n+1)})
;
private reduce433 =  \_\x\_ -> Vbl {name=Simple x} 
;
private reduce434 =  \_\o\_ -> (varcon o) (opSname o)
;
private reduce435 =  \_\m\_ -> (Vbl (fromBase m)) 
;
private reduce436 =  \z\o\x\_ ->  let -- (+1) --> flip (+) 1
                                        flp = Vbl (contextName z "flip") 
                                        op  = (varcon o) (opSname o)
                                        ex = nApp (nApp flp op) x
                                    in ex
;
private reduce437 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (opSname o)) x
;
private reduce438 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (Simple o)) x
;
private reduce439 =  \a\e\x\es\_ -> fold nApp (Con 
                                                                   (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
;
private reduce440 =  \a\e\(x::Token)\es\_ -> do
                                            g <- getST
                                            E.warn (yyline x) (PP.text "strict tuples are deprecated, use ',' to separate elements")
                                            pure (
                                                fold nApp 
                                                    (Con 
                                                        (fromBase x.{tokid=CONID, value=tuple (1+length es)})
                                                        )
                                                    (e:es)
                                              )
                                        
;
private reduce441 =  \_\x\_ -> Term x 
;
private reduce442 =  \a\z ->  Con (fromBase z.{tokid=CONID, value="[]"})
;
private reduce443 =  \b\es\z -> 
                                                foldr (\a\as -> nApp (nApp (Con (fromBase b.{tokid=CONID, value=":"})) a) as)
                                                       (Con (fromBase z.{tokid=CONID, value="[]"}))
                                                       es
;
private reduce444 =  \a\b\c\d   -> do mkEnumFrom   a b c d
;
private reduce445 =  \a\b\c\d\e -> do mkEnumFromTo a b c d e
;
private reduce446 =  \(a::Token)\e\b\qs\(z::Token) -> do {
                let {nil = z.{tokid=CONID, value="[]"}};
                listComprehension (yyline b) e qs
                                            (Con {name = fromBase nil})
                                    }
;
private reduce447 =  const 1 
;
private reduce448 =  ((+) . const 1) 
;
private reduce449 =  single 
;
private reduce450 =  \a\c\ls ->
                                        if elemBy (using fst) a ls then do {
                                                E.warn (yyline c) (msgdoc ("field `" ++ fst a
                                                    ++ "` should appear only once."));
                                                YYM.pure ls
                                            } else
                                                YYM.pure (a:ls)
                                    
;
private reduce451 =  (const . single) 
;
private reduce452 =  single 
;
private reduce453 =  liste  
;
private reduce454 =  (const . single) 
;
private reduce455 =  \s\_\x ->  (s, true,  x) 
;
private reduce456 =  \s\_\x ->  (s, false, x) 
;
private reduce457 =  \s     ->  (s, false, Vbl (Simple s)) 
;
private reduce458 =  \s\_\x ->  (Token.value s, x) 
;
private reduce459 =  \s     ->  (s.value, Vbl (Simple s)) 
;
private reduce460 =  single 
;
private reduce461 =  liste  
;
private reduce462 =  (const . single) 
;
private reduce463 =  single 
;
private reduce464 =  liste 
;
private reduce465 =  (const . single) 
;
yyrule 1 = "module: moduleclause ';' definitions";
yyrule 2 = "module: moduleclause WHERE '{' definitions '}'";
yyrule 3 = "module: '{' definitions '}'";
yyrule 4 = "nativename: rawnativename";
yyrule 5 = "rawnativename: VARID";
yyrule 6 = "rawnativename: CONID";
yyrule 7 = "rawnativename: PACKAGE";
yyrule 8 = "rawnativename: VARID '.' rawnativename";
yyrule 9 = "rawnativename: PACKAGE '.' rawnativename";
yyrule 10 = "rawnativename: QUALIFIER rawnativename";
yyrule 11 = "rawnativename: STRCONST";
yyrule 12 = "modulename1: CONID";
yyrule 13 = "modulename1: varidkw '.' modulename1";
yyrule 14 = "modulename1: QUALIFIER modulename1";
yyrule 15 = "modulename: modulename1";
yyrule 16 = "docs: DOCUMENTATION";
yyrule 17 = "docs: DOCUMENTATION docs";
yyrule 18 = "docs: DOCUMENTATION semicoli docs";
yyrule 19 = "moduleclause: docs PACKAGE modulename";
yyrule 20 = "moduleclause: PACKAGE modulename";
yyrule 21 = "moduleclause: docs PROTECTED PACKAGE modulename";
yyrule 22 = "moduleclause: PROTECTED PACKAGE modulename";
yyrule 23 = "moduleclause: moduleclause words '(' qvarids ')'";
yyrule 24 = "word: VARID";
yyrule 25 = "words: word";
yyrule 26 = "words: word words";
yyrule 27 = "semicoli: ';'";
yyrule 28 = "semicoli: ';' semicoli";
yyrule 29 = "definitions: definition";
yyrule 30 = "definitions: definition semicoli";
yyrule 31 = "definitions: definition semicoli definitions";
yyrule 32 = "definition: documentation";
yyrule 33 = "definition: documentation definition";
yyrule 34 = "definition: topdefinition";
yyrule 35 = "definition: visibledefinition";
yyrule 36 = "visibledefinition: PRIVATE publicdefinition";
yyrule 37 = "visibledefinition: PROTECTED publicdefinition";
yyrule 38 = "visibledefinition: PUBLIC publicdefinition";
yyrule 39 = "visibledefinition: ABSTRACT datadef";
yyrule 40 = "topdefinition: import";
yyrule 41 = "topdefinition: infix";
yyrule 42 = "topdefinition: moduledefinition";
yyrule 43 = "topdefinition: publicdefinition";
yyrule 44 = "moduledefinition: NATIVE PACKAGE typeclause interfaces wheretokens";
yyrule 45 = "typeclause: <empty>";
yyrule 46 = "typeclause: TYPE tau";
yyrule 47 = "interfaces: <empty>";
yyrule 48 = "interfaces: CLASS tauSC";
yyrule 49 = "wheretokens: WHERE '{' jtokens '}'";
yyrule 50 = "wheretokens: WHERE '{' '}'";
yyrule 51 = "jtoken: VARID";
yyrule 52 = "jtoken: CONID";
yyrule 53 = "jtoken: QVARID";
yyrule 54 = "jtoken: QCONID";
yyrule 55 = "jtoken: QUALIFIER";
yyrule 56 = "jtoken: DOCUMENTATION";
yyrule 57 = "jtoken: PACKAGE";
yyrule 58 = "jtoken: IMPORT";
yyrule 59 = "jtoken: INFIX";
yyrule 60 = "jtoken: INFIXR";
yyrule 61 = "jtoken: INFIXL";
yyrule 62 = "jtoken: NATIVE";
yyrule 63 = "jtoken: DATA";
yyrule 64 = "jtoken: WHERE";
yyrule 65 = "jtoken: CLASS";
yyrule 66 = "jtoken: INSTANCE";
yyrule 67 = "jtoken: ABSTRACT";
yyrule 68 = "jtoken: TYPE";
yyrule 69 = "jtoken: TRUE";
yyrule 70 = "jtoken: FALSE";
yyrule 71 = "jtoken: IF";
yyrule 72 = "jtoken: THEN";
yyrule 73 = "jtoken: ELSE";
yyrule 74 = "jtoken: CASE";
yyrule 75 = "jtoken: OF";
yyrule 76 = "jtoken: DERIVE";
yyrule 77 = "jtoken: LET";
yyrule 78 = "jtoken: IN";
yyrule 79 = "jtoken: DO";
yyrule 80 = "jtoken: FORALL";
yyrule 81 = "jtoken: PRIVATE";
yyrule 82 = "jtoken: PROTECTED";
yyrule 83 = "jtoken: PUBLIC";
yyrule 84 = "jtoken: PURE";
yyrule 85 = "jtoken: THROWS";
yyrule 86 = "jtoken: MUTABLE";
yyrule 87 = "jtoken: INTCONST";
yyrule 88 = "jtoken: STRCONST";
yyrule 89 = "jtoken: LONGCONST";
yyrule 90 = "jtoken: FLTCONST";
yyrule 91 = "jtoken: DBLCONST";
yyrule 92 = "jtoken: CHRCONST";
yyrule 93 = "jtoken: ARROW";
yyrule 94 = "jtoken: DCOLON";
yyrule 95 = "jtoken: GETS";
yyrule 96 = "jtoken: EARROW";
yyrule 97 = "jtoken: DOTDOT";
yyrule 98 = "jtoken: SOMEOP";
yyrule 99 = "jtoken: INTERPRET";
yyrule 100 = "jtoken: ','";
yyrule 101 = "jtoken: '|'";
yyrule 102 = "jtoken: '['";
yyrule 103 = "jtoken: ']'";
yyrule 104 = "jtoken: '('";
yyrule 105 = "jtoken: ')'";
yyrule 106 = "jtoken: '.'";
yyrule 107 = "jtoken: '?'";
yyrule 108 = "jtoken: '-'";
yyrule 109 = "jtoken: ';'";
yyrule 110 = "jtoken: '!'";
yyrule 111 = "jtoken: '='";
yyrule 112 = "jtoken: '\\'";
yyrule 113 = "jtokens: jtoken";
yyrule 114 = "jtokens: jtoken jtokens";
yyrule 115 = "jtokens: '{' jtokens '}'";
yyrule 116 = "jtokens: '{' jtokens '}' jtokens";
yyrule 117 = "jtokens: '{' '}'";
yyrule 118 = "jtokens: '{' '}' jtokens";
yyrule 119 = "documentation: DOCUMENTATION";
yyrule 120 = "publicdefinition: typedef";
yyrule 121 = "publicdefinition: datadef";
yyrule 122 = "publicdefinition: classdef";
yyrule 123 = "publicdefinition: instdef";
yyrule 124 = "publicdefinition: derivedef";
yyrule 125 = "publicdefinition: localdef";
yyrule 126 = "localdefs: dplocaldef";
yyrule 127 = "localdefs: dplocaldef semicoli";
yyrule 128 = "localdefs: dplocaldef semicoli localdefs";
yyrule 129 = "localdef: annotation";
yyrule 130 = "localdef: nativedef";
yyrule 131 = "localdef: fundef";
yyrule 132 = "plocaldef: localdef";
yyrule 133 = "plocaldef: PRIVATE localdef";
yyrule 134 = "plocaldef: PROTECTED localdef";
yyrule 135 = "plocaldef: PUBLIC localdef";
yyrule 136 = "dplocaldef: documentation";
yyrule 137 = "dplocaldef: documentation dplocaldef";
yyrule 138 = "dplocaldef: plocaldef";
yyrule 139 = "letdef: annotation";
yyrule 140 = "letdef: fundef";
yyrule 141 = "letdefs: letdef";
yyrule 142 = "letdefs: letdef semicoli";
yyrule 143 = "letdefs: letdef semicoli letdefs";
yyrule 144 = "import: IMPORT modulename importliste";
yyrule 145 = "import: IMPORT modulename VARID CONID importliste";
yyrule 146 = "import: IMPORT modulename CONID importliste";
yyrule 147 = "importliste: <empty>";
yyrule 148 = "importliste: varid '(' importspecs ')'";
yyrule 149 = "importliste: '(' ')'";
yyrule 150 = "importliste: '(' importspecs ')'";
yyrule 151 = "importliste: PUBLIC importliste";
yyrule 152 = "importspecs: importspec";
yyrule 153 = "importspecs: importspec ','";
yyrule 154 = "importspecs: importspec ',' importspecs";
yyrule 155 = "importitem: qvarid";
yyrule 156 = "importitem: CONID '(' memspecs ')'";
yyrule 157 = "importitem: CONID '(' ')'";
yyrule 158 = "importitem: qconid";
yyrule 159 = "importitem: operator";
yyrule 160 = "importitem: unop";
yyrule 161 = "importspec: importitem";
yyrule 162 = "importspec: importitem alias";
yyrule 163 = "importspec: PUBLIC importspec";
yyrule 164 = "memspec: alias";
yyrule 165 = "memspec: alias alias";
yyrule 166 = "memspec: PUBLIC memspec";
yyrule 167 = "memspecs: memspec";
yyrule 168 = "memspecs: memspec ','";
yyrule 169 = "memspecs: memspec ',' memspecs";
yyrule 170 = "alias: VARID";
yyrule 171 = "alias: CONID";
yyrule 172 = "alias: operator";
yyrule 173 = "varid: VARID";
yyrule 174 = "varidkw: VARID";
yyrule 175 = "varidkw: DATA";
yyrule 176 = "varidkw: TYPE";
yyrule 177 = "varidkw: NATIVE";
yyrule 178 = "varidkw: PURE";
yyrule 179 = "varidkw: PACKAGE";
yyrule 180 = "varidkw: IMPORT";
yyrule 181 = "qvarids: qvarop";
yyrule 182 = "qvarids: qvarop ',' qvarids";
yyrule 183 = "qvarid: QUALIFIER QUALIFIER varop";
yyrule 184 = "qvarid: QUALIFIER varop";
yyrule 185 = "qvarid: VARID";
yyrule 186 = "qconid: QUALIFIER QUALIFIER CONID";
yyrule 187 = "qconid: QUALIFIER CONID";
yyrule 188 = "qconid: CONID";
yyrule 189 = "varop: VARID";
yyrule 190 = "varop: unop";
yyrule 191 = "qvarop: QUALIFIER QUALIFIER varop";
yyrule 192 = "qvarop: QUALIFIER varop";
yyrule 193 = "qvarop: varop";
yyrule 194 = "qvarop: operator";
yyrule 195 = "operator: SOMEOP";
yyrule 196 = "unop: '!'";
yyrule 197 = "unop: '?'";
yyrule 198 = "fixity: INFIX INTCONST";
yyrule 199 = "fixity: INFIXL INTCONST";
yyrule 200 = "fixity: INFIXR INTCONST";
yyrule 201 = "opstring: operator";
yyrule 202 = "opstring: VARID";
yyrule 203 = "opstring: '-'";
yyrule 204 = "operators: opstring";
yyrule 205 = "operators: opstring operators";
yyrule 206 = "infix: fixity operators";
yyrule 207 = "annotation: annoitems DCOLON sigma";
yyrule 208 = "annoitem: varid";
yyrule 209 = "annoitem: '(' operator ')'";
yyrule 210 = "annoitem: '(' unop ')'";
yyrule 211 = "annoitem: '(' '-' ')'";
yyrule 212 = "annoitems: annoitem";
yyrule 213 = "annoitems: annoitem ',' annoitems";
yyrule 214 = "nativedef: PURE impurenativedef";
yyrule 215 = "nativedef: impurenativedef";
yyrule 216 = "fitem: annoitem";
yyrule 217 = "fitem: unop";
yyrule 218 = "fitem: '-'";
yyrule 219 = "fitem: operator";
yyrule 220 = "jitem: nativename";
yyrule 221 = "jitem: operator";
yyrule 222 = "jitem: unop";
yyrule 223 = "methodspec: fitem jitem gargs";
yyrule 224 = "methodspec: fitem jitem";
yyrule 225 = "methodspec: fitem gargs";
yyrule 226 = "methodspec: fitem";
yyrule 227 = "sigex: sigma THROWS tauSC";
yyrule 228 = "sigex: sigma";
yyrule 229 = "sigexs: sigex";
yyrule 230 = "sigexs: sigex '|' sigexs";
yyrule 231 = "impurenativedef: NATIVE methodspec DCOLON sigexs";
yyrule 232 = "boundvars: boundvar";
yyrule 233 = "boundvars: boundvar boundvars";
yyrule 234 = "boundvar: VARID";
yyrule 235 = "sigma: forall";
yyrule 236 = "sigma: rho";
yyrule 237 = "forall: FORALL boundvars mbdot rho";
yyrule 238 = "mbdot: '.'";
yyrule 239 = "mbdot: SOMEOP";
yyrule 240 = "rho: tapp EARROW rhofun";
yyrule 241 = "rho: rhofun";
yyrule 242 = "rhofun: tapp";
yyrule 243 = "rhofun: tapp ARROW rhofun";
yyrule 244 = "tau: tapp";
yyrule 245 = "tau: forall";
yyrule 246 = "tau: tapp ARROW tau";
yyrule 247 = "tauSC: tau";
yyrule 248 = "tauSC: tau ',' tauSC";
yyrule 249 = "tauSB: tau";
yyrule 250 = "tauSB: tau '|' tauSB";
yyrule 251 = "tapp: simpletypes";
yyrule 252 = "simpletype: tyvar";
yyrule 253 = "simpletype: tyname";
yyrule 254 = "simpletype: '(' tau ')'";
yyrule 255 = "simpletype: '(' tau ',' tauSC ')'";
yyrule 256 = "simpletype: '(' tau '|' tauSB ')'";
yyrule 257 = "simpletype: '[' tau ']'";
yyrule 258 = "tyvar: VARID";
yyrule 259 = "tyvar: '(' VARID DCOLON kind ')'";
yyrule 260 = "tyname: qconid";
yyrule 261 = "tyname: '[' ']'";
yyrule 262 = "tyname: '(' ')'";
yyrule 263 = "tyname: '(' commata ')'";
yyrule 264 = "tyname: '(' ARROW ')'";
yyrule 265 = "kind: simplekind ARROW kind";
yyrule 266 = "kind: simplekind";
yyrule 267 = "simplekind: SOMEOP";
yyrule 268 = "simplekind: VARID";
yyrule 269 = "simplekind: '(' kind ')'";
yyrule 270 = "scontext: qconid tyvar";
yyrule 271 = "scontexts: scontext";
yyrule 272 = "scontexts: scontext ','";
yyrule 273 = "scontexts: scontext ',' scontexts";
yyrule 274 = "ccontext: scontext";
yyrule 275 = "ccontext: '(' scontexts ')'";
yyrule 276 = "classdef: CLASS ccontext EARROW CONID tyvar wheredef";
yyrule 277 = "classdef: CLASS ccontext wheredef";
yyrule 278 = "sicontext: qconid simpletype";
yyrule 279 = "sicontexts: sicontext";
yyrule 280 = "sicontexts: sicontext ','";
yyrule 281 = "sicontexts: sicontext ',' sicontexts";
yyrule 282 = "icontext: sicontext";
yyrule 283 = "icontext: '(' sicontexts ')'";
yyrule 284 = "insthead: icontext EARROW tyname simpletype";
yyrule 285 = "insthead: icontext";
yyrule 286 = "instdef: INSTANCE insthead wheredef";
yyrule 287 = "derivedef: DERIVE insthead";
yyrule 288 = "datadef: datainit wheredef";
yyrule 289 = "nativepur: PURE NATIVE";
yyrule 290 = "nativepur: MUTABLE NATIVE";
yyrule 291 = "nativepur: NATIVE";
yyrule 292 = "nativespec: nativename";
yyrule 293 = "nativespec: nativename gargs";
yyrule 294 = "gargs: '{' tauSC '}'";
yyrule 295 = "gargs: '{' '}'";
yyrule 296 = "datainit: DATA CONID '=' nativepur nativespec";
yyrule 297 = "datainit: DATA CONID dvars '=' nativepur nativespec";
yyrule 298 = "datainit: DATA CONID dvars '=' dalts";
yyrule 299 = "datainit: DATA CONID '=' dalts";
yyrule 300 = "datainit: NEWTYPE CONID dvars '=' dalt";
yyrule 301 = "datainit: NEWTYPE CONID '=' dalt";
yyrule 302 = "dvars: tyvar";
yyrule 303 = "dvars: tyvar dvars";
yyrule 304 = "dalts: dalt";
yyrule 305 = "dalts: dalt '|' dalts";
yyrule 306 = "dalt: visdalt";
yyrule 307 = "dalt: visdalt DOCUMENTATION";
yyrule 308 = "dalt: DOCUMENTATION visdalt";
yyrule 309 = "visdalt: strictdalt";
yyrule 310 = "visdalt: PUBLIC strictdalt";
yyrule 311 = "visdalt: PRIVATE strictdalt";
yyrule 312 = "visdalt: PROTECTED strictdalt";
yyrule 313 = "strictdalt: '!' simpledalt";
yyrule 314 = "strictdalt: '?' simpledalt";
yyrule 315 = "strictdalt: simpledalt";
yyrule 316 = "simpledalt: CONID";
yyrule 317 = "simpledalt: CONID '{' conflds '}'";
yyrule 318 = "simpledalt: CONID contypes";
yyrule 319 = "contypes: simpletypes";
yyrule 320 = "simpletypes: simpletype";
yyrule 321 = "simpletypes: simpletype simpletypes";
yyrule 322 = "conflds: confld";
yyrule 323 = "conflds: confld ','";
yyrule 324 = "conflds: confld DOCUMENTATION";
yyrule 325 = "conflds: confld ',' conflds";
yyrule 326 = "conflds: confld DOCUMENTATION conflds";
yyrule 327 = "confld: fldids DCOLON sigma";
yyrule 328 = "confld: docs fldids DCOLON sigma";
yyrule 329 = "fldids: fldid";
yyrule 330 = "fldids: fldid ',' fldids";
yyrule 331 = "fldid: strictfldid";
yyrule 332 = "fldid: PUBLIC strictfldid";
yyrule 333 = "fldid: PRIVATE strictfldid";
yyrule 334 = "strictfldid: plainfldid";
yyrule 335 = "strictfldid: '!' plainfldid";
yyrule 336 = "strictfldid: '?' plainfldid";
yyrule 337 = "plainfldid: varid";
yyrule 338 = "typedef: TYPE CONID '=' sigma";
yyrule 339 = "typedef: TYPE CONID dvars '=' sigma";
yyrule 340 = "wheredef: <empty>";
yyrule 341 = "wheredef: WHERE '{' '}'";
yyrule 342 = "wheredef: WHERE '{' localdefs '}'";
yyrule 343 = "wherelet: WHERE '{' '}'";
yyrule 344 = "wherelet: WHERE '{' letdefs '}'";
yyrule 345 = "fundef: funhead '=' expr";
yyrule 346 = "fundef: funhead guards";
yyrule 347 = "fundef: fundef wherelet";
yyrule 348 = "funhead: binex";
yyrule 349 = "literal: TRUE";
yyrule 350 = "literal: FALSE";
yyrule 351 = "literal: CHRCONST";
yyrule 352 = "literal: STRCONST";
yyrule 353 = "literal: INTCONST";
yyrule 354 = "literal: BIGCONST";
yyrule 355 = "literal: LONGCONST";
yyrule 356 = "literal: FLTCONST";
yyrule 357 = "literal: DBLCONST";
yyrule 358 = "literal: REGEXP";
yyrule 359 = "pattern: expr";
yyrule 360 = "aeq: ARROW";
yyrule 361 = "aeq: '='";
yyrule 362 = "lcqual: gqual";
yyrule 363 = "lcqual: expr '=' expr";
yyrule 364 = "lcqual: LET '{' letdefs '}'";
yyrule 365 = "lcquals: lcqual";
yyrule 366 = "lcquals: lcqual ',' lcquals";
yyrule 367 = "lcquals: lcqual ','";
yyrule 368 = "dodefs: lcqual";
yyrule 369 = "dodefs: lcqual semicoli";
yyrule 370 = "dodefs: lcqual semicoli dodefs";
yyrule 371 = "gqual: expr";
yyrule 372 = "gqual: expr GETS expr";
yyrule 373 = "gquals: gqual";
yyrule 374 = "gquals: gqual ',' gquals";
yyrule 375 = "gquals: gqual ','";
yyrule 376 = "guard: '|' gquals aeq expr";
yyrule 377 = "guards: guard";
yyrule 378 = "guards: guard guards";
yyrule 379 = "calt: pattern aeq expr";
yyrule 380 = "calt: pattern guards";
yyrule 381 = "calt: calt wherelet";
yyrule 382 = "calts: calt";
yyrule 383 = "calts: calt ';' calts";
yyrule 384 = "calts: calt ';'";
yyrule 385 = "lambda: '\\' apats lambdabody";
yyrule 386 = "lambdabody: lambda";
yyrule 387 = "lambdabody: ARROW expr";
yyrule 388 = "expr: binex DCOLON sigma";
yyrule 389 = "expr: binex";
yyrule 390 = "thenx: ';' THEN";
yyrule 391 = "thenx: THEN";
yyrule 392 = "elsex: ';' ELSE";
yyrule 393 = "elsex: ELSE";
yyrule 394 = "binex: binex SOMEOP binex";
yyrule 395 = "binex: binex '-' binex";
yyrule 396 = "binex: '-' topex";
yyrule 397 = "binex: topex";
yyrule 398 = "topex: IF expr thenx expr elsex expr";
yyrule 399 = "topex: CASE expr OF '{' calts '}'";
yyrule 400 = "topex: LET '{' letdefs '}' IN expr";
yyrule 401 = "topex: lambda";
yyrule 402 = "topex: appex";
yyrule 403 = "appex: unex";
yyrule 404 = "appex: appex unex";
yyrule 405 = "unex: primary";
yyrule 406 = "unex: unop unex";
yyrule 407 = "apats: unex";
yyrule 408 = "apats: unex apats";
yyrule 409 = "qualifiers: QUALIFIER";
yyrule 410 = "qualifiers: QUALIFIER QUALIFIER";
yyrule 411 = "primary: term";
yyrule 412 = "primary: DO '{' dodefs '}'";
yyrule 413 = "primary: primary '.' VARID";
yyrule 414 = "primary: primary '.' operator";
yyrule 415 = "primary: primary '.' unop";
yyrule 416 = "primary: qualifiers '{' VARID '?' '}'";
yyrule 417 = "primary: qualifiers '{' VARID '=' '}'";
yyrule 418 = "primary: qualifiers '{' VARID GETS '}'";
yyrule 419 = "primary: qualifiers '{' getfields '}'";
yyrule 420 = "primary: primary '.' '{' VARID '?' '}'";
yyrule 421 = "primary: primary '.' '{' VARID '=' '}'";
yyrule 422 = "primary: primary '.' '{' VARID GETS '}'";
yyrule 423 = "primary: primary '.' '{' getfields '}'";
yyrule 424 = "primary: primary '.' '[' expr ']'";
yyrule 425 = "term: qvarid";
yyrule 426 = "term: literal";
yyrule 427 = "term: '_'";
yyrule 428 = "term: qconid";
yyrule 429 = "term: qconid '{' '}'";
yyrule 430 = "term: qconid '{' fields '}'";
yyrule 431 = "term: '(' ')'";
yyrule 432 = "term: '(' commata ')'";
yyrule 433 = "term: '(' unop ')'";
yyrule 434 = "term: '(' operator ')'";
yyrule 435 = "term: '(' '-' ')'";
yyrule 436 = "term: '(' operator expr ')'";
yyrule 437 = "term: '(' binex operator ')'";
yyrule 438 = "term: '(' binex '-' ')'";
yyrule 439 = "term: '(' expr ',' exprSC ')'";
yyrule 440 = "term: '(' expr ';' exprSS ')'";
yyrule 441 = "term: '(' expr ')'";
yyrule 442 = "term: '[' ']'";
yyrule 443 = "term: '[' exprSC ']'";
yyrule 444 = "term: '[' exprSC DOTDOT ']'";
yyrule 445 = "term: '[' exprSC DOTDOT expr ']'";
yyrule 446 = "term: '[' expr '|' lcquals ']'";
yyrule 447 = "commata: ','";
yyrule 448 = "commata: ',' commata";
yyrule 449 = "fields: field";
yyrule 450 = "fields: field ',' fields";
yyrule 451 = "fields: field ','";
yyrule 452 = "getfields: getfield";
yyrule 453 = "getfields: getfield ',' getfields";
yyrule 454 = "getfields: getfield ','";
yyrule 455 = "getfield: VARID GETS expr";
yyrule 456 = "getfield: VARID '=' expr";
yyrule 457 = "getfield: VARID";
yyrule 458 = "field: varid '=' expr";
yyrule 459 = "field: varid";
yyrule 460 = "exprSC: expr";
yyrule 461 = "exprSC: expr ',' exprSC";
yyrule 462 = "exprSC: expr ','";
yyrule 463 = "exprSS: expr";
yyrule 464 = "exprSS: expr ';' exprSS";
yyrule 465 = "exprSS: expr ';'";
yyrule _ = "<unknown rule>";

private yyprod1 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce1 yy1 yy2 yy3 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod1 yyvals = yybadprod 1 yyvals;
private yyprod2 ((_, (YYTok yy5)):(_, (YYNTdefinitions yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce2 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod2 yyvals = yybadprod 2 yyvals;
private yyprod3 ((_, (YYTok yy3)):(_, (YYNTdefinitions yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce3 yy1 yy2 yy3 ;YYM.pure (YYNTmodule yyr, yyvs)};
private yyprod3 yyvals = yybadprod 3 yyvals;
private yyprod4 ((_, (YYNTrawnativename yy1)):yyvs) =  do { yyr <- reduce4 yy1 ;YYM.pure (YYNTnativename yyr, yyvs)};
private yyprod4 yyvals = yybadprod 4 yyvals;
private yyprod5 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce5 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod5 yyvals = yybadprod 5 yyvals;
private yyprod6 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce6 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod6 yyvals = yybadprod 6 yyvals;
private yyprod7 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce7 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod7 yyvals = yybadprod 7 yyvals;
private yyprod8 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce8 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod8 yyvals = yybadprod 8 yyvals;
private yyprod9 ((_, (YYNTrawnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce9 yy1 yy2 yy3}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod9 yyvals = yybadprod 9 yyvals;
private yyprod10 ((_, (YYNTrawnativename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce10 yy1 yy2}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod10 yyvals = yybadprod 10 yyvals;
private yyprod11 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce11 yy1}; YYM.pure (YYNTrawnativename yyr, yyvs)};
private yyprod11 yyvals = yybadprod 11 yyvals;
private yyprod12 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce12 yy1 ;YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod12 yyvals = yybadprod 12 yyvals;
private yyprod13 ((_, (YYNTmodulename1 yy3)):(_, (YYTok yy2)):(_, (YYNTvaridkw yy1)):yyvs) =  do { let {!yyr = reduce13 yy1 yy2 yy3}; YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod13 yyvals = yybadprod 13 yyvals;
private yyprod14 ((_, (YYNTmodulename1 yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce14 yy1 yy2}; YYM.pure (YYNTmodulename1 yyr, yyvs)};
private yyprod14 yyvals = yybadprod 14 yyvals;
private yyprod15 ((_, (YYNTmodulename1 yy1)):yyvs) =  do { let {!yyr = reduce15 yy1}; YYM.pure (YYNTmodulename yyr, yyvs)};
private yyprod15 yyvals = yybadprod 15 yyvals;
private yyprod16 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce16 yy1}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod16 yyvals = yybadprod 16 yyvals;
private yyprod17 ((_, (YYNTdocs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce17 yy1 yy2}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod17 yyvals = yybadprod 17 yyvals;
private yyprod18 ((_, (YYNTdocs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce18 yy1 yy2 yy3}; YYM.pure (YYNTdocs yyr, yyvs)};
private yyprod18 yyvals = yybadprod 18 yyvals;
private yyprod19 ((_, (YYNTmodulename yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce19 yy1 yy2 yy3}; YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod19 yyvals = yybadprod 19 yyvals;
private yyprod20 ((_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce20 yy1 yy2}; YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod20 yyvals = yybadprod 20 yyvals;
private yyprod21 ((_, (YYNTmodulename yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { yyr <- reduce21 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod21 yyvals = yybadprod 21 yyvals;
private yyprod22 ((_, (YYNTmodulename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce22 yy1 yy2 yy3 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod22 yyvals = yybadprod 22 yyvals;
private yyprod23 ((_, (YYTok yy5)):(_, (YYNTqvarids yy4)):(_, (YYTok yy3)):(_, (YYNTwords yy2)):(_, (YYNTmoduleclause yy1)):yyvs) =  do { yyr <- reduce23 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTmoduleclause yyr, yyvs)};
private yyprod23 yyvals = yybadprod 23 yyvals;
private yyprod24 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce24 yy1}; YYM.pure (YYNTword yyr, yyvs)};
private yyprod24 yyvals = yybadprod 24 yyvals;
private yyprod25 ((_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce25 yy1}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod25 yyvals = yybadprod 25 yyvals;
private yyprod26 ((_, (YYNTwords yy2)):(_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce26 yy1 yy2}; YYM.pure (YYNTwords yyr, yyvs)};
private yyprod26 yyvals = yybadprod 26 yyvals;
private yyprod27 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce27 yy1}; YYM.pure (YYNTsemicoli yyr, yyvs)};
private yyprod27 yyvals = yybadprod 27 yyvals;
private yyprod28 ((_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce28 yy1 yy2}; YYM.pure (YYNTsemicoli yyr, yyvs)};
private yyprod28 yyvals = yybadprod 28 yyvals;
private yyprod29 ((_, (YYNTdefinition yy1)):yyvs) = YYM.pure (YYNTdefinitions (yy1), yyvs);
private yyprod29 yyvals = yybadprod 29 yyvals;
private yyprod30 ((_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce30 yy1 yy2}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod30 yyvals = yybadprod 30 yyvals;
private yyprod31 ((_, (YYNTdefinitions yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce31 yy1 yy2 yy3}; YYM.pure (YYNTdefinitions yyr, yyvs)};
private yyprod31 yyvals = yybadprod 31 yyvals;
private yyprod32 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce32 yy1}; YYM.pure (YYNTdefinition yyr, yyvs)};
private yyprod32 yyvals = yybadprod 32 yyvals;
private yyprod33 ((_, (YYNTdefinition yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce33 yy1 yy2}; YYM.pure (YYNTdefinition yyr, yyvs)};
private yyprod33 yyvals = yybadprod 33 yyvals;
private yyprod34 ((_, (YYNTtopdefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod34 yyvals = yybadprod 34 yyvals;
private yyprod35 ((_, (YYNTvisibledefinition yy1)):yyvs) = YYM.pure (YYNTdefinition (yy1), yyvs);
private yyprod35 yyvals = yybadprod 35 yyvals;
private yyprod36 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce36 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod36 yyvals = yybadprod 36 yyvals;
private yyprod37 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce37 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod37 yyvals = yybadprod 37 yyvals;
private yyprod38 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce38 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod38 yyvals = yybadprod 38 yyvals;
private yyprod39 ((_, (YYNTdatadef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce39 yy1 yy2}; YYM.pure (YYNTvisibledefinition yyr, yyvs)};
private yyprod39 yyvals = yybadprod 39 yyvals;
private yyprod40 ((_, (YYNTimport yy1)):yyvs) =  do { let {!yyr = reduce40 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod40 yyvals = yybadprod 40 yyvals;
private yyprod41 ((_, (YYNTinfix yy1)):yyvs) =  do { let {!yyr = reduce41 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod41 yyvals = yybadprod 41 yyvals;
private yyprod42 ((_, (YYNTmoduledefinition yy1)):yyvs) =  do { let {!yyr = reduce42 yy1}; YYM.pure (YYNTtopdefinition yyr, yyvs)};
private yyprod42 yyvals = yybadprod 42 yyvals;
private yyprod43 ((_, (YYNTpublicdefinition yy1)):yyvs) = YYM.pure (YYNTtopdefinition (yy1), yyvs);
private yyprod43 yyvals = yybadprod 43 yyvals;
private yyprod44 ((_, (YYNTwheretokens yy5)):(_, (YYNTinterfaces yy4)):(_, (YYNTtypeclause yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce44 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTmoduledefinition yyr, yyvs)};
private yyprod44 yyvals = yybadprod 44 yyvals;
private yyprod45 yyvs =  do { let {!yyr = reduce45 }; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod46 ((_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce46 yy1 yy2}; YYM.pure (YYNTtypeclause yyr, yyvs)};
private yyprod46 yyvals = yybadprod 46 yyvals;
private yyprod47 yyvs =  do { let {!yyr = reduce47 }; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod48 ((_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce48 yy1 yy2}; YYM.pure (YYNTinterfaces yyr, yyvs)};
private yyprod48 yyvals = yybadprod 48 yyvals;
private yyprod49 ((_, (YYTok yy4)):(_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce49 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod49 yyvals = yybadprod 49 yyvals;
private yyprod50 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce50 yy1 yy2 yy3}; YYM.pure (YYNTwheretokens yyr, yyvs)};
private yyprod50 yyvals = yybadprod 50 yyvals;
private yyprod51 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod51 yyvals = yybadprod 51 yyvals;
private yyprod52 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod52 yyvals = yybadprod 52 yyvals;
private yyprod53 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod53 yyvals = yybadprod 53 yyvals;
private yyprod54 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod54 yyvals = yybadprod 54 yyvals;
private yyprod55 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod55 yyvals = yybadprod 55 yyvals;
private yyprod56 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod56 yyvals = yybadprod 56 yyvals;
private yyprod57 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod57 yyvals = yybadprod 57 yyvals;
private yyprod58 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod58 yyvals = yybadprod 58 yyvals;
private yyprod59 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod59 yyvals = yybadprod 59 yyvals;
private yyprod60 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod60 yyvals = yybadprod 60 yyvals;
private yyprod61 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod61 yyvals = yybadprod 61 yyvals;
private yyprod62 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod62 yyvals = yybadprod 62 yyvals;
private yyprod63 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod63 yyvals = yybadprod 63 yyvals;
private yyprod64 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod64 yyvals = yybadprod 64 yyvals;
private yyprod65 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod65 yyvals = yybadprod 65 yyvals;
private yyprod66 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod66 yyvals = yybadprod 66 yyvals;
private yyprod67 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod67 yyvals = yybadprod 67 yyvals;
private yyprod68 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod68 yyvals = yybadprod 68 yyvals;
private yyprod69 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod69 yyvals = yybadprod 69 yyvals;
private yyprod70 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod70 yyvals = yybadprod 70 yyvals;
private yyprod71 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod71 yyvals = yybadprod 71 yyvals;
private yyprod72 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod72 yyvals = yybadprod 72 yyvals;
private yyprod73 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod73 yyvals = yybadprod 73 yyvals;
private yyprod74 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod74 yyvals = yybadprod 74 yyvals;
private yyprod75 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod75 yyvals = yybadprod 75 yyvals;
private yyprod76 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod76 yyvals = yybadprod 76 yyvals;
private yyprod77 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod77 yyvals = yybadprod 77 yyvals;
private yyprod78 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod78 yyvals = yybadprod 78 yyvals;
private yyprod79 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod79 yyvals = yybadprod 79 yyvals;
private yyprod80 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod80 yyvals = yybadprod 80 yyvals;
private yyprod81 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod81 yyvals = yybadprod 81 yyvals;
private yyprod82 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod82 yyvals = yybadprod 82 yyvals;
private yyprod83 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod83 yyvals = yybadprod 83 yyvals;
private yyprod84 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod84 yyvals = yybadprod 84 yyvals;
private yyprod85 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod85 yyvals = yybadprod 85 yyvals;
private yyprod86 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod86 yyvals = yybadprod 86 yyvals;
private yyprod87 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod87 yyvals = yybadprod 87 yyvals;
private yyprod88 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod88 yyvals = yybadprod 88 yyvals;
private yyprod89 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod89 yyvals = yybadprod 89 yyvals;
private yyprod90 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod90 yyvals = yybadprod 90 yyvals;
private yyprod91 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod91 yyvals = yybadprod 91 yyvals;
private yyprod92 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod92 yyvals = yybadprod 92 yyvals;
private yyprod93 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod93 yyvals = yybadprod 93 yyvals;
private yyprod94 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod94 yyvals = yybadprod 94 yyvals;
private yyprod95 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod95 yyvals = yybadprod 95 yyvals;
private yyprod96 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod96 yyvals = yybadprod 96 yyvals;
private yyprod97 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod97 yyvals = yybadprod 97 yyvals;
private yyprod98 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod98 yyvals = yybadprod 98 yyvals;
private yyprod99 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod99 yyvals = yybadprod 99 yyvals;
private yyprod100 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod100 yyvals = yybadprod 100 yyvals;
private yyprod101 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod101 yyvals = yybadprod 101 yyvals;
private yyprod102 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod102 yyvals = yybadprod 102 yyvals;
private yyprod103 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod103 yyvals = yybadprod 103 yyvals;
private yyprod104 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod104 yyvals = yybadprod 104 yyvals;
private yyprod105 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod105 yyvals = yybadprod 105 yyvals;
private yyprod106 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod106 yyvals = yybadprod 106 yyvals;
private yyprod107 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod107 yyvals = yybadprod 107 yyvals;
private yyprod108 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod108 yyvals = yybadprod 108 yyvals;
private yyprod109 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod109 yyvals = yybadprod 109 yyvals;
private yyprod110 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod110 yyvals = yybadprod 110 yyvals;
private yyprod111 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod111 yyvals = yybadprod 111 yyvals;
private yyprod112 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTjtoken (yy1), yyvs);
private yyprod112 yyvals = yybadprod 112 yyvals;
private yyprod113 ((_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce113 yy1}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod113 yyvals = yybadprod 113 yyvals;
private yyprod114 ((_, (YYNTjtokens yy2)):(_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce114 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod114 yyvals = yybadprod 114 yyvals;
private yyprod115 ((_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce115 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod115 yyvals = yybadprod 115 yyvals;
private yyprod116 ((_, (YYNTjtokens yy4)):(_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce116 yy1 yy2 yy3 yy4}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod116 yyvals = yybadprod 116 yyvals;
private yyprod117 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce117 yy1 yy2}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod117 yyvals = yybadprod 117 yyvals;
private yyprod118 ((_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce118 yy1 yy2 yy3}; YYM.pure (YYNTjtokens yyr, yyvs)};
private yyprod118 yyvals = yybadprod 118 yyvals;
private yyprod119 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce119 yy1}; YYM.pure (YYNTdocumentation yyr, yyvs)};
private yyprod119 yyvals = yybadprod 119 yyvals;
private yyprod120 ((_, (YYNTtypedef yy1)):yyvs) =  do { let {!yyr = reduce120 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod120 yyvals = yybadprod 120 yyvals;
private yyprod121 ((_, (YYNTdatadef yy1)):yyvs) =  do { let {!yyr = reduce121 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod121 yyvals = yybadprod 121 yyvals;
private yyprod122 ((_, (YYNTclassdef yy1)):yyvs) =  do { let {!yyr = reduce122 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod122 yyvals = yybadprod 122 yyvals;
private yyprod123 ((_, (YYNTinstdef yy1)):yyvs) =  do { let {!yyr = reduce123 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod123 yyvals = yybadprod 123 yyvals;
private yyprod124 ((_, (YYNTderivedef yy1)):yyvs) =  do { let {!yyr = reduce124 yy1}; YYM.pure (YYNTpublicdefinition yyr, yyvs)};
private yyprod124 yyvals = yybadprod 124 yyvals;
private yyprod125 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTpublicdefinition (yy1), yyvs);
private yyprod125 yyvals = yybadprod 125 yyvals;
private yyprod126 ((_, (YYNTdplocaldef yy1)):yyvs) = YYM.pure (YYNTlocaldefs (yy1), yyvs);
private yyprod126 yyvals = yybadprod 126 yyvals;
private yyprod127 ((_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce127 yy1 yy2}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod127 yyvals = yybadprod 127 yyvals;
private yyprod128 ((_, (YYNTlocaldefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce128 yy1 yy2 yy3}; YYM.pure (YYNTlocaldefs yyr, yyvs)};
private yyprod128 yyvals = yybadprod 128 yyvals;
private yyprod129 ((_, (YYNTannotation yy1)):yyvs) = YYM.pure (YYNTlocaldef (yy1), yyvs);
private yyprod129 yyvals = yybadprod 129 yyvals;
private yyprod130 ((_, (YYNTnativedef yy1)):yyvs) =  do { let {!yyr = reduce130 yy1}; YYM.pure (YYNTlocaldef yyr, yyvs)};
private yyprod130 yyvals = yybadprod 130 yyvals;
private yyprod131 ((_, (YYNTfundef yy1)):yyvs) = YYM.pure (YYNTlocaldef (yy1), yyvs);
private yyprod131 yyvals = yybadprod 131 yyvals;
private yyprod132 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.pure (YYNTplocaldef (yy1), yyvs);
private yyprod132 yyvals = yybadprod 132 yyvals;
private yyprod133 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce133 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod133 yyvals = yybadprod 133 yyvals;
private yyprod134 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce134 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod134 yyvals = yybadprod 134 yyvals;
private yyprod135 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce135 yy1 yy2}; YYM.pure (YYNTplocaldef yyr, yyvs)};
private yyprod135 yyvals = yybadprod 135 yyvals;
private yyprod136 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce136 yy1}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod136 yyvals = yybadprod 136 yyvals;
private yyprod137 ((_, (YYNTdplocaldef yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce137 yy1 yy2}; YYM.pure (YYNTdplocaldef yyr, yyvs)};
private yyprod137 yyvals = yybadprod 137 yyvals;
private yyprod138 ((_, (YYNTplocaldef yy1)):yyvs) = YYM.pure (YYNTdplocaldef (yy1), yyvs);
private yyprod138 yyvals = yybadprod 138 yyvals;
private yyprod139 ((_, (YYNTannotation yy1)):yyvs) = YYM.pure (YYNTletdef (yy1), yyvs);
private yyprod139 yyvals = yybadprod 139 yyvals;
private yyprod140 ((_, (YYNTfundef yy1)):yyvs) = YYM.pure (YYNTletdef (yy1), yyvs);
private yyprod140 yyvals = yybadprod 140 yyvals;
private yyprod141 ((_, (YYNTletdef yy1)):yyvs) = YYM.pure (YYNTletdefs (yy1), yyvs);
private yyprod141 yyvals = yybadprod 141 yyvals;
private yyprod142 ((_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce142 yy1 yy2}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod142 yyvals = yybadprod 142 yyvals;
private yyprod143 ((_, (YYNTletdefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce143 yy1 yy2 yy3}; YYM.pure (YYNTletdefs yyr, yyvs)};
private yyprod143 yyvals = yybadprod 143 yyvals;
private yyprod144 ((_, (YYNTimportliste yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce144 yy1 yy2 yy3}; YYM.pure (YYNTimport yyr, yyvs)};
private yyprod144 yyvals = yybadprod 144 yyvals;
private yyprod145 ((_, (YYNTimportliste yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce145 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod145 yyvals = yybadprod 145 yyvals;
private yyprod146 ((_, (YYNTimportliste yy4)):(_, (YYTok yy3)):(_, (YYNTmodulename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce146 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimport yyr, yyvs)};
private yyprod146 yyvals = yybadprod 146 yyvals;
private yyprod147 yyvs =  do { let {!yyr = reduce147 }; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod148 ((_, (YYTok yy4)):(_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce148 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod148 yyvals = yybadprod 148 yyvals;
private yyprod149 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce149 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod149 yyvals = yybadprod 149 yyvals;
private yyprod150 ((_, (YYTok yy3)):(_, (YYNTimportspecs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce150 yy1 yy2 yy3}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod150 yyvals = yybadprod 150 yyvals;
private yyprod151 ((_, (YYNTimportliste yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce151 yy1 yy2}; YYM.pure (YYNTimportliste yyr, yyvs)};
private yyprod151 yyvals = yybadprod 151 yyvals;
private yyprod152 ((_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce152 yy1}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod152 yyvals = yybadprod 152 yyvals;
private yyprod153 ((_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce153 yy1 yy2}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod153 yyvals = yybadprod 153 yyvals;
private yyprod154 ((_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce154 yy1 yy2 yy3}; YYM.pure (YYNTimportspecs yyr, yyvs)};
private yyprod154 yyvals = yybadprod 154 yyvals;
private yyprod155 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce155 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod155 yyvals = yybadprod 155 yyvals;
private yyprod156 ((_, (YYTok yy4)):(_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce156 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod156 yyvals = yybadprod 156 yyvals;
private yyprod157 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce157 yy1 yy2 yy3}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod157 yyvals = yybadprod 157 yyvals;
private yyprod158 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce158 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod158 yyvals = yybadprod 158 yyvals;
private yyprod159 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce159 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod159 yyvals = yybadprod 159 yyvals;
private yyprod160 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce160 yy1}; YYM.pure (YYNTimportitem yyr, yyvs)};
private yyprod160 yyvals = yybadprod 160 yyvals;
private yyprod161 ((_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce161 yy1}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod161 yyvals = yybadprod 161 yyvals;
private yyprod162 ((_, (YYNTalias yy2)):(_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce162 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod162 yyvals = yybadprod 162 yyvals;
private yyprod163 ((_, (YYNTimportspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce163 yy1 yy2}; YYM.pure (YYNTimportspec yyr, yyvs)};
private yyprod163 yyvals = yybadprod 163 yyvals;
private yyprod164 ((_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce164 yy1}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod164 yyvals = yybadprod 164 yyvals;
private yyprod165 ((_, (YYNTalias yy2)):(_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce165 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod165 yyvals = yybadprod 165 yyvals;
private yyprod166 ((_, (YYNTmemspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce166 yy1 yy2}; YYM.pure (YYNTmemspec yyr, yyvs)};
private yyprod166 yyvals = yybadprod 166 yyvals;
private yyprod167 ((_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce167 yy1}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod167 yyvals = yybadprod 167 yyvals;
private yyprod168 ((_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce168 yy1 yy2}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod168 yyvals = yybadprod 168 yyvals;
private yyprod169 ((_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce169 yy1 yy2 yy3}; YYM.pure (YYNTmemspecs yyr, yyvs)};
private yyprod169 yyvals = yybadprod 169 yyvals;
private yyprod170 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod170 yyvals = yybadprod 170 yyvals;
private yyprod171 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTalias (yy1), yyvs);
private yyprod171 yyvals = yybadprod 171 yyvals;
private yyprod172 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce172 yy1 ;YYM.pure (YYNTalias yyr, yyvs)};
private yyprod172 yyvals = yybadprod 172 yyvals;
private yyprod173 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarid (yy1), yyvs);
private yyprod173 yyvals = yybadprod 173 yyvals;
private yyprod174 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvaridkw (yy1), yyvs);
private yyprod174 yyvals = yybadprod 174 yyvals;
private yyprod175 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce175 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod175 yyvals = yybadprod 175 yyvals;
private yyprod176 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce176 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod176 yyvals = yybadprod 176 yyvals;
private yyprod177 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce177 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod177 yyvals = yybadprod 177 yyvals;
private yyprod178 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce178 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod178 yyvals = yybadprod 178 yyvals;
private yyprod179 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce179 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod179 yyvals = yybadprod 179 yyvals;
private yyprod180 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce180 yy1}; YYM.pure (YYNTvaridkw yyr, yyvs)};
private yyprod180 yyvals = yybadprod 180 yyvals;
private yyprod181 ((_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce181 yy1}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod181 yyvals = yybadprod 181 yyvals;
private yyprod182 ((_, (YYNTqvarids yy3)):(_, (YYTok yy2)):(_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce182 yy1 yy2 yy3}; YYM.pure (YYNTqvarids yyr, yyvs)};
private yyprod182 yyvals = yybadprod 182 yyvals;
private yyprod183 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce183 yy1 yy2 yy3}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod183 yyvals = yybadprod 183 yyvals;
private yyprod184 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce184 yy1 yy2}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod184 yyvals = yybadprod 184 yyvals;
private yyprod185 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce185 yy1}; YYM.pure (YYNTqvarid yyr, yyvs)};
private yyprod185 yyvals = yybadprod 185 yyvals;
private yyprod186 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce186 yy1 yy2 yy3}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod186 yyvals = yybadprod 186 yyvals;
private yyprod187 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce187 yy1 yy2}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod187 yyvals = yybadprod 187 yyvals;
private yyprod188 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce188 yy1}; YYM.pure (YYNTqconid yyr, yyvs)};
private yyprod188 yyvals = yybadprod 188 yyvals;
private yyprod189 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod189 yyvals = yybadprod 189 yyvals;
private yyprod190 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTvarop (yy1), yyvs);
private yyprod190 yyvals = yybadprod 190 yyvals;
private yyprod191 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce191 yy1 yy2 yy3}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod191 yyvals = yybadprod 191 yyvals;
private yyprod192 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce192 yy1 yy2}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod192 yyvals = yybadprod 192 yyvals;
private yyprod193 ((_, (YYNTvarop yy1)):yyvs) =  do { let {!yyr = reduce193 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod193 yyvals = yybadprod 193 yyvals;
private yyprod194 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce194 yy1}; YYM.pure (YYNTqvarop yyr, yyvs)};
private yyprod194 yyvals = yybadprod 194 yyvals;
private yyprod195 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNToperator (yy1), yyvs);
private yyprod195 yyvals = yybadprod 195 yyvals;
private yyprod196 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod196 yyvals = yybadprod 196 yyvals;
private yyprod197 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTunop (yy1), yyvs);
private yyprod197 yyvals = yybadprod 197 yyvals;
private yyprod198 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce198 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod198 yyvals = yybadprod 198 yyvals;
private yyprod199 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce199 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod199 yyvals = yybadprod 199 yyvals;
private yyprod200 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce200 yy1 yy2 ;YYM.pure (YYNTfixity yyr, yyvs)};
private yyprod200 yyvals = yybadprod 200 yyvals;
private yyprod201 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce201 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod201 yyvals = yybadprod 201 yyvals;
private yyprod202 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce202 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod202 yyvals = yybadprod 202 yyvals;
private yyprod203 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce203 yy1}; YYM.pure (YYNTopstring yyr, yyvs)};
private yyprod203 yyvals = yybadprod 203 yyvals;
private yyprod204 ((_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce204 yy1}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod204 yyvals = yybadprod 204 yyvals;
private yyprod205 ((_, (YYNToperators yy2)):(_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce205 yy1 yy2}; YYM.pure (YYNToperators yyr, yyvs)};
private yyprod205 yyvals = yybadprod 205 yyvals;
private yyprod206 ((_, (YYNToperators yy2)):(_, (YYNTfixity yy1)):yyvs) =  do { let {!yyr = reduce206 yy1 yy2}; YYM.pure (YYNTinfix yyr, yyvs)};
private yyprod206 yyvals = yybadprod 206 yyvals;
private yyprod207 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTannoitems yy1)):yyvs) =  do { let {!yyr = reduce207 yy1 yy2 yy3}; YYM.pure (YYNTannotation yyr, yyvs)};
private yyprod207 yyvals = yybadprod 207 yyvals;
private yyprod208 ((_, (YYNTvarid yy1)):yyvs) = YYM.pure (YYNTannoitem (yy1), yyvs);
private yyprod208 yyvals = yybadprod 208 yyvals;
private yyprod209 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce209 yy1 yy2 yy3 ;YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod209 yyvals = yybadprod 209 yyvals;
private yyprod210 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce210 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod210 yyvals = yybadprod 210 yyvals;
private yyprod211 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce211 yy1 yy2 yy3}; YYM.pure (YYNTannoitem yyr, yyvs)};
private yyprod211 yyvals = yybadprod 211 yyvals;
private yyprod212 ((_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce212 yy1}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod212 yyvals = yybadprod 212 yyvals;
private yyprod213 ((_, (YYNTannoitems yy3)):(_, (YYTok yy2)):(_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce213 yy1 yy2 yy3}; YYM.pure (YYNTannoitems yyr, yyvs)};
private yyprod213 yyvals = yybadprod 213 yyvals;
private yyprod214 ((_, (YYNTimpurenativedef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce214 yy1 yy2}; YYM.pure (YYNTnativedef yyr, yyvs)};
private yyprod214 yyvals = yybadprod 214 yyvals;
private yyprod215 ((_, (YYNTimpurenativedef yy1)):yyvs) = YYM.pure (YYNTnativedef (yy1), yyvs);
private yyprod215 yyvals = yybadprod 215 yyvals;
private yyprod216 ((_, (YYNTannoitem yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod216 yyvals = yybadprod 216 yyvals;
private yyprod217 ((_, (YYNTunop yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod217 yyvals = yybadprod 217 yyvals;
private yyprod218 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTfitem (yy1), yyvs);
private yyprod218 yyvals = yybadprod 218 yyvals;
private yyprod219 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce219 yy1 ;YYM.pure (YYNTfitem yyr, yyvs)};
private yyprod219 yyvals = yybadprod 219 yyvals;
private yyprod220 ((_, (YYNTnativename yy1)):yyvs) = YYM.pure (YYNTjitem (yy1), yyvs);
private yyprod220 yyvals = yybadprod 220 yyvals;
private yyprod221 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce221 yy1 ;YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod221 yyvals = yybadprod 221 yyvals;
private yyprod222 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce222 yy1}; YYM.pure (YYNTjitem yyr, yyvs)};
private yyprod222 yyvals = yybadprod 222 yyvals;
private yyprod223 ((_, (YYNTgargs yy3)):(_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce223 yy1 yy2 yy3}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod223 yyvals = yybadprod 223 yyvals;
private yyprod224 ((_, (YYNTjitem yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce224 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod224 yyvals = yybadprod 224 yyvals;
private yyprod225 ((_, (YYNTgargs yy2)):(_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce225 yy1 yy2}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod225 yyvals = yybadprod 225 yyvals;
private yyprod226 ((_, (YYNTfitem yy1)):yyvs) =  do { let {!yyr = reduce226 yy1}; YYM.pure (YYNTmethodspec yyr, yyvs)};
private yyprod226 yyvals = yybadprod 226 yyvals;
private yyprod227 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce227 yy1 yy2 yy3}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod227 yyvals = yybadprod 227 yyvals;
private yyprod228 ((_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce228 yy1}; YYM.pure (YYNTsigex yyr, yyvs)};
private yyprod228 yyvals = yybadprod 228 yyvals;
private yyprod229 ((_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce229 yy1}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod229 yyvals = yybadprod 229 yyvals;
private yyprod230 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce230 yy1 yy2 yy3}; YYM.pure (YYNTsigexs yyr, yyvs)};
private yyprod230 yyvals = yybadprod 230 yyvals;
private yyprod231 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTmethodspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce231 yy1 yy2 yy3 yy4}; YYM.pure (YYNTimpurenativedef yyr, yyvs)};
private yyprod231 yyvals = yybadprod 231 yyvals;
private yyprod232 ((_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce232 yy1}; YYM.pure (YYNTboundvars yyr, yyvs)};
private yyprod232 yyvals = yybadprod 232 yyvals;
private yyprod233 ((_, (YYNTboundvars yy2)):(_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce233 yy1 yy2}; YYM.pure (YYNTboundvars yyr, yyvs)};
private yyprod233 yyvals = yybadprod 233 yyvals;
private yyprod234 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce234 yy1}; YYM.pure (YYNTboundvar yyr, yyvs)};
private yyprod234 yyvals = yybadprod 234 yyvals;
private yyprod235 ((_, (YYNTforall yy1)):yyvs) = YYM.pure (YYNTsigma (yy1), yyvs);
private yyprod235 yyvals = yybadprod 235 yyvals;
private yyprod236 ((_, (YYNTrho yy1)):yyvs) =  do { let {!yyr = reduce236 yy1}; YYM.pure (YYNTsigma yyr, yyvs)};
private yyprod236 yyvals = yybadprod 236 yyvals;
private yyprod237 ((_, (YYNTrho yy4)):(_, (YYNTmbdot yy3)):(_, (YYNTboundvars yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce237 yy1 yy2 yy3 yy4}; YYM.pure (YYNTforall yyr, yyvs)};
private yyprod237 yyvals = yybadprod 237 yyvals;
private yyprod238 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTmbdot (yy1), yyvs);
private yyprod238 yyvals = yybadprod 238 yyvals;
private yyprod239 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce239 yy1 ;YYM.pure (YYNTmbdot yyr, yyvs)};
private yyprod239 yyvals = yybadprod 239 yyvals;
private yyprod240 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { yyr <- reduce240 yy1 yy2 yy3 ;YYM.pure (YYNTrho yyr, yyvs)};
private yyprod240 yyvals = yybadprod 240 yyvals;
private yyprod241 ((_, (YYNTrhofun yy1)):yyvs) = YYM.pure (YYNTrho (yy1), yyvs);
private yyprod241 yyvals = yybadprod 241 yyvals;
private yyprod242 ((_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce242 yy1}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod242 yyvals = yybadprod 242 yyvals;
private yyprod243 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce243 yy1 yy2 yy3}; YYM.pure (YYNTrhofun yyr, yyvs)};
private yyprod243 yyvals = yybadprod 243 yyvals;
private yyprod244 ((_, (YYNTtapp yy1)):yyvs) = YYM.pure (YYNTtau (yy1), yyvs);
private yyprod244 yyvals = yybadprod 244 yyvals;
private yyprod245 ((_, (YYNTforall yy1)):yyvs) =  do { let {!yyr = reduce245 yy1}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod245 yyvals = yybadprod 245 yyvals;
private yyprod246 ((_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce246 yy1 yy2 yy3}; YYM.pure (YYNTtau yyr, yyvs)};
private yyprod246 yyvals = yybadprod 246 yyvals;
private yyprod247 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce247 yy1}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod247 yyvals = yybadprod 247 yyvals;
private yyprod248 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce248 yy1 yy2 yy3}; YYM.pure (YYNTtauSC yyr, yyvs)};
private yyprod248 yyvals = yybadprod 248 yyvals;
private yyprod249 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce249 yy1}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod249 yyvals = yybadprod 249 yyvals;
private yyprod250 ((_, (YYNTtauSB yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce250 yy1 yy2 yy3}; YYM.pure (YYNTtauSB yyr, yyvs)};
private yyprod250 yyvals = yybadprod 250 yyvals;
private yyprod251 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { let {!yyr = reduce251 yy1}; YYM.pure (YYNTtapp yyr, yyvs)};
private yyprod251 yyvals = yybadprod 251 yyvals;
private yyprod252 ((_, (YYNTtyvar yy1)):yyvs) = YYM.pure (YYNTsimpletype (yy1), yyvs);
private yyprod252 yyvals = yybadprod 252 yyvals;
private yyprod253 ((_, (YYNTtyname yy1)):yyvs) =  do { let {!yyr = reduce253 yy1}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod253 yyvals = yybadprod 253 yyvals;
private yyprod254 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce254 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod254 yyvals = yybadprod 254 yyvals;
private yyprod255 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce255 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod255 yyvals = yybadprod 255 yyvals;
private yyprod256 ((_, (YYTok yy5)):(_, (YYNTtauSB yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce256 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod256 yyvals = yybadprod 256 yyvals;
private yyprod257 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce257 yy1 yy2 yy3}; YYM.pure (YYNTsimpletype yyr, yyvs)};
private yyprod257 yyvals = yybadprod 257 yyvals;
private yyprod258 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce258 yy1}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod258 yyvals = yybadprod 258 yyvals;
private yyprod259 ((_, (YYTok yy5)):(_, (YYNTkind yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce259 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtyvar yyr, yyvs)};
private yyprod259 yyvals = yybadprod 259 yyvals;
private yyprod260 ((_, (YYNTqconid yy1)):yyvs) = YYM.pure (YYNTtyname (yy1), yyvs);
private yyprod260 yyvals = yybadprod 260 yyvals;
private yyprod261 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce261 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod261 yyvals = yybadprod 261 yyvals;
private yyprod262 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce262 yy1 yy2}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod262 yyvals = yybadprod 262 yyvals;
private yyprod263 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce263 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod263 yyvals = yybadprod 263 yyvals;
private yyprod264 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce264 yy1 yy2 yy3}; YYM.pure (YYNTtyname yyr, yyvs)};
private yyprod264 yyvals = yybadprod 264 yyvals;
private yyprod265 ((_, (YYNTkind yy3)):(_, (YYTok yy2)):(_, (YYNTsimplekind yy1)):yyvs) =  do { let {!yyr = reduce265 yy1 yy2 yy3}; YYM.pure (YYNTkind yyr, yyvs)};
private yyprod265 yyvals = yybadprod 265 yyvals;
private yyprod266 ((_, (YYNTsimplekind yy1)):yyvs) = YYM.pure (YYNTkind (yy1), yyvs);
private yyprod266 yyvals = yybadprod 266 yyvals;
private yyprod267 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce267 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod267 yyvals = yybadprod 267 yyvals;
private yyprod268 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce268 yy1 ;YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod268 yyvals = yybadprod 268 yyvals;
private yyprod269 ((_, (YYTok yy3)):(_, (YYNTkind yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce269 yy1 yy2 yy3}; YYM.pure (YYNTsimplekind yyr, yyvs)};
private yyprod269 yyvals = yybadprod 269 yyvals;
private yyprod270 ((_, (YYNTtyvar yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce270 yy1 yy2}; YYM.pure (YYNTscontext yyr, yyvs)};
private yyprod270 yyvals = yybadprod 270 yyvals;
private yyprod271 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce271 yy1}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod271 yyvals = yybadprod 271 yyvals;
private yyprod272 ((_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce272 yy1 yy2}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod272 yyvals = yybadprod 272 yyvals;
private yyprod273 ((_, (YYNTscontexts yy3)):(_, (YYTok yy2)):(_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce273 yy1 yy2 yy3}; YYM.pure (YYNTscontexts yyr, yyvs)};
private yyprod273 yyvals = yybadprod 273 yyvals;
private yyprod274 ((_, (YYNTscontext yy1)):yyvs) =  do { let {!yyr = reduce274 yy1}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod274 yyvals = yybadprod 274 yyvals;
private yyprod275 ((_, (YYTok yy3)):(_, (YYNTscontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce275 yy1 yy2 yy3}; YYM.pure (YYNTccontext yyr, yyvs)};
private yyprod275 yyvals = yybadprod 275 yyvals;
private yyprod276 ((_, (YYNTwheredef yy6)):(_, (YYNTtyvar yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce276 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod276 yyvals = yybadprod 276 yyvals;
private yyprod277 ((_, (YYNTwheredef yy3)):(_, (YYNTccontext yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce277 yy1 yy2 yy3 ;YYM.pure (YYNTclassdef yyr, yyvs)};
private yyprod277 yyvals = yybadprod 277 yyvals;
private yyprod278 ((_, (YYNTsimpletype yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce278 yy1 yy2}; YYM.pure (YYNTsicontext yyr, yyvs)};
private yyprod278 yyvals = yybadprod 278 yyvals;
private yyprod279 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce279 yy1}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod279 yyvals = yybadprod 279 yyvals;
private yyprod280 ((_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce280 yy1 yy2}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod280 yyvals = yybadprod 280 yyvals;
private yyprod281 ((_, (YYNTsicontexts yy3)):(_, (YYTok yy2)):(_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce281 yy1 yy2 yy3}; YYM.pure (YYNTsicontexts yyr, yyvs)};
private yyprod281 yyvals = yybadprod 281 yyvals;
private yyprod282 ((_, (YYNTsicontext yy1)):yyvs) =  do { let {!yyr = reduce282 yy1}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod282 yyvals = yybadprod 282 yyvals;
private yyprod283 ((_, (YYTok yy3)):(_, (YYNTsicontexts yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce283 yy1 yy2 yy3}; YYM.pure (YYNTicontext yyr, yyvs)};
private yyprod283 yyvals = yybadprod 283 yyvals;
private yyprod284 ((_, (YYNTsimpletype yy4)):(_, (YYNTtyname yy3)):(_, (YYTok yy2)):(_, (YYNTicontext yy1)):yyvs) =  do { let {!yyr = reduce284 yy1 yy2 yy3 yy4}; YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod284 yyvals = yybadprod 284 yyvals;
private yyprod285 ((_, (YYNTicontext yy1)):yyvs) =  do { yyr <- reduce285 yy1 ;YYM.pure (YYNTinsthead yyr, yyvs)};
private yyprod285 yyvals = yybadprod 285 yyvals;
private yyprod286 ((_, (YYNTwheredef yy3)):(_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce286 yy1 yy2 yy3}; YYM.pure (YYNTinstdef yyr, yyvs)};
private yyprod286 yyvals = yybadprod 286 yyvals;
private yyprod287 ((_, (YYNTinsthead yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce287 yy1 yy2}; YYM.pure (YYNTderivedef yyr, yyvs)};
private yyprod287 yyvals = yybadprod 287 yyvals;
private yyprod288 ((_, (YYNTwheredef yy2)):(_, (YYNTdatainit yy1)):yyvs) =  do { let {!yyr = reduce288 yy1 yy2}; YYM.pure (YYNTdatadef yyr, yyvs)};
private yyprod288 yyvals = yybadprod 288 yyvals;
private yyprod289 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce289 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod289 yyvals = yybadprod 289 yyvals;
private yyprod290 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce290 yy1 yy2}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod290 yyvals = yybadprod 290 yyvals;
private yyprod291 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce291 yy1}; YYM.pure (YYNTnativepur yyr, yyvs)};
private yyprod291 yyvals = yybadprod 291 yyvals;
private yyprod292 ((_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce292 yy1}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod292 yyvals = yybadprod 292 yyvals;
private yyprod293 ((_, (YYNTgargs yy2)):(_, (YYNTnativename yy1)):yyvs) =  do { let {!yyr = reduce293 yy1 yy2}; YYM.pure (YYNTnativespec yyr, yyvs)};
private yyprod293 yyvals = yybadprod 293 yyvals;
private yyprod294 ((_, (YYTok yy3)):(_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce294 yy1 yy2 yy3}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod294 yyvals = yybadprod 294 yyvals;
private yyprod295 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce295 yy1 yy2}; YYM.pure (YYNTgargs yyr, yyvs)};
private yyprod295 yyvals = yybadprod 295 yyvals;
private yyprod296 ((_, (YYNTnativespec yy5)):(_, (YYNTnativepur yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce296 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod296 yyvals = yybadprod 296 yyvals;
private yyprod297 ((_, (YYNTnativespec yy6)):(_, (YYNTnativepur yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce297 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod297 yyvals = yybadprod 297 yyvals;
private yyprod298 ((_, (YYNTdalts yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce298 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod298 yyvals = yybadprod 298 yyvals;
private yyprod299 ((_, (YYNTdalts yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce299 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod299 yyvals = yybadprod 299 yyvals;
private yyprod300 ((_, (YYNTdalt yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce300 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod300 yyvals = yybadprod 300 yyvals;
private yyprod301 ((_, (YYNTdalt yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce301 yy1 yy2 yy3 yy4}; YYM.pure (YYNTdatainit yyr, yyvs)};
private yyprod301 yyvals = yybadprod 301 yyvals;
private yyprod302 ((_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce302 yy1}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod302 yyvals = yybadprod 302 yyvals;
private yyprod303 ((_, (YYNTdvars yy2)):(_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce303 yy1 yy2}; YYM.pure (YYNTdvars yyr, yyvs)};
private yyprod303 yyvals = yybadprod 303 yyvals;
private yyprod304 ((_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce304 yy1}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod304 yyvals = yybadprod 304 yyvals;
private yyprod305 ((_, (YYNTdalts yy3)):(_, (YYTok yy2)):(_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce305 yy1 yy2 yy3}; YYM.pure (YYNTdalts yyr, yyvs)};
private yyprod305 yyvals = yybadprod 305 yyvals;
private yyprod306 ((_, (YYNTvisdalt yy1)):yyvs) = YYM.pure (YYNTdalt (yy1), yyvs);
private yyprod306 yyvals = yybadprod 306 yyvals;
private yyprod307 ((_, (YYTok yy2)):(_, (YYNTvisdalt yy1)):yyvs) =  do { let {!yyr = reduce307 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod307 yyvals = yybadprod 307 yyvals;
private yyprod308 ((_, (YYNTvisdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce308 yy1 yy2}; YYM.pure (YYNTdalt yyr, yyvs)};
private yyprod308 yyvals = yybadprod 308 yyvals;
private yyprod309 ((_, (YYNTstrictdalt yy1)):yyvs) = YYM.pure (YYNTvisdalt (yy1), yyvs);
private yyprod309 yyvals = yybadprod 309 yyvals;
private yyprod310 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce310 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod310 yyvals = yybadprod 310 yyvals;
private yyprod311 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce311 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod311 yyvals = yybadprod 311 yyvals;
private yyprod312 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce312 yy1 yy2}; YYM.pure (YYNTvisdalt yyr, yyvs)};
private yyprod312 yyvals = yybadprod 312 yyvals;
private yyprod313 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce313 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod313 yyvals = yybadprod 313 yyvals;
private yyprod314 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce314 yy1 yy2}; YYM.pure (YYNTstrictdalt yyr, yyvs)};
private yyprod314 yyvals = yybadprod 314 yyvals;
private yyprod315 ((_, (YYNTsimpledalt yy1)):yyvs) = YYM.pure (YYNTstrictdalt (yy1), yyvs);
private yyprod315 yyvals = yybadprod 315 yyvals;
private yyprod316 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce316 yy1}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod316 yyvals = yybadprod 316 yyvals;
private yyprod317 ((_, (YYTok yy4)):(_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce317 yy1 yy2 yy3 yy4}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod317 yyvals = yybadprod 317 yyvals;
private yyprod318 ((_, (YYNTcontypes yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce318 yy1 yy2}; YYM.pure (YYNTsimpledalt yyr, yyvs)};
private yyprod318 yyvals = yybadprod 318 yyvals;
private yyprod319 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { yyr <- reduce319 yy1 ;YYM.pure (YYNTcontypes yyr, yyvs)};
private yyprod319 yyvals = yybadprod 319 yyvals;
private yyprod320 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce320 yy1}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod320 yyvals = yybadprod 320 yyvals;
private yyprod321 ((_, (YYNTsimpletypes yy2)):(_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce321 yy1 yy2}; YYM.pure (YYNTsimpletypes yyr, yyvs)};
private yyprod321 yyvals = yybadprod 321 yyvals;
private yyprod322 ((_, (YYNTconfld yy1)):yyvs) = YYM.pure (YYNTconflds (yy1), yyvs);
private yyprod322 yyvals = yybadprod 322 yyvals;
private yyprod323 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce323 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod323 yyvals = yybadprod 323 yyvals;
private yyprod324 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce324 yy1 yy2}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod324 yyvals = yybadprod 324 yyvals;
private yyprod325 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce325 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod325 yyvals = yybadprod 325 yyvals;
private yyprod326 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce326 yy1 yy2 yy3}; YYM.pure (YYNTconflds yyr, yyvs)};
private yyprod326 yyvals = yybadprod 326 yyvals;
private yyprod327 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTfldids yy1)):yyvs) =  do { let {!yyr = reduce327 yy1 yy2 yy3}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod327 yyvals = yybadprod 327 yyvals;
private yyprod328 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYNTfldids yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce328 yy1 yy2 yy3 yy4}; YYM.pure (YYNTconfld yyr, yyvs)};
private yyprod328 yyvals = yybadprod 328 yyvals;
private yyprod329 ((_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce329 yy1}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod329 yyvals = yybadprod 329 yyvals;
private yyprod330 ((_, (YYNTfldids yy3)):(_, (YYTok yy2)):(_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce330 yy1 yy2 yy3}; YYM.pure (YYNTfldids yyr, yyvs)};
private yyprod330 yyvals = yybadprod 330 yyvals;
private yyprod331 ((_, (YYNTstrictfldid yy1)):yyvs) = YYM.pure (YYNTfldid (yy1), yyvs);
private yyprod331 yyvals = yybadprod 331 yyvals;
private yyprod332 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce332 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod332 yyvals = yybadprod 332 yyvals;
private yyprod333 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce333 yy1 yy2}; YYM.pure (YYNTfldid yyr, yyvs)};
private yyprod333 yyvals = yybadprod 333 yyvals;
private yyprod334 ((_, (YYNTplainfldid yy1)):yyvs) = YYM.pure (YYNTstrictfldid (yy1), yyvs);
private yyprod334 yyvals = yybadprod 334 yyvals;
private yyprod335 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce335 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod335 yyvals = yybadprod 335 yyvals;
private yyprod336 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce336 yy1 yy2}; YYM.pure (YYNTstrictfldid yyr, yyvs)};
private yyprod336 yyvals = yybadprod 336 yyvals;
private yyprod337 ((_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce337 yy1 ;YYM.pure (YYNTplainfldid yyr, yyvs)};
private yyprod337 yyvals = yybadprod 337 yyvals;
private yyprod338 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce338 yy1 yy2 yy3 yy4}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod338 yyvals = yybadprod 338 yyvals;
private yyprod339 ((_, (YYNTsigma yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce339 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTtypedef yyr, yyvs)};
private yyprod339 yyvals = yybadprod 339 yyvals;
private yyprod340 yyvs =  do { let {!yyr = reduce340 }; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod341 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce341 yy1 yy2 yy3}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod341 yyvals = yybadprod 341 yyvals;
private yyprod342 ((_, (YYTok yy4)):(_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce342 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwheredef yyr, yyvs)};
private yyprod342 yyvals = yybadprod 342 yyvals;
private yyprod343 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce343 yy1 yy2 yy3}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod343 yyvals = yybadprod 343 yyvals;
private yyprod344 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce344 yy1 yy2 yy3 yy4}; YYM.pure (YYNTwherelet yyr, yyvs)};
private yyprod344 yyvals = yybadprod 344 yyvals;
private yyprod345 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce345 yy1 yy2 yy3}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod345 yyvals = yybadprod 345 yyvals;
private yyprod346 ((_, (YYNTguards yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce346 yy1 yy2}; YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod346 yyvals = yybadprod 346 yyvals;
private yyprod347 ((_, (YYNTwherelet yy2)):(_, (YYNTfundef yy1)):yyvs) =  do { yyr <- reduce347 yy1 yy2 ;YYM.pure (YYNTfundef yyr, yyvs)};
private yyprod347 yyvals = yybadprod 347 yyvals;
private yyprod348 ((_, (YYNTbinex yy1)):yyvs) =  do { yyr <- reduce348 yy1 ;YYM.pure (YYNTfunhead yyr, yyvs)};
private yyprod348 yyvals = yybadprod 348 yyvals;
private yyprod349 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce349 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod349 yyvals = yybadprod 349 yyvals;
private yyprod350 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce350 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod350 yyvals = yybadprod 350 yyvals;
private yyprod351 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce351 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod351 yyvals = yybadprod 351 yyvals;
private yyprod352 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce352 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod352 yyvals = yybadprod 352 yyvals;
private yyprod353 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce353 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod353 yyvals = yybadprod 353 yyvals;
private yyprod354 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce354 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod354 yyvals = yybadprod 354 yyvals;
private yyprod355 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce355 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod355 yyvals = yybadprod 355 yyvals;
private yyprod356 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce356 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod356 yyvals = yybadprod 356 yyvals;
private yyprod357 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce357 yy1}; YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod357 yyvals = yybadprod 357 yyvals;
private yyprod358 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce358 yy1 ;YYM.pure (YYNTliteral yyr, yyvs)};
private yyprod358 yyvals = yybadprod 358 yyvals;
private yyprod359 ((_, (YYNTexpr yy1)):yyvs) = YYM.pure (YYNTpattern (yy1), yyvs);
private yyprod359 yyvals = yybadprod 359 yyvals;
private yyprod360 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod360 yyvals = yybadprod 360 yyvals;
private yyprod361 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTaeq (yy1), yyvs);
private yyprod361 yyvals = yybadprod 361 yyvals;
private yyprod362 ((_, (YYNTgqual yy1)):yyvs) = YYM.pure (YYNTlcqual (yy1), yyvs);
private yyprod362 yyvals = yybadprod 362 yyvals;
private yyprod363 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce363 yy1 yy2 yy3 ;YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod363 yyvals = yybadprod 363 yyvals;
private yyprod364 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce364 yy1 yy2 yy3 yy4}; YYM.pure (YYNTlcqual yyr, yyvs)};
private yyprod364 yyvals = yybadprod 364 yyvals;
private yyprod365 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce365 yy1}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod365 yyvals = yybadprod 365 yyvals;
private yyprod366 ((_, (YYNTlcquals yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce366 yy1 yy2 yy3}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod366 yyvals = yybadprod 366 yyvals;
private yyprod367 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce367 yy1 yy2}; YYM.pure (YYNTlcquals yyr, yyvs)};
private yyprod367 yyvals = yybadprod 367 yyvals;
private yyprod368 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce368 yy1}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod368 yyvals = yybadprod 368 yyvals;
private yyprod369 ((_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce369 yy1 yy2}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod369 yyvals = yybadprod 369 yyvals;
private yyprod370 ((_, (YYNTdodefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce370 yy1 yy2 yy3}; YYM.pure (YYNTdodefs yyr, yyvs)};
private yyprod370 yyvals = yybadprod 370 yyvals;
private yyprod371 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce371 yy1}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod371 yyvals = yybadprod 371 yyvals;
private yyprod372 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce372 yy1 yy2 yy3}; YYM.pure (YYNTgqual yyr, yyvs)};
private yyprod372 yyvals = yybadprod 372 yyvals;
private yyprod373 ((_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce373 yy1}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod373 yyvals = yybadprod 373 yyvals;
private yyprod374 ((_, (YYNTgquals yy3)):(_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce374 yy1 yy2 yy3}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod374 yyvals = yybadprod 374 yyvals;
private yyprod375 ((_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce375 yy1 yy2}; YYM.pure (YYNTgquals yyr, yyvs)};
private yyprod375 yyvals = yybadprod 375 yyvals;
private yyprod376 ((_, (YYNTexpr yy4)):(_, (YYNTaeq yy3)):(_, (YYNTgquals yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce376 yy1 yy2 yy3 yy4}; YYM.pure (YYNTguard yyr, yyvs)};
private yyprod376 yyvals = yybadprod 376 yyvals;
private yyprod377 ((_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce377 yy1}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod377 yyvals = yybadprod 377 yyvals;
private yyprod378 ((_, (YYNTguards yy2)):(_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce378 yy1 yy2}; YYM.pure (YYNTguards yyr, yyvs)};
private yyprod378 yyvals = yybadprod 378 yyvals;
private yyprod379 ((_, (YYNTexpr yy3)):(_, (YYNTaeq yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce379 yy1 yy2 yy3}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod379 yyvals = yybadprod 379 yyvals;
private yyprod380 ((_, (YYNTguards yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce380 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod380 yyvals = yybadprod 380 yyvals;
private yyprod381 ((_, (YYNTwherelet yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce381 yy1 yy2}; YYM.pure (YYNTcalt yyr, yyvs)};
private yyprod381 yyvals = yybadprod 381 yyvals;
private yyprod382 ((_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce382 yy1}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod382 yyvals = yybadprod 382 yyvals;
private yyprod383 ((_, (YYNTcalts yy3)):(_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce383 yy1 yy2 yy3}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod383 yyvals = yybadprod 383 yyvals;
private yyprod384 ((_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce384 yy1 yy2}; YYM.pure (YYNTcalts yyr, yyvs)};
private yyprod384 yyvals = yybadprod 384 yyvals;
private yyprod385 ((_, (YYNTlambdabody yy3)):(_, (YYNTapats yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce385 yy1 yy2 yy3}; YYM.pure (YYNTlambda yyr, yyvs)};
private yyprod385 yyvals = yybadprod 385 yyvals;
private yyprod386 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTlambdabody (yy1), yyvs);
private yyprod386 yyvals = yybadprod 386 yyvals;
private yyprod387 ((_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce387 yy1 yy2}; YYM.pure (YYNTlambdabody yyr, yyvs)};
private yyprod387 yyvals = yybadprod 387 yyvals;
private yyprod388 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce388 yy1 yy2 yy3}; YYM.pure (YYNTexpr yyr, yyvs)};
private yyprod388 yyvals = yybadprod 388 yyvals;
private yyprod389 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTexpr (yy1), yyvs);
private yyprod389 yyvals = yybadprod 389 yyvals;
private yyprod390 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce390 yy1 yy2}; YYM.pure (YYNTthenx yyr, yyvs)};
private yyprod390 yyvals = yybadprod 390 yyvals;
private yyprod391 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTthenx (yy1), yyvs);
private yyprod391 yyvals = yybadprod 391 yyvals;
private yyprod392 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce392 yy1 yy2}; YYM.pure (YYNTelsex yyr, yyvs)};
private yyprod392 yyvals = yybadprod 392 yyvals;
private yyprod393 ((_, (YYTok yy1)):yyvs) = YYM.pure (YYNTelsex (yy1), yyvs);
private yyprod393 yyvals = yybadprod 393 yyvals;
private yyprod394 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce394 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod394 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod394 yyvals = yybadprod 394 yyvals;
private yyprod395 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce395 yy1 yy2 yy3}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod395 ((_, (YYNTbinex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod395 yyvals = yybadprod 395 yyvals;
private yyprod396 ((_, (YYNTtopex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce396 yy1 yy2}; YYM.pure (YYNTbinex yyr, yyvs)};
private yyprod396 yyvals = yybadprod 396 yyvals;
private yyprod397 ((_, (YYNTtopex yy1)):yyvs) = YYM.pure (YYNTbinex (yy1), yyvs);
private yyprod397 yyvals = yybadprod 397 yyvals;
private yyprod398 ((_, (YYNTexpr yy6)):(_, (YYNTelsex yy5)):(_, (YYNTexpr yy4)):(_, (YYNTthenx yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce398 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod398 yyvals = yybadprod 398 yyvals;
private yyprod399 ((_, (YYTok yy6)):(_, (YYNTcalts yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce399 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod399 yyvals = yybadprod 399 yyvals;
private yyprod400 ((_, (YYNTexpr yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce400 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod400 yyvals = yybadprod 400 yyvals;
private yyprod401 ((_, (YYNTlambda yy1)):yyvs) = YYM.pure (YYNTtopex (yy1), yyvs);
private yyprod401 yyvals = yybadprod 401 yyvals;
private yyprod402 ((_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce402 yy1}; YYM.pure (YYNTtopex yyr, yyvs)};
private yyprod402 yyvals = yybadprod 402 yyvals;
private yyprod403 ((_, (YYNTunex yy1)):yyvs) = YYM.pure (YYNTappex (yy1), yyvs);
private yyprod403 yyvals = yybadprod 403 yyvals;
private yyprod404 ((_, (YYNTunex yy2)):(_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce404 yy1 yy2}; YYM.pure (YYNTappex yyr, yyvs)};
private yyprod404 yyvals = yybadprod 404 yyvals;
private yyprod405 ((_, (YYNTprimary yy1)):yyvs) = YYM.pure (YYNTunex (yy1), yyvs);
private yyprod405 yyvals = yybadprod 405 yyvals;
private yyprod406 ((_, (YYNTunex yy2)):(_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce406 yy1 yy2}; YYM.pure (YYNTunex yyr, yyvs)};
private yyprod406 yyvals = yybadprod 406 yyvals;
private yyprod407 ((_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce407 yy1}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod407 yyvals = yybadprod 407 yyvals;
private yyprod408 ((_, (YYNTapats yy2)):(_, (YYNTunex yy1)):yyvs) =  do { let {!yyr = reduce408 yy1 yy2}; YYM.pure (YYNTapats yyr, yyvs)};
private yyprod408 yyvals = yybadprod 408 yyvals;
private yyprod409 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce409 yy1}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod409 yyvals = yybadprod 409 yyvals;
private yyprod410 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce410 yy1 yy2}; YYM.pure (YYNTqualifiers yyr, yyvs)};
private yyprod410 yyvals = yybadprod 410 yyvals;
private yyprod411 ((_, (YYNTterm yy1)):yyvs) = YYM.pure (YYNTprimary (yy1), yyvs);
private yyprod411 yyvals = yybadprod 411 yyvals;
private yyprod412 ((_, (YYTok yy4)):(_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce412 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod412 yyvals = yybadprod 412 yyvals;
private yyprod413 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce413 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod413 yyvals = yybadprod 413 yyvals;
private yyprod414 ((_, (YYNToperator yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { yyr <- reduce414 yy1 yy2 yy3 ;YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod414 yyvals = yybadprod 414 yyvals;
private yyprod415 ((_, (YYNTunop yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce415 yy1 yy2 yy3}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod415 yyvals = yybadprod 415 yyvals;
private yyprod416 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce416 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod416 yyvals = yybadprod 416 yyvals;
private yyprod417 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce417 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod417 yyvals = yybadprod 417 yyvals;
private yyprod418 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce418 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod418 yyvals = yybadprod 418 yyvals;
private yyprod419 ((_, (YYTok yy4)):(_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce419 yy1 yy2 yy3 yy4}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod419 yyvals = yybadprod 419 yyvals;
private yyprod420 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce420 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod420 yyvals = yybadprod 420 yyvals;
private yyprod421 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce421 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod421 yyvals = yybadprod 421 yyvals;
private yyprod422 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce422 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod422 yyvals = yybadprod 422 yyvals;
private yyprod423 ((_, (YYTok yy5)):(_, (YYNTgetfields yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce423 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod423 yyvals = yybadprod 423 yyvals;
private yyprod424 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce424 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTprimary yyr, yyvs)};
private yyprod424 yyvals = yybadprod 424 yyvals;
private yyprod425 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce425 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod425 yyvals = yybadprod 425 yyvals;
private yyprod426 ((_, (YYNTliteral yy1)):yyvs) = YYM.pure (YYNTterm (yy1), yyvs);
private yyprod426 yyvals = yybadprod 426 yyvals;
private yyprod427 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce427 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod427 yyvals = yybadprod 427 yyvals;
private yyprod428 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce428 yy1}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod428 yyvals = yybadprod 428 yyvals;
private yyprod429 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce429 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod429 yyvals = yybadprod 429 yyvals;
private yyprod430 ((_, (YYTok yy4)):(_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce430 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod430 yyvals = yybadprod 430 yyvals;
private yyprod431 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce431 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod431 yyvals = yybadprod 431 yyvals;
private yyprod432 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce432 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod432 yyvals = yybadprod 432 yyvals;
private yyprod433 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce433 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod433 yyvals = yybadprod 433 yyvals;
private yyprod434 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce434 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod434 yyvals = yybadprod 434 yyvals;
private yyprod435 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce435 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod435 yyvals = yybadprod 435 yyvals;
private yyprod436 ((_, (YYTok yy4)):(_, (YYNTexpr yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce436 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod436 yyvals = yybadprod 436 yyvals;
private yyprod437 ((_, (YYTok yy4)):(_, (YYNToperator yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce437 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod437 yyvals = yybadprod 437 yyvals;
private yyprod438 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce438 yy1 yy2 yy3 yy4}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod438 yyvals = yybadprod 438 yyvals;
private yyprod439 ((_, (YYTok yy5)):(_, (YYNTexprSC yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce439 yy1 yy2 yy3 yy4 yy5}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod439 yyvals = yybadprod 439 yyvals;
private yyprod440 ((_, (YYTok yy5)):(_, (YYNTexprSS yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce440 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod440 yyvals = yybadprod 440 yyvals;
private yyprod441 ((_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce441 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod441 yyvals = yybadprod 441 yyvals;
private yyprod442 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce442 yy1 yy2}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod442 yyvals = yybadprod 442 yyvals;
private yyprod443 ((_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce443 yy1 yy2 yy3}; YYM.pure (YYNTterm yyr, yyvs)};
private yyprod443 yyvals = yybadprod 443 yyvals;
private yyprod444 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce444 yy1 yy2 yy3 yy4 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod444 yyvals = yybadprod 444 yyvals;
private yyprod445 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce445 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod445 yyvals = yybadprod 445 yyvals;
private yyprod446 ((_, (YYTok yy5)):(_, (YYNTlcquals yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce446 yy1 yy2 yy3 yy4 yy5 ;YYM.pure (YYNTterm yyr, yyvs)};
private yyprod446 yyvals = yybadprod 446 yyvals;
private yyprod447 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce447 yy1}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod447 yyvals = yybadprod 447 yyvals;
private yyprod448 ((_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce448 yy1 yy2}; YYM.pure (YYNTcommata yyr, yyvs)};
private yyprod448 yyvals = yybadprod 448 yyvals;
private yyprod449 ((_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce449 yy1}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod449 yyvals = yybadprod 449 yyvals;
private yyprod450 ((_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { yyr <- reduce450 yy1 yy2 yy3 ;YYM.pure (YYNTfields yyr, yyvs)};
private yyprod450 yyvals = yybadprod 450 yyvals;
private yyprod451 ((_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce451 yy1 yy2}; YYM.pure (YYNTfields yyr, yyvs)};
private yyprod451 yyvals = yybadprod 451 yyvals;
private yyprod452 ((_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce452 yy1}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod452 yyvals = yybadprod 452 yyvals;
private yyprod453 ((_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce453 yy1 yy2 yy3}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod453 yyvals = yybadprod 453 yyvals;
private yyprod454 ((_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce454 yy1 yy2}; YYM.pure (YYNTgetfields yyr, yyvs)};
private yyprod454 yyvals = yybadprod 454 yyvals;
private yyprod455 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce455 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod455 yyvals = yybadprod 455 yyvals;
private yyprod456 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce456 yy1 yy2 yy3}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod456 yyvals = yybadprod 456 yyvals;
private yyprod457 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce457 yy1}; YYM.pure (YYNTgetfield yyr, yyvs)};
private yyprod457 yyvals = yybadprod 457 yyvals;
private yyprod458 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce458 yy1 yy2 yy3}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod458 yyvals = yybadprod 458 yyvals;
private yyprod459 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce459 yy1}; YYM.pure (YYNTfield yyr, yyvs)};
private yyprod459 yyvals = yybadprod 459 yyvals;
private yyprod460 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce460 yy1}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod460 yyvals = yybadprod 460 yyvals;
private yyprod461 ((_, (YYNTexprSC yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce461 yy1 yy2 yy3}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod461 yyvals = yybadprod 461 yyvals;
private yyprod462 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce462 yy1 yy2}; YYM.pure (YYNTexprSC yyr, yyvs)};
private yyprod462 yyvals = yybadprod 462 yyvals;
private yyprod463 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce463 yy1}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod463 yyvals = yybadprod 463 yyvals;
private yyprod464 ((_, (YYNTexprSS yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce464 yy1 yy2 yy3}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod464 yyvals = yybadprod 464 yyvals;
private yyprod465 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce465 yy1 yy2}; YYM.pure (YYNTexprSS yyr, yyvs)};
private yyprod465 yyvals = yybadprod 465 yyvals;
;

private yyprods = let 
    sub1 = [      (1, yyprod1),
      (2, yyprod2),
      (3, yyprod3),
      (4, yyprod4),
      (5, yyprod5),
      (6, yyprod6),
      (7, yyprod7),
      (8, yyprod8),
      (9, yyprod9),
      (10, yyprod10),
      (11, yyprod11),
      (12, yyprod12),
      (13, yyprod13),
      (14, yyprod14),
      (15, yyprod15),
      (16, yyprod16),
      (17, yyprod17),
      (18, yyprod18),
      (19, yyprod19),
      (20, yyprod20),
      (21, yyprod21),
      (22, yyprod22),
      (23, yyprod23),
      (24, yyprod24),
      (25, yyprod25),
      (26, yyprod26),
      (27, yyprod27),
      (28, yyprod28),
      (29, yyprod29),
      (30, yyprod30),
      (31, yyprod31),
      (32, yyprod32),
      (33, yyprod33),
      (34, yyprod34),
      (35, yyprod35),
      (36, yyprod36),
      (37, yyprod37),
      (38, yyprod38),
      (39, yyprod39),
      (40, yyprod40),
      (41, yyprod41),
      (42, yyprod42),
      (43, yyprod43),
      (44, yyprod44),
      (45, yyprod45),
      (46, yyprod46),
      (47, yyprod47),
      (48, yyprod48),
      (49, yyprod49),
      (50, yyprod50),
      (51, yyprod51),
      (52, yyprod52),
      (53, yyprod53),
      (54, yyprod54),
      (55, yyprod55),
      (56, yyprod56),
      (57, yyprod57),
      (58, yyprod58),
      (59, yyprod59),
      (60, yyprod60),
      (61, yyprod61),
      (62, yyprod62),
      (63, yyprod63),
      (64, yyprod64)];
    sub2 = [      (65, yyprod65),
      (66, yyprod66),
      (67, yyprod67),
      (68, yyprod68),
      (69, yyprod69),
      (70, yyprod70),
      (71, yyprod71),
      (72, yyprod72),
      (73, yyprod73),
      (74, yyprod74),
      (75, yyprod75),
      (76, yyprod76),
      (77, yyprod77),
      (78, yyprod78),
      (79, yyprod79),
      (80, yyprod80),
      (81, yyprod81),
      (82, yyprod82),
      (83, yyprod83),
      (84, yyprod84),
      (85, yyprod85),
      (86, yyprod86),
      (87, yyprod87),
      (88, yyprod88),
      (89, yyprod89),
      (90, yyprod90),
      (91, yyprod91),
      (92, yyprod92),
      (93, yyprod93),
      (94, yyprod94),
      (95, yyprod95),
      (96, yyprod96),
      (97, yyprod97),
      (98, yyprod98),
      (99, yyprod99),
      (100, yyprod100),
      (101, yyprod101),
      (102, yyprod102),
      (103, yyprod103),
      (104, yyprod104),
      (105, yyprod105),
      (106, yyprod106),
      (107, yyprod107),
      (108, yyprod108),
      (109, yyprod109),
      (110, yyprod110),
      (111, yyprod111),
      (112, yyprod112),
      (113, yyprod113),
      (114, yyprod114),
      (115, yyprod115),
      (116, yyprod116),
      (117, yyprod117),
      (118, yyprod118),
      (119, yyprod119),
      (120, yyprod120),
      (121, yyprod121),
      (122, yyprod122),
      (123, yyprod123),
      (124, yyprod124),
      (125, yyprod125),
      (126, yyprod126),
      (127, yyprod127),
      (128, yyprod128)];
    sub3 = [      (129, yyprod129),
      (130, yyprod130),
      (131, yyprod131),
      (132, yyprod132),
      (133, yyprod133),
      (134, yyprod134),
      (135, yyprod135),
      (136, yyprod136),
      (137, yyprod137),
      (138, yyprod138),
      (139, yyprod139),
      (140, yyprod140),
      (141, yyprod141),
      (142, yyprod142),
      (143, yyprod143),
      (144, yyprod144),
      (145, yyprod145),
      (146, yyprod146),
      (147, yyprod147),
      (148, yyprod148),
      (149, yyprod149),
      (150, yyprod150),
      (151, yyprod151),
      (152, yyprod152),
      (153, yyprod153),
      (154, yyprod154),
      (155, yyprod155),
      (156, yyprod156),
      (157, yyprod157),
      (158, yyprod158),
      (159, yyprod159),
      (160, yyprod160),
      (161, yyprod161),
      (162, yyprod162),
      (163, yyprod163),
      (164, yyprod164),
      (165, yyprod165),
      (166, yyprod166),
      (167, yyprod167),
      (168, yyprod168),
      (169, yyprod169),
      (170, yyprod170),
      (171, yyprod171),
      (172, yyprod172),
      (173, yyprod173),
      (174, yyprod174),
      (175, yyprod175),
      (176, yyprod176),
      (177, yyprod177),
      (178, yyprod178),
      (179, yyprod179),
      (180, yyprod180),
      (181, yyprod181),
      (182, yyprod182),
      (183, yyprod183),
      (184, yyprod184),
      (185, yyprod185),
      (186, yyprod186),
      (187, yyprod187),
      (188, yyprod188),
      (189, yyprod189),
      (190, yyprod190),
      (191, yyprod191),
      (192, yyprod192)];
    sub4 = [      (193, yyprod193),
      (194, yyprod194),
      (195, yyprod195),
      (196, yyprod196),
      (197, yyprod197),
      (198, yyprod198),
      (199, yyprod199),
      (200, yyprod200),
      (201, yyprod201),
      (202, yyprod202),
      (203, yyprod203),
      (204, yyprod204),
      (205, yyprod205),
      (206, yyprod206),
      (207, yyprod207),
      (208, yyprod208),
      (209, yyprod209),
      (210, yyprod210),
      (211, yyprod211),
      (212, yyprod212),
      (213, yyprod213),
      (214, yyprod214),
      (215, yyprod215),
      (216, yyprod216),
      (217, yyprod217),
      (218, yyprod218),
      (219, yyprod219),
      (220, yyprod220),
      (221, yyprod221),
      (222, yyprod222),
      (223, yyprod223),
      (224, yyprod224),
      (225, yyprod225),
      (226, yyprod226),
      (227, yyprod227),
      (228, yyprod228),
      (229, yyprod229),
      (230, yyprod230),
      (231, yyprod231),
      (232, yyprod232),
      (233, yyprod233),
      (234, yyprod234),
      (235, yyprod235),
      (236, yyprod236),
      (237, yyprod237),
      (238, yyprod238),
      (239, yyprod239),
      (240, yyprod240),
      (241, yyprod241),
      (242, yyprod242),
      (243, yyprod243),
      (244, yyprod244),
      (245, yyprod245),
      (246, yyprod246),
      (247, yyprod247),
      (248, yyprod248),
      (249, yyprod249),
      (250, yyprod250),
      (251, yyprod251),
      (252, yyprod252),
      (253, yyprod253),
      (254, yyprod254),
      (255, yyprod255),
      (256, yyprod256)];
    sub5 = [      (257, yyprod257),
      (258, yyprod258),
      (259, yyprod259),
      (260, yyprod260),
      (261, yyprod261),
      (262, yyprod262),
      (263, yyprod263),
      (264, yyprod264),
      (265, yyprod265),
      (266, yyprod266),
      (267, yyprod267),
      (268, yyprod268),
      (269, yyprod269),
      (270, yyprod270),
      (271, yyprod271),
      (272, yyprod272),
      (273, yyprod273),
      (274, yyprod274),
      (275, yyprod275),
      (276, yyprod276),
      (277, yyprod277),
      (278, yyprod278),
      (279, yyprod279),
      (280, yyprod280),
      (281, yyprod281),
      (282, yyprod282),
      (283, yyprod283),
      (284, yyprod284),
      (285, yyprod285),
      (286, yyprod286),
      (287, yyprod287),
      (288, yyprod288),
      (289, yyprod289),
      (290, yyprod290),
      (291, yyprod291),
      (292, yyprod292),
      (293, yyprod293),
      (294, yyprod294),
      (295, yyprod295),
      (296, yyprod296),
      (297, yyprod297),
      (298, yyprod298),
      (299, yyprod299),
      (300, yyprod300),
      (301, yyprod301),
      (302, yyprod302),
      (303, yyprod303),
      (304, yyprod304),
      (305, yyprod305),
      (306, yyprod306),
      (307, yyprod307),
      (308, yyprod308),
      (309, yyprod309),
      (310, yyprod310),
      (311, yyprod311),
      (312, yyprod312),
      (313, yyprod313),
      (314, yyprod314),
      (315, yyprod315),
      (316, yyprod316),
      (317, yyprod317),
      (318, yyprod318),
      (319, yyprod319),
      (320, yyprod320)];
    sub6 = [      (321, yyprod321),
      (322, yyprod322),
      (323, yyprod323),
      (324, yyprod324),
      (325, yyprod325),
      (326, yyprod326),
      (327, yyprod327),
      (328, yyprod328),
      (329, yyprod329),
      (330, yyprod330),
      (331, yyprod331),
      (332, yyprod332),
      (333, yyprod333),
      (334, yyprod334),
      (335, yyprod335),
      (336, yyprod336),
      (337, yyprod337),
      (338, yyprod338),
      (339, yyprod339),
      (340, yyprod340),
      (341, yyprod341),
      (342, yyprod342),
      (343, yyprod343),
      (344, yyprod344),
      (345, yyprod345),
      (346, yyprod346),
      (347, yyprod347),
      (348, yyprod348),
      (349, yyprod349),
      (350, yyprod350),
      (351, yyprod351),
      (352, yyprod352),
      (353, yyprod353),
      (354, yyprod354),
      (355, yyprod355),
      (356, yyprod356),
      (357, yyprod357),
      (358, yyprod358),
      (359, yyprod359),
      (360, yyprod360),
      (361, yyprod361),
      (362, yyprod362),
      (363, yyprod363),
      (364, yyprod364),
      (365, yyprod365),
      (366, yyprod366),
      (367, yyprod367),
      (368, yyprod368),
      (369, yyprod369),
      (370, yyprod370),
      (371, yyprod371),
      (372, yyprod372),
      (373, yyprod373),
      (374, yyprod374),
      (375, yyprod375),
      (376, yyprod376),
      (377, yyprod377),
      (378, yyprod378),
      (379, yyprod379),
      (380, yyprod380),
      (381, yyprod381),
      (382, yyprod382),
      (383, yyprod383),
      (384, yyprod384)];
    sub7 = [      (385, yyprod385),
      (386, yyprod386),
      (387, yyprod387),
      (388, yyprod388),
      (389, yyprod389),
      (390, yyprod390),
      (391, yyprod391),
      (392, yyprod392),
      (393, yyprod393),
      (394, yyprod394),
      (395, yyprod395),
      (396, yyprod396),
      (397, yyprod397),
      (398, yyprod398),
      (399, yyprod399),
      (400, yyprod400),
      (401, yyprod401),
      (402, yyprod402),
      (403, yyprod403),
      (404, yyprod404),
      (405, yyprod405),
      (406, yyprod406),
      (407, yyprod407),
      (408, yyprod408),
      (409, yyprod409),
      (410, yyprod410),
      (411, yyprod411),
      (412, yyprod412),
      (413, yyprod413),
      (414, yyprod414),
      (415, yyprod415),
      (416, yyprod416),
      (417, yyprod417),
      (418, yyprod418),
      (419, yyprod419),
      (420, yyprod420),
      (421, yyprod421),
      (422, yyprod422),
      (423, yyprod423),
      (424, yyprod424),
      (425, yyprod425),
      (426, yyprod426),
      (427, yyprod427),
      (428, yyprod428),
      (429, yyprod429),
      (430, yyprod430),
      (431, yyprod431),
      (432, yyprod432),
      (433, yyprod433),
      (434, yyprod434),
      (435, yyprod435),
      (436, yyprod436),
      (437, yyprod437),
      (438, yyprod438),
      (439, yyprod439),
      (440, yyprod440),
      (441, yyprod441),
      (442, yyprod442),
      (443, yyprod443),
      (444, yyprod444),
      (445, yyprod445),
      (446, yyprod446),
      (447, yyprod447),
      (448, yyprod448)];
    sub8 = [      (449, yyprod449),
      (450, yyprod450),
      (451, yyprod451),
      (452, yyprod452),
      (453, yyprod453),
      (454, yyprod454),
      (455, yyprod455),
      (456, yyprod456),
      (457, yyprod457),
      (458, yyprod458),
      (459, yyprod459),
      (460, yyprod460),
      (461, yyprod461),
      (462, yyprod462),
      (463, yyprod463),
      (464, yyprod464),
      (465, yyprod465)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8);
private yyacts  = let 
    sub1 = [      (0, yyaction0),
      (1, yyaction1),
      (2, yyaction2),
      (3, yyaction3),
      (4, yyaction4),
      (5, yyaction5),
      (6, yyaction6),
      (7, yyaction7),
      (8, yyaction8),
      (9, yyaction9),
      (10, yyaction10),
      (11, yyaction11),
      (12, yyaction12),
      (13, yyaction13),
      (14, yyaction14),
      (15, yyaction15),
      (16, yyaction16),
      (17, yyaction17),
      (18, yyaction18),
      (19, yyaction19),
      (20, yyaction20),
      (21, yyaction21),
      (22, yyaction22),
      (23, yyaction23),
      (24, yyaction24),
      (25, yyaction25),
      (26, yyaction26),
      (27, yyaction27),
      (28, yyaction28),
      (29, yyaction29),
      (30, yyaction30),
      (31, yyaction31),
      (32, yyaction32),
      (33, yyaction33),
      (34, yyaction34),
      (35, yyaction35),
      (36, yyaction36),
      (37, yyaction37),
      (38, yyaction38),
      (39, yyaction39),
      (40, yyaction40),
      (41, yyaction41),
      (42, yyaction42),
      (43, yyaction43),
      (44, yyaction44),
      (45, yyaction45),
      (46, yyaction46),
      (47, yyaction47),
      (48, yyaction48),
      (49, yyaction49),
      (50, yyaction50),
      (51, yyaction51),
      (52, yyaction52),
      (53, yyaction53),
      (54, yyaction54),
      (55, yyaction55),
      (56, yyaction56),
      (57, yyaction57),
      (58, yyaction58),
      (59, yyaction59),
      (60, yyaction60),
      (61, yyaction61),
      (62, yyaction62),
      (63, yyaction63)];
    sub2 = [      (64, yyaction64),
      (65, yyaction65),
      (66, yyaction66),
      (67, yyaction67),
      (68, yyaction68),
      (69, yyaction69),
      (70, yyaction70),
      (71, yyaction71),
      (72, yyaction72),
      (73, yyaction73),
      (74, yyaction74),
      (75, yyaction75),
      (76, yyaction76),
      (77, yyaction77),
      (78, yyaction78),
      (79, yyaction79),
      (80, yyaction80),
      (81, yyaction81),
      (82, yyaction82),
      (83, yyaction83),
      (84, yyaction84),
      (85, yyaction85),
      (86, yyaction86),
      (87, yyaction87),
      (88, yyaction88),
      (89, yyaction89),
      (90, yyaction90),
      (91, yyaction91),
      (92, yyaction92),
      (93, yyaction93),
      (94, yyaction94),
      (95, yyaction95),
      (96, yyaction96),
      (97, yyaction97),
      (98, yyaction98),
      (99, yyaction99),
      (100, yyaction100),
      (101, yyaction101),
      (102, yyaction102),
      (103, yyaction103),
      (104, yyaction104),
      (105, yyaction105),
      (106, yyaction106),
      (107, yyaction107),
      (108, yyaction108),
      (109, yyaction109),
      (110, yyaction110),
      (111, yyaction111),
      (112, yyaction112),
      (113, yyaction113),
      (114, yyaction114),
      (115, yyaction115),
      (116, yyaction116),
      (117, yyaction117),
      (118, yyaction118),
      (119, yyaction119),
      (120, yyaction120),
      (121, yyaction121),
      (122, yyaction122),
      (123, yyaction123),
      (124, yyaction124),
      (125, yyaction125),
      (126, yyaction126),
      (127, yyaction127)];
    sub3 = [      (128, yyaction128),
      (129, yyaction129),
      (130, yyaction130),
      (131, yyaction131),
      (132, yyaction132),
      (133, yyaction133),
      (134, yyaction134),
      (135, yyaction135),
      (136, yyaction136),
      (137, yyaction137),
      (138, yyaction138),
      (139, yyaction139),
      (140, yyaction140),
      (141, yyaction141),
      (142, yyaction142),
      (143, yyaction143),
      (144, yyaction144),
      (145, yyaction145),
      (146, yyaction146),
      (147, yyaction147),
      (148, yyaction148),
      (149, yyaction149),
      (150, yyaction150),
      (151, yyaction151),
      (152, yyaction152),
      (153, yyaction153),
      (154, yyaction154),
      (155, yyaction155),
      (156, yyaction156),
      (157, yyaction157),
      (158, yyaction158),
      (159, yyaction159),
      (160, yyaction160),
      (161, yyaction161),
      (162, yyaction162),
      (163, yyaction163),
      (164, yyaction164),
      (165, yyaction165),
      (166, yyaction166),
      (167, yyaction167),
      (168, yyaction168),
      (169, yyaction169),
      (170, yyaction170),
      (171, yyaction171),
      (172, yyaction172),
      (173, yyaction173),
      (174, yyaction174),
      (175, yyaction175),
      (176, yyaction176),
      (177, yyaction177),
      (178, yyaction178),
      (179, yyaction179),
      (180, yyaction180),
      (181, yyaction181),
      (182, yyaction182),
      (183, yyaction183),
      (184, yyaction184),
      (185, yyaction185),
      (186, yyaction186),
      (187, yyaction187),
      (188, yyaction188),
      (189, yyaction189),
      (190, yyaction190),
      (191, yyaction191)];
    sub4 = [      (192, yyaction192),
      (193, yyaction193),
      (194, yyaction194),
      (195, yyaction195),
      (196, yyaction196),
      (197, yyaction197),
      (198, yyaction198),
      (199, yyaction199),
      (200, yyaction200),
      (201, yyaction201),
      (202, yyaction202),
      (203, yyaction203),
      (204, yyaction204),
      (205, yyaction205),
      (206, yyaction206),
      (207, yyaction207),
      (208, yyaction208),
      (209, yyaction209),
      (210, yyaction210),
      (211, yyaction211),
      (212, yyaction212),
      (213, yyaction213),
      (214, yyaction214),
      (215, yyaction215),
      (216, yyaction216),
      (217, yyaction217),
      (218, yyaction218),
      (219, yyaction219),
      (220, yyaction220),
      (221, yyaction221),
      (222, yyaction222),
      (223, yyaction223),
      (224, yyaction224),
      (225, yyaction225),
      (226, yyaction226),
      (227, yyaction227),
      (228, yyaction228),
      (229, yyaction229),
      (230, yyaction230),
      (231, yyaction231),
      (232, yyaction232),
      (233, yyaction233),
      (234, yyaction234),
      (235, yyaction235),
      (236, yyaction236),
      (237, yyaction237),
      (238, yyaction238),
      (239, yyaction239),
      (240, yyaction240),
      (241, yyaction241),
      (242, yyaction242),
      (243, yyaction243),
      (244, yyaction244),
      (245, yyaction245),
      (246, yyaction246),
      (247, yyaction247),
      (248, yyaction248),
      (249, yyaction249),
      (250, yyaction250),
      (251, yyaction251),
      (252, yyaction252),
      (253, yyaction253),
      (254, yyaction254),
      (255, yyaction255)];
    sub5 = [      (256, yyaction256),
      (257, yyaction257),
      (258, yyaction258),
      (259, yyaction259),
      (260, yyaction260),
      (261, yyaction261),
      (262, yyaction262),
      (263, yyaction263),
      (264, yyaction264),
      (265, yyaction265),
      (266, yyaction266),
      (267, yyaction267),
      (268, yyaction268),
      (269, yyaction269),
      (270, yyaction270),
      (271, yyaction271),
      (272, yyaction272),
      (273, yyaction273),
      (274, yyaction274),
      (275, yyaction275),
      (276, yyaction276),
      (277, yyaction277),
      (278, yyaction278),
      (279, yyaction279),
      (280, yyaction280),
      (281, yyaction281),
      (282, yyaction282),
      (283, yyaction283),
      (284, yyaction284),
      (285, yyaction285),
      (286, yyaction286),
      (287, yyaction287),
      (288, yyaction288),
      (289, yyaction289),
      (290, yyaction290),
      (291, yyaction291),
      (292, yyaction292),
      (293, yyaction293),
      (294, yyaction294),
      (295, yyaction295),
      (296, yyaction296),
      (297, yyaction297),
      (298, yyaction298),
      (299, yyaction299),
      (300, yyaction300),
      (301, yyaction301),
      (302, yyaction302),
      (303, yyaction303),
      (304, yyaction304),
      (305, yyaction305),
      (306, yyaction306),
      (307, yyaction307),
      (308, yyaction308),
      (309, yyaction309),
      (310, yyaction310),
      (311, yyaction311),
      (312, yyaction312),
      (313, yyaction313),
      (314, yyaction314),
      (315, yyaction315),
      (316, yyaction316),
      (317, yyaction317),
      (318, yyaction318),
      (319, yyaction319)];
    sub6 = [      (320, yyaction320),
      (321, yyaction321),
      (322, yyaction322),
      (323, yyaction323),
      (324, yyaction324),
      (325, yyaction325),
      (326, yyaction326),
      (327, yyaction327),
      (328, yyaction328),
      (329, yyaction329),
      (330, yyaction330),
      (331, yyaction331),
      (332, yyaction332),
      (333, yyaction333),
      (334, yyaction334),
      (335, yyaction335),
      (336, yyaction336),
      (337, yyaction337),
      (338, yyaction338),
      (339, yyaction339),
      (340, yyaction340),
      (341, yyaction341),
      (342, yyaction342),
      (343, yyaction343),
      (344, yyaction344),
      (345, yyaction345),
      (346, yyaction346),
      (347, yyaction347),
      (348, yyaction348),
      (349, yyaction349),
      (350, yyaction350),
      (351, yyaction351),
      (352, yyaction352),
      (353, yyaction353),
      (354, yyaction354),
      (355, yyaction355),
      (356, yyaction356),
      (357, yyaction357),
      (358, yyaction358),
      (359, yyaction359),
      (360, yyaction360),
      (361, yyaction361),
      (362, yyaction362),
      (363, yyaction363),
      (364, yyaction364),
      (365, yyaction365),
      (366, yyaction366),
      (367, yyaction367),
      (368, yyaction368),
      (369, yyaction369),
      (370, yyaction370),
      (371, yyaction371),
      (372, yyaction372),
      (373, yyaction373),
      (374, yyaction374),
      (375, yyaction375),
      (376, yyaction376),
      (377, yyaction377),
      (378, yyaction378),
      (379, yyaction379),
      (380, yyaction380),
      (381, yyaction381),
      (382, yyaction382),
      (383, yyaction383)];
    sub7 = [      (384, yyaction384),
      (385, yyaction385),
      (386, yyaction386),
      (387, yyaction387),
      (388, yyaction388),
      (389, yyaction389),
      (390, yyaction390),
      (391, yyaction391),
      (392, yyaction392),
      (393, yyaction393),
      (394, yyaction394),
      (395, yyaction395),
      (396, yyaction396),
      (397, yyaction397),
      (398, yyaction398),
      (399, yyaction399),
      (400, yyaction400),
      (401, yyaction401),
      (402, yyaction402),
      (403, yyaction403),
      (404, yyaction404),
      (405, yyaction405),
      (406, yyaction406),
      (407, yyaction407),
      (408, yyaction408),
      (409, yyaction409),
      (410, yyaction410),
      (411, yyaction411),
      (412, yyaction412),
      (413, yyaction413),
      (414, yyaction414),
      (415, yyaction415),
      (416, yyaction416),
      (417, yyaction417),
      (418, yyaction418),
      (419, yyaction419),
      (420, yyaction420),
      (421, yyaction421),
      (422, yyaction422),
      (423, yyaction423),
      (424, yyaction424),
      (425, yyaction425),
      (426, yyaction426),
      (427, yyaction427),
      (428, yyaction428),
      (429, yyaction429),
      (430, yyaction430),
      (431, yyaction431),
      (432, yyaction432),
      (433, yyaction433),
      (434, yyaction434),
      (435, yyaction435),
      (436, yyaction436),
      (437, yyaction437),
      (438, yyaction438),
      (439, yyaction439),
      (440, yyaction440),
      (441, yyaction441),
      (442, yyaction442),
      (443, yyaction443),
      (444, yyaction444),
      (445, yyaction445),
      (446, yyaction446),
      (447, yyaction447)];
    sub8 = [      (448, yyaction448),
      (449, yyaction449),
      (450, yyaction450),
      (451, yyaction451),
      (452, yyaction452),
      (453, yyaction453),
      (454, yyaction454),
      (455, yyaction455),
      (456, yyaction456),
      (457, yyaction457),
      (458, yyaction458),
      (459, yyaction459),
      (460, yyaction460),
      (461, yyaction461),
      (462, yyaction462),
      (463, yyaction463),
      (464, yyaction464),
      (465, yyaction465),
      (466, yyaction466),
      (467, yyaction467),
      (468, yyaction468),
      (469, yyaction469),
      (470, yyaction470),
      (471, yyaction471),
      (472, yyaction472),
      (473, yyaction473),
      (474, yyaction474),
      (475, yyaction475),
      (476, yyaction476),
      (477, yyaction477),
      (478, yyaction478),
      (479, yyaction479),
      (480, yyaction480),
      (481, yyaction481),
      (482, yyaction482),
      (483, yyaction483),
      (484, yyaction484),
      (485, yyaction485),
      (486, yyaction486),
      (487, yyaction487),
      (488, yyaction488),
      (489, yyaction489),
      (490, yyaction490),
      (491, yyaction491),
      (492, yyaction492),
      (493, yyaction493),
      (494, yyaction494),
      (495, yyaction495),
      (496, yyaction496),
      (497, yyaction497),
      (498, yyaction498),
      (499, yyaction499),
      (500, yyaction500),
      (501, yyaction501),
      (502, yyaction502),
      (503, yyaction503),
      (504, yyaction504),
      (505, yyaction505),
      (506, yyaction506),
      (507, yyaction507),
      (508, yyaction508),
      (509, yyaction509),
      (510, yyaction510),
      (511, yyaction511)];
    sub9 = [      (512, yyaction512),
      (513, yyaction513),
      (514, yyaction514),
      (515, yyaction515),
      (516, yyaction516),
      (517, yyaction517),
      (518, yyaction518),
      (519, yyaction519),
      (520, yyaction520),
      (521, yyaction521),
      (522, yyaction522),
      (523, yyaction523),
      (524, yyaction524),
      (525, yyaction525),
      (526, yyaction526),
      (527, yyaction527),
      (528, yyaction528),
      (529, yyaction529),
      (530, yyaction530),
      (531, yyaction531),
      (532, yyaction532),
      (533, yyaction533),
      (534, yyaction534),
      (535, yyaction535),
      (536, yyaction536),
      (537, yyaction537),
      (538, yyaction538),
      (539, yyaction539),
      (540, yyaction540),
      (541, yyaction541),
      (542, yyaction542),
      (543, yyaction543),
      (544, yyaction544),
      (545, yyaction545),
      (546, yyaction546),
      (547, yyaction547),
      (548, yyaction548),
      (549, yyaction549),
      (550, yyaction550),
      (551, yyaction551),
      (552, yyaction552),
      (553, yyaction553),
      (554, yyaction554),
      (555, yyaction555),
      (556, yyaction556),
      (557, yyaction557),
      (558, yyaction558),
      (559, yyaction559),
      (560, yyaction560),
      (561, yyaction561),
      (562, yyaction562),
      (563, yyaction563),
      (564, yyaction564),
      (565, yyaction565),
      (566, yyaction566),
      (567, yyaction567),
      (568, yyaction568),
      (569, yyaction569),
      (570, yyaction570),
      (571, yyaction571),
      (572, yyaction572),
      (573, yyaction573),
      (574, yyaction574),
      (575, yyaction575)];
    sub10 = [      (576, yyaction576),
      (577, yyaction577),
      (578, yyaction578),
      (579, yyaction579),
      (580, yyaction580),
      (581, yyaction581),
      (582, yyaction582),
      (583, yyaction583),
      (584, yyaction584),
      (585, yyaction585),
      (586, yyaction586),
      (587, yyaction587),
      (588, yyaction588),
      (589, yyaction589),
      (590, yyaction590),
      (591, yyaction591),
      (592, yyaction592),
      (593, yyaction593),
      (594, yyaction594),
      (595, yyaction595),
      (596, yyaction596),
      (597, yyaction597),
      (598, yyaction598),
      (599, yyaction599),
      (600, yyaction600),
      (601, yyaction601),
      (602, yyaction602),
      (603, yyaction603),
      (604, yyaction604),
      (605, yyaction605),
      (606, yyaction606),
      (607, yyaction607),
      (608, yyaction608),
      (609, yyaction609),
      (610, yyaction610),
      (611, yyaction611),
      (612, yyaction612),
      (613, yyaction613),
      (614, yyaction614),
      (615, yyaction615),
      (616, yyaction616),
      (617, yyaction617),
      (618, yyaction618),
      (619, yyaction619),
      (620, yyaction620),
      (621, yyaction621),
      (622, yyaction622),
      (623, yyaction623),
      (624, yyaction624),
      (625, yyaction625),
      (626, yyaction626),
      (627, yyaction627),
      (628, yyaction628),
      (629, yyaction629),
      (630, yyaction630),
      (631, yyaction631),
      (632, yyaction632),
      (633, yyaction633),
      (634, yyaction634),
      (635, yyaction635),
      (636, yyaction636),
      (637, yyaction637),
      (638, yyaction638),
      (639, yyaction639)];
    sub11 = [      (640, yyaction640),
      (641, yyaction641),
      (642, yyaction642),
      (643, yyaction643),
      (644, yyaction644),
      (645, yyaction645),
      (646, yyaction646),
      (647, yyaction647),
      (648, yyaction648),
      (649, yyaction649),
      (650, yyaction650),
      (651, yyaction651),
      (652, yyaction652),
      (653, yyaction653),
      (654, yyaction654),
      (655, yyaction655),
      (656, yyaction656),
      (657, yyaction657),
      (658, yyaction658),
      (659, yyaction659),
      (660, yyaction660),
      (661, yyaction661),
      (662, yyaction662),
      (663, yyaction663),
      (664, yyaction664),
      (665, yyaction665),
      (666, yyaction666),
      (667, yyaction667),
      (668, yyaction668),
      (669, yyaction669),
      (670, yyaction670),
      (671, yyaction671),
      (672, yyaction672),
      (673, yyaction673),
      (674, yyaction674),
      (675, yyaction675),
      (676, yyaction676),
      (677, yyaction677),
      (678, yyaction678),
      (679, yyaction679),
      (680, yyaction680),
      (681, yyaction681),
      (682, yyaction682),
      (683, yyaction683),
      (684, yyaction684),
      (685, yyaction685),
      (686, yyaction686),
      (687, yyaction687),
      (688, yyaction688),
      (689, yyaction689),
      (690, yyaction690),
      (691, yyaction691),
      (692, yyaction692),
      (693, yyaction693),
      (694, yyaction694),
      (695, yyaction695),
      (696, yyaction696),
      (697, yyaction697),
      (698, yyaction698),
      (699, yyaction699),
      (700, yyaction700),
      (701, yyaction701),
      (702, yyaction702),
      (703, yyaction703)];
    sub12 = [      (704, yyaction704),
      (705, yyaction705),
      (706, yyaction706),
      (707, yyaction707),
      (708, yyaction708),
      (709, yyaction709),
      (710, yyaction710),
      (711, yyaction711),
      (712, yyaction712),
      (713, yyaction713),
      (714, yyaction714),
      (715, yyaction715),
      (716, yyaction716),
      (717, yyaction717),
      (718, yyaction718),
      (719, yyaction719),
      (720, yyaction720),
      (721, yyaction721),
      (722, yyaction722),
      (723, yyaction723),
      (724, yyaction724),
      (725, yyaction725),
      (726, yyaction726),
      (727, yyaction727),
      (728, yyaction728)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyrecs  = let 
    sub1 = [      (0, yybadstart 0 "a module"),
      (1, yyparsing  1 "a sequence of doc comments"),
      (2, yyparsing  2 "a module clause"),
      (3, yyexpect 3(yyfromId PACKAGE)),
      (4, yyparsing  4 "a module"),
      (5, yyrecover 5),
      (6, yyparsing  6 "a module"),
      (7, yyparsing  7 "a module clause"),
      (8, yybadstart 8 "the next definition"),
      (9, yyparsing  9 "a sequence of doc comments"),
      (10, yyexpect 10(yyfromId DOCUMENTATION)),
      (11, yyparsing  11 "a variable name"),
      (12, yyparsing  12 "a module name"),
      (13, yyparsing  13 "a module name"),
      (14, yyparsing  14 "a variable name"),
      (15, yyparsing  15 "a variable name"),
      (16, yyparsing  16 "a variable name"),
      (17, yyparsing  17 "a variable name"),
      (18, yyparsing  18 "a variable name"),
      (19, yyparsing  19 "a variable name"),
      (20, yyparsing  20 "a module name"),
      (21, yyexpect 21(yyfromCh '.')),
      (22, yyparsing  22 "a module clause"),
      (23, yyparsing  23 "a module clause"),
      (24, yyparsing  24 "a variable name"),
      (25, yyparsing  25 "a qualified constructor or type name"),
      (26, yyparsing  26 "a qualified variable name"),
      (27, yyparsing  27 "documentation"),
      (28, yyparsing  28 "a module import"),
      (29, yyexpect 29(yyfromId INTCONST)),
      (30, yyexpect 30(yyfromId INTCONST)),
      (31, yyexpect 31(yyfromId INTCONST)),
      (32, yyparsing  32 "specification for module class "),
      (33, yyexpect 33(yyfromId CONID)),
      (34, yyexpect 34(yyfromId CONID)),
      (35, yyparsing  35 "a type class declaration"),
      (36, yyparsing  36 "an instance declaration"),
      (37, yyparsing  37 "a protected or private declaration"),
      (38, yyexpect 38(yyfromId CONID)),
      (39, yyparsing  39 "a literal"),
      (40, yyparsing  40 "a literal"),
      (41, yyparsing  41 "a top level expression"),
      (42, yyparsing  42 "a top level expression"),
      (43, yyparsing  43 "an instance derivation"),
      (44, yyexpect 44(yyfromCh '{')),
      (45, yyexpect 45(yyfromCh '{')),
      (46, yyparsing  46 "a protected or private declaration"),
      (47, yyparsing  47 "a protected or private declaration"),
      (48, yyparsing  48 "a protected or private declaration"),
      (49, yyexpect 49(yyfromId NATIVE)),
      (50, yyparsing  50 "a literal"),
      (51, yyparsing  51 "a literal"),
      (52, yyparsing  52 "a literal"),
      (53, yyparsing  53 "a literal"),
      (54, yyparsing  54 "a literal"),
      (55, yyparsing  55 "a literal"),
      (56, yyparsing  56 "a literal"),
      (57, yyparsing  57 "a literal"),
      (58, yyparsing  58 "binary expression"),
      (59, yyparsing  59 "an annotated item"),
      (60, yyparsing  60 "a term"),
      (61, yyparsing  61 "an unary operator"),
      (62, yyparsing  62 "an unary operator"),
      (63, yyparsing  63 "a lambda abstraction")];
    sub2 = [      (64, yyparsing  64 "a term"),
      (65, yyexpect 65(yyfromCh '}')),
      (66, yybadstart 66 "the next definition"),
      (67, yyparsing  67 "a declaration"),
      (68, yyparsing  68 "a declaration"),
      (69, yyparsing  69 "a declaration"),
      (70, yyparsing  70 "a top level declaration"),
      (71, yyparsing  71 "a declaration"),
      (72, yyparsing  72 "a top level declaration"),
      (73, yyparsing  73 "a top level declaration"),
      (74, yyparsing  74 "a top level declaration"),
      (75, yyparsing  75 "a declaration"),
      (76, yyparsing  76 "a declaration"),
      (77, yyparsing  77 "a declaration"),
      (78, yyparsing  78 "a declaration"),
      (79, yyparsing  79 "a declaration"),
      (80, yyparsing  80 "a local declaration"),
      (81, yyparsing  81 "a local declaration"),
      (82, yybadstart 82 "a where clause"),
      (83, yyparsing  83 "an annotated item"),
      (84, yyparsing  84 "a term"),
      (85, yyparsing  85 "a term"),
      (86, yyparsing  86 "unary expression"),
      (87, yyparsing  87 "a fixity declaration"),
      (88, yyexpect 88(yyfromId DCOLON)),
      (89, yyparsing  89 "a list of items to annotate"),
      (90, yyparsing  90 "a declaration of a native item"),
      (91, yybadstart 91 "declarations local to a class, instance or type"),
      (92, yyparsing  92 "a function or pattern binding"),
      (93, yyparsing  93 "left hand side of a function or pattern binding"),
      (94, yyparsing  94 "a term"),
      (95, yyparsing  95 "a top level expression"),
      (96, yyparsing  96 "binary expression"),
      (97, yyparsing  97 "a top level expression"),
      (98, yyparsing  98 "function application"),
      (99, yyparsing  99 "unary expression"),
      (100, yyexpect 100(yyfromCh '{')),
      (101, yyparsing  101 "a primary expression"),
      (102, yyparsing  102 "a word"),
      (103, yyexpect 103(yyfromCh '{')),
      (104, yyparsing  104 "a module"),
      (105, yyexpect 105(yyfromCh '(')),
      (106, yyparsing  106 "words"),
      (107, yyparsing  107 "a module clause"),
      (108, yyexpect 108(yyfromId PACKAGE)),
      (109, yyparsing  109 "the next definition"),
      (110, yyparsing  110 "a sequence of doc comments"),
      (111, yyparsing  111 "a module name"),
      (112, yyparsing  112 "a module name"),
      (113, yyparsing  113 "a module clause"),
      (114, yyparsing  114 "a variable or an operator"),
      (115, yyparsing  115 "a qualified constructor or type name"),
      (116, yyparsing  116 "a qualified variable name"),
      (117, yyparsing  117 "a variable or an operator"),
      (118, yyparsing  118 "a qualified variable name"),
      (119, yyparsing  119 "a module import"),
      (120, yyparsing  120 "the start of a fixity declaration"),
      (121, yyparsing  121 "the start of a fixity declaration"),
      (122, yyparsing  122 "the start of a fixity declaration"),
      (123, yyparsing  123 "a variable name"),
      (124, yybadstart 124 "the type this module derives from"),
      (125, yyparsing  125 "an operator"),
      (126, yyparsing  126 "the frege name of the native method"),
      (127, yyparsing  127 "an annotated item")];
    sub3 = [      (128, yyparsing  128 "the frege name of the native method"),
      (129, yyparsing  129 "the frege name of the native method"),
      (130, yyparsing  130 "the frege name of the native method"),
      (131, yyparsing  131 "a specification of a native item"),
      (132, yyexpect 132(yyfromId DCOLON)),
      (133, yyparsing  133 "a data definition"),
      (134, yyparsing  134 "a data definition"),
      (135, yyparsing  135 "a qualified constructor or type name"),
      (136, yyparsing  136 "type class context"),
      (137, yybadstart 137 "a type variable"),
      (138, yyparsing  138 "type class context"),
      (139, yybadstart 139 "declarations local to a class, instance or type"),
      (140, yyparsing  140 "instance context"),
      (141, yyparsing  141 "instance constraint"),
      (142, yyparsing  142 "instance context"),
      (143, yyparsing  143 "instance head"),
      (144, yybadstart 144 "declarations local to a class, instance or type"),
      (145, yyparsing  145 "a protected or private declaration"),
      (146, yyparsing  146 "a type declaration"),
      (147, yyparsing  147 "a qualified variable name"),
      (148, yyparsing  148 "a term"),
      (149, yybadstart 149 "then branch"),
      (150, yyparsing  150 "an expression"),
      (151, yyexpect 151(yyfromId OF)),
      (152, yyparsing  152 "an instance derivation"),
      (153, yyparsing  153 "a top level expression"),
      (154, yyparsing  154 "a primary expression"),
      (155, yyparsing  155 "a declaration of a native item"),
      (156, yyparsing  156 "a protected or private declaration"),
      (157, yyparsing  157 "a protected or private declaration"),
      (158, yyparsing  158 "a protected or private declaration"),
      (159, yyparsing  159 "a declaration of a native item"),
      (160, yyparsing  160 "binary expression"),
      (161, yyparsing  161 "an annotated item"),
      (162, yyparsing  162 "a term"),
      (163, yybadstart 163 "a sequence of one or more ','"),
      (164, yyparsing  164 "an annotated item"),
      (165, yyparsing  165 "an annotated item"),
      (166, yyexpect 166(yyfromCh ')')),
      (167, yyparsing  167 "a term"),
      (168, yybadstart 168 "an operator"),
      (169, yyparsing  169 "a term"),
      (170, yyparsing  170 "a term"),
      (171, yyparsing  171 "a term"),
      (172, yyparsing  172 "a lambda abstraction"),
      (173, yyparsing  173 "lambda patterns"),
      (174, yyparsing  174 "a module"),
      (175, yyparsing  175 "declarations"),
      (176, yyparsing  176 "a declaration"),
      (177, yyexpect 177(yyfromCh '{')),
      (178, yyparsing  178 "a function or pattern binding"),
      (179, yyparsing  179 "a term"),
      (180, yyparsing  180 "unary expression"),
      (181, yyparsing  181 "an operator"),
      (182, yyparsing  182 "an operator"),
      (183, yyparsing  183 "an operator"),
      (184, yyparsing  184 "some operators"),
      (185, yyparsing  185 "a fixity declaration"),
      (186, yyparsing  186 "an annotation"),
      (187, yyparsing  187 "a list of items to annotate"),
      (188, yyexpect 188(yyfromCh '{')),
      (189, yyparsing  189 "a data definition"),
      (190, yyparsing  190 "a guarded expression"),
      (191, yyparsing  191 "a function or pattern binding")];
    sub4 = [      (192, yyparsing  192 "a function or pattern binding"),
      (193, yyparsing  193 "guarded expressions"),
      (194, yyparsing  194 "binary expression"),
      (195, yyparsing  195 "binary expression"),
      (196, yyparsing  196 "function application"),
      (197, yyparsing  197 "a primary expression"),
      (198, yyexpect 198(yyfromId VARID)),
      (199, yyparsing  199 "a module"),
      (200, yyparsing  200 "a module"),
      (201, yyparsing  201 "a module clause"),
      (202, yyparsing  202 "words"),
      (203, yyparsing  203 "a module clause"),
      (204, yyparsing  204 "a module clause"),
      (205, yyparsing  205 "a module name"),
      (206, yyparsing  206 "a qualified constructor or type name"),
      (207, yyparsing  207 "a qualified variable name"),
      (208, yyparsing  208 "a module import"),
      (209, yyparsing  209 "a module import"),
      (210, yyparsing  210 "an import list"),
      (211, yyparsing  211 "an import list"),
      (212, yyparsing  212 "a module import"),
      (213, yyexpect 213(yyfromCh '(')),
      (214, yyparsing  214 "the type this module derives from"),
      (215, yybadstart 215 "the interfaces this module implements"),
      (216, yyexpect 216(yyfromCh ')')),
      (217, yyexpect 217(yyfromCh ')')),
      (218, yyexpect 218(yyfromCh ')')),
      (219, yyparsing  219 "a valid java identifier"),
      (220, yyparsing  220 "a valid java identifier"),
      (221, yybadstart 221 "a valid java identifier"),
      (222, yyparsing  222 "a valid java identifier"),
      (223, yyparsing  223 "a valid java identifier"),
      (224, yyparsing  224 "native generic type arguments"),
      (225, yyparsing  225 "a native item"),
      (226, yyparsing  226 "a valid java identifier"),
      (227, yyparsing  227 "a native item"),
      (228, yyparsing  228 "a native item"),
      (229, yybadstart 229 "native generic type arguments"),
      (230, yyparsing  230 "a specification of a native item"),
      (231, yyparsing  231 "a declaration of a native item"),
      (232, yyparsing  232 "a type variable"),
      (233, yyexpect 233(yyfromId VARID)),
      (234, yyparsing  234 "a data definition"),
      (235, yyparsing  235 "a sequence of type variables"),
      (236, yyexpect 236(yyfromCh '=')),
      (237, yyparsing  237 "a data definition"),
      (238, yyexpect 238(yyfromCh '=')),
      (239, yyexpect 239(yyfromId CONID)),
      (240, yyparsing  240 "simple constraints"),
      (241, yyexpect 241(yyfromCh ')')),
      (242, yyparsing  242 "simple constraint"),
      (243, yyexpect 243(yyfromId CONID)),
      (244, yyparsing  244 "a type class declaration"),
      (245, yyparsing  245 "instance constraints"),
      (246, yyexpect 246(yyfromCh ')')),
      (247, yyparsing  247 "a non function type"),
      (248, yyparsing  248 "a non function type"),
      (249, yyparsing  249 "a type constructor"),
      (250, yyparsing  250 "instance constraint"),
      (251, yyparsing  251 "a non function type"),
      (252, yyparsing  252 "a non function type"),
      (253, yyparsing  253 "instance head"),
      (254, yyparsing  254 "an instance declaration"),
      (255, yyparsing  255 "a type declaration")];
    sub5 = [      (256, yyexpect 256(yyfromCh '=')),
      (257, yyparsing  257 "binary expression"),
      (258, yyparsing  258 "a term"),
      (259, yyparsing  259 "unary expression"),
      (260, yyparsing  260 "then branch"),
      (261, yyexpect 261(yyfromId THEN)),
      (262, yyparsing  262 "a top level expression"),
      (263, yyparsing  263 "an expression"),
      (264, yyexpect 264(yyfromCh '{')),
      (265, yyparsing  265 "a function or pattern binding"),
      (266, yybadstart 266 "a where clause"),
      (267, yybadstart 267 "the next definition"),
      (268, yyexpect 268(yyfromCh '}')),
      (269, yyexpect 269(yyfromCh '{')),
      (270, yyparsing  270 "a list comprehension qualifier"),
      (271, yybadstart 271 "the next definition"),
      (272, yyparsing  272 "a list comprehension qualifier"),
      (273, yyexpect 273(yyfromCh '}')),
      (274, yyparsing  274 "an annotated item"),
      (275, yyparsing  275 "a sequence of one or more ','"),
      (276, yyparsing  276 "an annotated item"),
      (277, yyexpect 277(yyfromCh ')')),
      (278, yyparsing  278 "an annotated item"),
      (279, yyparsing  279 "a term"),
      (280, yyparsing  280 "a term"),
      (281, yyparsing  281 "a term"),
      (282, yyparsing  282 "a term"),
      (283, yyparsing  283 "an operator"),
      (284, yyparsing  284 "binary expression"),
      (285, yyexpect 285(yyfromCh ')')),
      (286, yyparsing  286 "list of expressions separated by ','"),
      (287, yyparsing  287 "a term"),
      (288, yyparsing  288 "a term"),
      (289, yyparsing  289 "a term"),
      (290, yyparsing  290 "a lambda body"),
      (291, yyparsing  291 "a lambda body"),
      (292, yyparsing  292 "a lambda abstraction"),
      (293, yyparsing  293 "lambda patterns"),
      (294, yyparsing  294 "declarations"),
      (295, yyparsing  295 "a where clause"),
      (296, yyparsing  296 "a term"),
      (297, yyparsing  297 "field"),
      (298, yyexpect 298(yyfromCh '}')),
      (299, yyparsing  299 "field list"),
      (300, yyparsing  300 "some operators"),
      (301, yyexpect 301(yyfromId VARID)),
      (302, yyparsing  302 "an annotation"),
      (303, yyparsing  303 "a qualified type"),
      (304, yyparsing  304 "a qualified type"),
      (305, yyparsing  305 "a constrained type"),
      (306, yyparsing  306 "a constrained type"),
      (307, yyparsing  307 "a type application"),
      (308, yyparsing  308 "non function types"),
      (309, yyparsing  309 "a list of items to annotate"),
      (310, yyparsing  310 "declarations local to a class, instance or type"),
      (311, yyparsing  311 "a guard qualifier"),
      (312, yyparsing  312 "guard qualifiers"),
      (313, yybadstart 313 "'='"),
      (314, yyparsing  314 "a function or pattern binding"),
      (315, yyparsing  315 "guarded expressions"),
      (316, yyparsing  316 "binary expression"),
      (317, yyparsing  317 "binary expression"),
      (318, yyparsing  318 "a primary expression"),
      (319, yyexpect 319(yyfromId VARID))];
    sub6 = [      (320, yyparsing  320 "a primary expression"),
      (321, yyparsing  321 "a primary expression"),
      (322, yyparsing  322 "a primary expression"),
      (323, yyparsing  323 "a primary expression"),
      (324, yyexpect 324(yyfromCh '}')),
      (325, yyparsing  325 "field list"),
      (326, yyexpect 326(yyfromCh '}')),
      (327, yyparsing  327 "a qualified variable name"),
      (328, yyexpect 328(yyfromCh ')')),
      (329, yyparsing  329 "a qualified variable name"),
      (330, yyparsing  330 "a list of qualified variable names"),
      (331, yyparsing  331 "a qualified variable name"),
      (332, yyparsing  332 "a module clause"),
      (333, yyparsing  333 "a module import"),
      (334, yyparsing  334 "a module import"),
      (335, yyparsing  335 "an import list"),
      (336, yyparsing  336 "an import item"),
      (337, yyparsing  337 "a qualified variable name"),
      (338, yyparsing  338 "an import specification"),
      (339, yyparsing  339 "an import list"),
      (340, yyexpect 340(yyfromCh ')')),
      (341, yyparsing  341 "a list of import items"),
      (342, yyparsing  342 "an import specification"),
      (343, yyparsing  343 "an import item"),
      (344, yyparsing  344 "an import item"),
      (345, yyparsing  345 "an import item"),
      (346, yyparsing  346 "an import item"),
      (347, yyparsing  347 "an import list"),
      (348, yyparsing  348 "the type this module derives from"),
      (349, yyparsing  349 "a non function type"),
      (350, yyparsing  350 "a non function type"),
      (351, yyparsing  351 "the interfaces this module implements"),
      (352, yyexpect 352(yyfromId WHERE)),
      (353, yyparsing  353 "an annotated item"),
      (354, yyparsing  354 "an annotated item"),
      (355, yyparsing  355 "an annotated item"),
      (356, yybadstart 356 "a valid java identifier"),
      (357, yyparsing  357 "a valid java identifier"),
      (358, yybadstart 358 "a valid java identifier"),
      (359, yyparsing  359 "native generic type arguments"),
      (360, yyparsing  360 "a list of types"),
      (361, yyexpect 361(yyfromCh '}')),
      (362, yyparsing  362 "a specification of a native item"),
      (363, yyparsing  363 "a method type with optional throws clause"),
      (364, yyparsing  364 "method types with optional throws clauses"),
      (365, yyparsing  365 "a declaration of a native item"),
      (366, yyexpect 366(yyfromId DCOLON)),
      (367, yyparsing  367 "a variant of an algebraic datatype"),
      (368, yyparsing  368 "a variant of an algebraic datatype"),
      (369, yyparsing  369 "a variant of an algebraic datatype"),
      (370, yyparsing  370 "a variant of an algebraic datatype"),
      (371, yyparsing  371 "a variant of an algebraic datatype"),
      (372, yyexpect 372(yyfromId CONID)),
      (373, yyexpect 373(yyfromId CONID)),
      (374, yyparsing  374 "a data definition"),
      (375, yyparsing  375 "a variant of an algebraic datatype"),
      (376, yyparsing  376 "a variant of an algebraic datatype"),
      (377, yyparsing  377 "a variant of an algebraic datatype"),
      (378, yyparsing  378 "a sequence of type variables"),
      (379, yyparsing  379 "a data definition"),
      (380, yyparsing  380 "a native data type"),
      (381, yyexpect 381(yyfromId NATIVE)),
      (382, yyexpect 382(yyfromId NATIVE)),
      (383, yyparsing  383 "a data definition")];
    sub7 = [      (384, yyparsing  384 "a data definition"),
      (385, yyparsing  385 "an algebraic datatype"),
      (386, yyparsing  386 "a data definition"),
      (387, yyparsing  387 "simple constraints"),
      (388, yyparsing  388 "type class context"),
      (389, yybadstart 389 "a type variable"),
      (390, yyparsing  390 "instance constraints"),
      (391, yyparsing  391 "instance context"),
      (392, yyparsing  392 "a type variable"),
      (393, yyexpect 393(yyfromCh ')')),
      (394, yyparsing  394 "a type constructor"),
      (395, yyparsing  395 "a non function type"),
      (396, yyexpect 396(yyfromCh ')')),
      (397, yyparsing  397 "a type constructor"),
      (398, yyexpect 398(yyfromCh ']')),
      (399, yybadstart 399 "a sequence of one or more ','"),
      (400, yyexpect 400(yyfromCh ']')),
      (401, yyparsing  401 "instance head"),
      (402, yyparsing  402 "a type declaration"),
      (403, yyparsing  403 "a type declaration"),
      (404, yyparsing  404 "a term"),
      (405, yyparsing  405 "a term"),
      (406, yyparsing  406 "a term"),
      (407, yyparsing  407 "then branch"),
      (408, yybadstart 408 "else branch"),
      (409, yyparsing  409 "an expression"),
      (410, yyparsing  410 "a top level expression"),
      (411, yyparsing  411 "declarations in a let expression or where clause"),
      (412, yyexpect 412(yyfromId IN)),
      (413, yyparsing  413 "a list comprehension qualifier"),
      (414, yyparsing  414 "a guard qualifier"),
      (415, yyparsing  415 "a list comprehension qualifier"),
      (416, yyparsing  416 "do expression qualifiers"),
      (417, yyparsing  417 "a primary expression"),
      (418, yyparsing  418 "a term"),
      (419, yyparsing  419 "list of expressions separated by ';'"),
      (420, yyexpect 420(yyfromCh ')')),
      (421, yyparsing  421 "list of expressions separated by ','"),
      (422, yyexpect 422(yyfromCh ')')),
      (423, yyparsing  423 "a term"),
      (424, yyparsing  424 "a term"),
      (425, yyparsing  425 "list of expressions separated by ','"),
      (426, yyparsing  426 "list comprehension qualifiers"),
      (427, yyexpect 427(yyfromCh ']')),
      (428, yyparsing  428 "a term"),
      (429, yyexpect 429(yyfromCh ']')),
      (430, yyparsing  430 "a lambda body"),
      (431, yyparsing  431 "a where clause"),
      (432, yyexpect 432(yyfromCh '}')),
      (433, yyparsing  433 "field"),
      (434, yyparsing  434 "a term"),
      (435, yyparsing  435 "field list"),
      (436, yyparsing  436 "a type variable bound in a forall"),
      (437, yybadstart 437 "'.' or 'â¢'"),
      (438, yyparsing  438 "type variables bound in a forall"),
      (439, yyparsing  439 "a type"),
      (440, yyparsing  440 "a constrained type"),
      (441, yyparsing  441 "non function types"),
      (442, yyparsing  442 "a protected or private local declaration"),
      (443, yyparsing  443 "a protected or private local declaration"),
      (444, yyparsing  444 "a protected or private local declaration"),
      (445, yyparsing  445 "declarations local to a class, instance or type"),
      (446, yyparsing  446 "a commented local declaration"),
      (447, yyparsing  447 "a protected or private local declaration")];
    sub8 = [      (448, yyexpect 448(yyfromCh '}')),
      (449, yybadstart 449 "the next definition"),
      (450, yyparsing  450 "a commented local declaration"),
      (451, yyparsing  451 "guard qualifiers"),
      (452, yyparsing  452 "'='"),
      (453, yyparsing  453 "'='"),
      (454, yyparsing  454 "a guarded expression"),
      (455, yyparsing  455 "a primary expression"),
      (456, yyexpect 456(yyfromCh '}')),
      (457, yyexpect 457(yyfromCh ']')),
      (458, yyparsing  458 "a primary expression"),
      (459, yyexpect 459(yyfromCh '}')),
      (460, yyparsing  460 "a primary expression"),
      (461, yyparsing  461 "a primary expression"),
      (462, yyparsing  462 "field list"),
      (463, yyparsing  463 "a module"),
      (464, yyparsing  464 "a qualified variable name"),
      (465, yyparsing  465 "a qualified variable name"),
      (466, yyparsing  466 "a module clause"),
      (467, yyparsing  467 "a list of qualified variable names"),
      (468, yyparsing  468 "a module import"),
      (469, yyparsing  469 "an import item"),
      (470, yyparsing  470 "a qualified variable name"),
      (471, yyparsing  471 "an import specification"),
      (472, yyparsing  472 "an import list"),
      (473, yyparsing  473 "a list of import items"),
      (474, yyparsing  474 "a simple name for a member or import item"),
      (475, yyparsing  475 "a simple name for a member or import item"),
      (476, yyparsing  476 "a simple name for a member or import item"),
      (477, yyparsing  477 "an import specification"),
      (478, yyexpect 478(yyfromCh ')')),
      (479, yyparsing  479 "a non function type"),
      (480, yyparsing  480 "the interfaces this module implements"),
      (481, yyexpect 481(yyfromCh '{')),
      (482, yyparsing  482 "specification for module class "),
      (483, yyparsing  483 "a valid java identifier"),
      (484, yyparsing  484 "a valid java identifier"),
      (485, yyparsing  485 "a list of types"),
      (486, yyparsing  486 "native generic type arguments"),
      (487, yyparsing  487 "a method type with optional throws clause"),
      (488, yyparsing  488 "method types with optional throws clauses"),
      (489, yyparsing  489 "a type variable"),
      (490, yyparsing  490 "a variant of an algebraic datatype"),
      (491, yyparsing  491 "constructor types"),
      (492, yyparsing  492 "a variant of an algebraic datatype"),
      (493, yyparsing  493 "a variant of an algebraic datatype"),
      (494, yyparsing  494 "a variant of an algebraic datatype"),
      (495, yyparsing  495 "a variant of an algebraic datatype"),
      (496, yyparsing  496 "a variant of an algebraic datatype"),
      (497, yyparsing  497 "a variant of an algebraic datatype"),
      (498, yyparsing  498 "a variant of an algebraic datatype"),
      (499, yyparsing  499 "a variant of an algebraic datatype"),
      (500, yyparsing  500 "a data definition"),
      (501, yyparsing  501 "a native data type"),
      (502, yyparsing  502 "a native data type"),
      (503, yybadstart 503 "native generic type arguments"),
      (504, yyparsing  504 "a data definition"),
      (505, yyparsing  505 "an algebraic datatype"),
      (506, yyparsing  506 "a data definition"),
      (507, yyparsing  507 "a data definition"),
      (508, yyparsing  508 "simple constraints"),
      (509, yybadstart 509 "declarations local to a class, instance or type"),
      (510, yyparsing  510 "instance constraints"),
      (511, yyparsing  511 "a type constructor")];
    sub9 = [      (512, yyparsing  512 "a non function type"),
      (513, yyparsing  513 "a non function type"),
      (514, yyparsing  514 "a non function type"),
      (515, yyparsing  515 "a type constructor"),
      (516, yyparsing  516 "a non function type"),
      (517, yyparsing  517 "instance head"),
      (518, yyparsing  518 "a type declaration"),
      (519, yyparsing  519 "else branch"),
      (520, yyexpect 520(yyfromId ELSE)),
      (521, yyparsing  521 "a top level expression"),
      (522, yyparsing  522 "a pattern"),
      (523, yyparsing  523 "case alternative"),
      (524, yybadstart 524 "a where clause"),
      (525, yyexpect 525(yyfromCh '}')),
      (526, yyparsing  526 "declarations in a let expression or where clause"),
      (527, yyparsing  527 "a top level expression"),
      (528, yyexpect 528(yyfromCh '}')),
      (529, yyparsing  529 "a guard qualifier"),
      (530, yyparsing  530 "a list comprehension qualifier"),
      (531, yyparsing  531 "do expression qualifiers"),
      (532, yyparsing  532 "list of expressions separated by ';'"),
      (533, yyparsing  533 "a term"),
      (534, yyparsing  534 "a term"),
      (535, yyparsing  535 "list comprehension qualifiers"),
      (536, yyparsing  536 "a term"),
      (537, yyparsing  537 "a term"),
      (538, yyparsing  538 "a where clause"),
      (539, yyparsing  539 "field"),
      (540, yyparsing  540 "field list"),
      (541, yyparsing  541 "'.' or 'â¢'"),
      (542, yyparsing  542 "'.' or 'â¢'"),
      (543, yyparsing  543 "a qualified type"),
      (544, yyparsing  544 "type variables bound in a forall"),
      (545, yyparsing  545 "a type"),
      (546, yyparsing  546 "a type"),
      (547, yyparsing  547 "a constrained type"),
      (548, yyparsing  548 "a protected or private local declaration"),
      (549, yyparsing  549 "a protected or private local declaration"),
      (550, yyparsing  550 "a protected or private local declaration"),
      (551, yyparsing  551 "a commented local declaration"),
      (552, yyparsing  552 "declarations local to a class, instance or type"),
      (553, yyparsing  553 "local declarations"),
      (554, yyparsing  554 "guard qualifiers"),
      (555, yyparsing  555 "a guarded expression"),
      (556, yyparsing  556 "a primary expression"),
      (557, yyexpect 557(yyfromCh '}')),
      (558, yyparsing  558 "a primary expression"),
      (559, yyparsing  559 "a primary expression"),
      (560, yyparsing  560 "a primary expression"),
      (561, yyparsing  561 "a primary expression"),
      (562, yyparsing  562 "field"),
      (563, yyparsing  563 "a primary expression"),
      (564, yyparsing  564 "a primary expression"),
      (565, yyparsing  565 "field"),
      (566, yyparsing  566 "field"),
      (567, yyparsing  567 "field list"),
      (568, yyparsing  568 "a qualified variable name"),
      (569, yyparsing  569 "a list of qualified variable names"),
      (570, yyparsing  570 "a member import specification"),
      (571, yyparsing  571 "an import item"),
      (572, yyexpect 572(yyfromCh ')')),
      (573, yyparsing  573 "a member import specification"),
      (574, yyparsing  574 "a list of member imports"),
      (575, yyparsing  575 "a list of import items")];
    sub10 = [      (576, yyparsing  576 "an import list"),
      (577, yyparsing  577 "a non function type"),
      (578, yyparsing  578 "java code"),
      (579, yyparsing  579 "a list of types"),
      (580, yyparsing  580 "a method type with optional throws clause"),
      (581, yyparsing  581 "method types with optional throws clauses"),
      (582, yyparsing  582 "a type kind"),
      (583, yyparsing  583 "a type kind"),
      (584, yyparsing  584 "a type kind"),
      (585, yyexpect 585(yyfromCh ')')),
      (586, yyparsing  586 "a type kind"),
      (587, yyparsing  587 "a field specification"),
      (588, yyparsing  588 "a field specification"),
      (589, yyexpect 589(yyfromId VARID)),
      (590, yyexpect 590(yyfromId VARID)),
      (591, yyparsing  591 "a constructor field"),
      (592, yyparsing  592 "a field specification"),
      (593, yyexpect 593(yyfromCh '}')),
      (594, yyparsing  594 "constructor fields"),
      (595, yyexpect 595(yyfromId DCOLON)),
      (596, yyparsing  596 "field specifications"),
      (597, yyparsing  597 "a field specification"),
      (598, yyparsing  598 "a field specification"),
      (599, yyparsing  599 "a native generic type"),
      (600, yyparsing  600 "an algebraic datatype"),
      (601, yyparsing  601 "a data definition"),
      (602, yyparsing  602 "a type class declaration"),
      (603, yyexpect 603(yyfromCh ')')),
      (604, yyparsing  604 "a list of types separated by '|'"),
      (605, yyexpect 605(yyfromCh ')')),
      (606, yyparsing  606 "else branch"),
      (607, yyparsing  607 "a top level expression"),
      (608, yyparsing  608 "case alternative"),
      (609, yyparsing  609 "case alternative"),
      (610, yyparsing  610 "list of case alternatives"),
      (611, yyparsing  611 "case alternative"),
      (612, yyparsing  612 "a top level expression"),
      (613, yyparsing  613 "a top level expression"),
      (614, yyparsing  614 "a list comprehension qualifier"),
      (615, yyparsing  615 "list of expressions separated by ';'"),
      (616, yyparsing  616 "list comprehension qualifiers"),
      (617, yyparsing  617 "a qualified type"),
      (618, yyparsing  618 "local declarations"),
      (619, yyparsing  619 "a primary expression"),
      (620, yyparsing  620 "a primary expression"),
      (621, yyparsing  621 "a primary expression"),
      (622, yyparsing  622 "field"),
      (623, yyparsing  623 "field"),
      (624, yyparsing  624 "a member import specification"),
      (625, yyparsing  625 "an import item"),
      (626, yyparsing  626 "a member import specification"),
      (627, yyparsing  627 "a list of member imports"),
      (628, yyparsing  628 "java token"),
      (629, yyparsing  629 "java token"),
      (630, yyparsing  630 "java token"),
      (631, yyparsing  631 "java token"),
      (632, yyparsing  632 "java token"),
      (633, yyparsing  633 "java token"),
      (634, yyparsing  634 "java token"),
      (635, yyparsing  635 "java token"),
      (636, yyparsing  636 "java token"),
      (637, yyparsing  637 "java token"),
      (638, yyparsing  638 "java token"),
      (639, yyparsing  639 "java token")];
    sub11 = [      (640, yyparsing  640 "java token"),
      (641, yyparsing  641 "java token"),
      (642, yyparsing  642 "java token"),
      (643, yyparsing  643 "java token"),
      (644, yyparsing  644 "java token"),
      (645, yyparsing  645 "java token"),
      (646, yyparsing  646 "java token"),
      (647, yyparsing  647 "java token"),
      (648, yyparsing  648 "java token"),
      (649, yyparsing  649 "java token"),
      (650, yyparsing  650 "java token"),
      (651, yyparsing  651 "java token"),
      (652, yyparsing  652 "java token"),
      (653, yyparsing  653 "java token"),
      (654, yyparsing  654 "java token"),
      (655, yyparsing  655 "java token"),
      (656, yyparsing  656 "java token"),
      (657, yyparsing  657 "java token"),
      (658, yyparsing  658 "java token"),
      (659, yyparsing  659 "java token"),
      (660, yyparsing  660 "java token"),
      (661, yyparsing  661 "java token"),
      (662, yyparsing  662 "java token"),
      (663, yyparsing  663 "java token"),
      (664, yyparsing  664 "java token"),
      (665, yyparsing  665 "java token"),
      (666, yyparsing  666 "java token"),
      (667, yyparsing  667 "java token"),
      (668, yyparsing  668 "java token"),
      (669, yyparsing  669 "java token"),
      (670, yyparsing  670 "java token"),
      (671, yyparsing  671 "java token"),
      (672, yyparsing  672 "java token"),
      (673, yyparsing  673 "java token"),
      (674, yyparsing  674 "java token"),
      (675, yyparsing  675 "java token"),
      (676, yyparsing  676 "java token"),
      (677, yyparsing  677 "java token"),
      (678, yyparsing  678 "java token"),
      (679, yyparsing  679 "java tokens"),
      (680, yyparsing  680 "java code"),
      (681, yyparsing  681 "java token"),
      (682, yyparsing  682 "java token"),
      (683, yyparsing  683 "java token"),
      (684, yyparsing  684 "java token"),
      (685, yyparsing  685 "java token"),
      (686, yyparsing  686 "java token"),
      (687, yyparsing  687 "java token"),
      (688, yyparsing  688 "java token"),
      (689, yyparsing  689 "java token"),
      (690, yyparsing  690 "java token"),
      (691, yyparsing  691 "java token"),
      (692, yyexpect 692(yyfromCh '}')),
      (693, yyparsing  693 "java tokens"),
      (694, yyexpect 694(yyfromCh ')')),
      (695, yyparsing  695 "a type variable"),
      (696, yyparsing  696 "a type kind"),
      (697, yyparsing  697 "a field specification"),
      (698, yyparsing  698 "a field specification"),
      (699, yyparsing  699 "a field specification"),
      (700, yyparsing  700 "a field specification"),
      (701, yyexpect 701(yyfromId DCOLON)),
      (702, yyparsing  702 "a variant of an algebraic datatype"),
      (703, yyparsing  703 "constructor fields")];
    sub12 = [      (704, yyparsing  704 "constructor fields"),
      (705, yyparsing  705 "a constructor field"),
      (706, yyparsing  706 "field specifications"),
      (707, yyparsing  707 "a non function type"),
      (708, yyparsing  708 "a list of types separated by '|'"),
      (709, yyparsing  709 "a non function type"),
      (710, yyparsing  710 "case alternative"),
      (711, yyparsing  711 "list of case alternatives"),
      (712, yyparsing  712 "a list of member imports"),
      (713, yyparsing  713 "java tokens"),
      (714, yyexpect 714(yyfromCh '}')),
      (715, yyparsing  715 "java code"),
      (716, yyparsing  716 "java tokens"),
      (717, yyparsing  717 "a type kind"),
      (718, yyparsing  718 "a type kind"),
      (719, yyparsing  719 "a constructor field"),
      (720, yyparsing  720 "constructor fields"),
      (721, yyparsing  721 "constructor fields"),
      (722, yyparsing  722 "a constructor field"),
      (723, yyparsing  723 "field specifications"),
      (724, yyparsing  724 "a list of types separated by '|'"),
      (725, yyparsing  725 "java tokens"),
      (726, yyparsing  726 "java tokens"),
      (727, yyparsing  727 "a constructor field"),
      (728, yyparsing  728 "java tokens")];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` sub12 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11 ++ sub12);
private yyeacts = let 
    sub1 = [      (5, yyAccept),
      (8, (-27)),
      (9, (-17)),
      (11, (-174)),
      (12, (-12)),
      (14, (-179)),
      (15, (-180)),
      (16, (-177)),
      (17, (-175)),
      (18, (-176)),
      (19, (-178)),
      (20, (-15)),
      (22, (-20)),
      (25, (-188)),
      (27, (-119)),
      (39, (-349)),
      (40, (-350)),
      (50, (-353)),
      (51, (-352)),
      (52, (-355)),
      (53, (-356)),
      (54, (-357)),
      (55, (-351)),
      (56, (-358)),
      (57, (-354)),
      (61, (-197)),
      (62, (-196)),
      (64, (-427)),
      (66, (-29)),
      (67, (-32)),
      (68, (-34)),
      (69, (-35)),
      (70, (-43)),
      (71, (-121)),
      (72, (-40)),
      (73, (-41)),
      (74, (-42)),
      (75, (-120)),
      (76, (-122)),
      (77, (-123)),
      (78, (-124)),
      (79, (-125)),
      (80, (-129)),
      (81, (-130)),
      (82, (-131)),
      (83, (-208)),
      (84, (-425)),
      (85, (-428)),
      (90, (-215)),
      (91, (-340)),
      (94, (-426)),
      (95, (-401)),
      (96, (-397)),
      (97, (-402)),
      (98, (-403)),
      (99, (-405)),
      (101, (-411)),
      (102, (-24)),
      (109, (-28)),
      (110, (-18)),
      (111, (-14)),
      (113, (-22)),
      (114, (-189)),
      (115, (-187))];
    sub2 = [      (117, (-190)),
      (118, (-184)),
      (119, (-147)),
      (120, (-198)),
      (121, (-200)),
      (122, (-199)),
      (123, (-173)),
      (125, (-195)),
      (126, (-218)),
      (128, (-219)),
      (129, (-217)),
      (130, (-216)),
      (138, (-274)),
      (139, (-340)),
      (142, (-282)),
      (143, (-285)),
      (144, (-340)),
      (145, (-39)),
      (147, (-185)),
      (150, (-389)),
      (152, (-287)),
      (156, (-36)),
      (157, (-37)),
      (158, (-38)),
      (159, (-214)),
      (160, (-396)),
      (162, (-431)),
      (169, (-442)),
      (174, (-3)),
      (175, (-30)),
      (176, (-33)),
      (178, (-347)),
      (180, (-406)),
      (181, (-202)),
      (182, (-203)),
      (183, (-201)),
      (184, (-204)),
      (185, (-206)),
      (189, (-288)),
      (192, (-346)),
      (193, (-377)),
      (196, (-404)),
      (200, (-1)),
      (202, (-26)),
      (203, (-19)),
      (205, (-13)),
      (206, (-186)),
      (207, (-183)),
      (209, (-147)),
      (210, (-147)),
      (212, (-144)),
      (219, (-5)),
      (220, (-6)),
      (222, (-7)),
      (223, (-11)),
      (225, (-220)),
      (226, (-4)),
      (227, (-221)),
      (228, (-222)),
      (230, (-225)),
      (232, (-258)),
      (242, (-270)),
      (244, (-277)),
      (249, (-260))];
    sub3 = [      (250, (-278)),
      (251, (-252)),
      (252, (-253)),
      (254, (-286)),
      (260, (-391)),
      (265, (-139)),
      (272, (-362)),
      (275, (-448)),
      (279, (-432)),
      (281, (-441)),
      (289, (-443)),
      (291, (-386)),
      (292, (-385)),
      (293, (-408)),
      (294, (-31)),
      (296, (-429)),
      (300, (-205)),
      (302, (-207)),
      (303, (-235)),
      (304, (-236)),
      (305, (-242)),
      (306, (-241)),
      (307, (-251)),
      (308, (-320)),
      (309, (-213)),
      (314, (-345)),
      (315, (-378)),
      (316, (-394)),
      (317, (-395)),
      (318, (-413)),
      (321, (-414)),
      (322, (-415)),
      (329, (-194)),
      (331, (-193)),
      (332, (-21)),
      (333, (-147)),
      (334, (-146)),
      (335, (-151)),
      (339, (-149)),
      (343, (-155)),
      (344, (-158)),
      (345, (-159)),
      (346, (-160)),
      (348, (-46)),
      (349, (-245)),
      (350, (-244)),
      (353, (-211)),
      (354, (-209)),
      (355, (-210)),
      (357, (-10)),
      (359, (-295)),
      (360, (-247)),
      (362, (-223)),
      (363, (-228)),
      (364, (-229)),
      (365, (-231)),
      (367, (-316)),
      (374, (-301)),
      (375, (-306)),
      (376, (-309)),
      (377, (-315)),
      (378, (-303)),
      (380, (-291)),
      (384, (-299))];
    sub4 = [      (385, (-304)),
      (388, (-275)),
      (391, (-283)),
      (394, (-262)),
      (397, (-261)),
      (402, (-338)),
      (404, (-435)),
      (405, (-434)),
      (406, (-433)),
      (407, (-390)),
      (409, (-388)),
      (417, (-412)),
      (418, (-436)),
      (423, (-438)),
      (424, (-437)),
      (425, (-461)),
      (428, (-444)),
      (430, (-387)),
      (431, (-343)),
      (434, (-430)),
      (436, (-234)),
      (441, (-321)),
      (445, (-341)),
      (447, (-132)),
      (450, (-138)),
      (452, (-360)),
      (453, (-361)),
      (461, (-419)),
      (463, (-2)),
      (465, (-192)),
      (466, (-23)),
      (468, (-145)),
      (471, (-163)),
      (472, (-150)),
      (474, (-170)),
      (475, (-171)),
      (476, (-172)),
      (477, (-162)),
      (480, (-48)),
      (482, (-44)),
      (483, (-8)),
      (484, (-9)),
      (486, (-294)),
      (491, (-319)),
      (492, (-318)),
      (493, (-308)),
      (494, (-311)),
      (495, (-312)),
      (496, (-310)),
      (497, (-314)),
      (498, (-313)),
      (499, (-307)),
      (500, (-300)),
      (501, (-289)),
      (502, (-290)),
      (503, (-292)),
      (504, (-296)),
      (507, (-298)),
      (508, (-273)),
      (509, (-340)),
      (510, (-281)),
      (511, (-264)),
      (512, (-254)),
      (515, (-263))];
    sub5 = [      (516, (-257)),
      (517, (-284)),
      (518, (-339)),
      (519, (-393)),
      (522, (-359)),
      (526, (-143)),
      (529, (-372)),
      (530, (-363)),
      (531, (-370)),
      (533, (-440)),
      (534, (-439)),
      (536, (-446)),
      (537, (-445)),
      (538, (-344)),
      (539, (-458)),
      (540, (-450)),
      (541, (-239)),
      (542, (-238)),
      (544, (-233)),
      (545, (-242)),
      (546, (-243)),
      (547, (-240)),
      (548, (-133)),
      (549, (-134)),
      (550, (-135)),
      (551, (-137)),
      (552, (-342)),
      (554, (-374)),
      (555, (-376)),
      (559, (-423)),
      (560, (-424)),
      (561, (-418)),
      (562, (-455)),
      (563, (-416)),
      (564, (-417)),
      (565, (-456)),
      (567, (-453)),
      (568, (-191)),
      (569, (-182)),
      (571, (-157)),
      (575, (-154)),
      (576, (-148)),
      (577, (-246)),
      (579, (-248)),
      (580, (-227)),
      (581, (-230)),
      (582, (-268)),
      (583, (-267)),
      (592, (-337)),
      (597, (-331)),
      (598, (-334)),
      (599, (-293)),
      (600, (-305)),
      (601, (-297)),
      (602, (-276)),
      (606, (-392)),
      (607, (-398)),
      (608, (-380)),
      (611, (-381)),
      (612, (-399)),
      (613, (-400)),
      (615, (-464)),
      (616, (-366)),
      (617, (-237))];
    sub6 = [      (618, (-128)),
      (619, (-422)),
      (620, (-420)),
      (621, (-421)),
      (624, (-166)),
      (625, (-156)),
      (626, (-165)),
      (628, (-51)),
      (629, (-52)),
      (630, (-53)),
      (631, (-54)),
      (632, (-55)),
      (633, (-56)),
      (634, (-57)),
      (635, (-58)),
      (636, (-59)),
      (637, (-60)),
      (638, (-61)),
      (639, (-62)),
      (640, (-63)),
      (641, (-64)),
      (642, (-65)),
      (643, (-66)),
      (644, (-67)),
      (645, (-68)),
      (646, (-69)),
      (647, (-70)),
      (648, (-71)),
      (649, (-72)),
      (650, (-73)),
      (651, (-74)),
      (652, (-75)),
      (653, (-76)),
      (654, (-77)),
      (655, (-78)),
      (656, (-79)),
      (657, (-80)),
      (658, (-81)),
      (659, (-82)),
      (660, (-83)),
      (661, (-84)),
      (662, (-85)),
      (663, (-86)),
      (664, (-87)),
      (665, (-88)),
      (666, (-89)),
      (667, (-90)),
      (668, (-91)),
      (669, (-92)),
      (670, (-93)),
      (671, (-94)),
      (672, (-95)),
      (673, (-96)),
      (674, (-97)),
      (675, (-98)),
      (676, (-99)),
      (677, (-108)),
      (678, (-109)),
      (680, (-50)),
      (681, (-106)),
      (682, (-104)),
      (683, (-105)),
      (684, (-100)),
      (685, (-101))];
    sub7 = [      (686, (-102)),
      (687, (-103)),
      (688, (-107)),
      (689, (-110)),
      (690, (-111)),
      (691, (-112)),
      (695, (-259)),
      (697, (-333)),
      (698, (-332)),
      (699, (-336)),
      (700, (-335)),
      (702, (-317)),
      (707, (-255)),
      (709, (-256)),
      (710, (-379)),
      (711, (-383)),
      (712, (-169)),
      (715, (-49)),
      (716, (-114)),
      (717, (-269)),
      (718, (-265)),
      (720, (-326)),
      (721, (-325)),
      (722, (-327)),
      (723, (-330)),
      (724, (-250)),
      (725, (-118)),
      (727, (-328)),
      (728, (-116))];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);


decodeArr s1 s2 = arrayFromIndexList (zip (un s1) (un s2))
    where
        un :: String -> [Int]
        un s = (map ord . unpacked) s

private yygo0 = decodeArr "\u0001\u0002\u0003\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017" "\u0005\u0005\u0005\u0007\u0007\u0007\u0006\u0006\u0006\u0006\u0006"
private yygo1 = decodeArr "\u0010\u0011\u0012\u001b\u001c" "\t\t\t\n\n"
private yygo2 = decodeArr "\f\r\u000e\u000fÂ®Â¯Â°Â±Â²Â³Â´" "\u0014\u0014\u0014\u0016\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo4 = decodeArr "\u001d\u001e\u001f !\"#$%&'()*+,wxyz{|}\u0081\u0082\u0083\u0090\u0091\u0092Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "AAABBBBEEEEDDDDJCFFFFFFOOOHHHSTTTUUUVVWWWIPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo6 = decodeArr "\u0018\u0019\u001a" "jii"
private yygo8 = decodeArr "\u001b\u001c" "mm"
private yygo10 = decodeArr "\u0010\u0011\u0012" "nnn"
private yygo13 = decodeArr "\f\r\u000eÂ®Â¯Â°Â±Â²Â³Â´" "ooo\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo23 = decodeArr "\f\r\u000e\u000fÂ®Â¯Â°Â±Â²Â³Â´" "\u0014\u0014\u0014q\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo26 = decodeArr "Â½Â¾ÃÃ" "vvuu"
private yygo28 = decodeArr "\f\r\u000e\u000fÂ®Â¯Â°Â±Â²Â³Â´" "\u0014\u0014\u0014w\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo32 = decodeArr "Â­ÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢" "S\u0080\u0081\u0081\u0082\u0082\u0082\u0082\u0083\u0083\u0083\u0083\u0084\u0084\u0084\u0084"
private yygo35 = decodeArr "ÂºÂ»Â¼ÄÄÄ" "\u0089\u0089\u0089\u008a\u008b\u008b"
private yygo36 = decodeArr "ÂºÂ»Â¼ÄÄÄÄÄ" "\u008d\u008d\u008d\u008e\u008f\u008f\u0090\u0090"
private yygo37 = decodeArr "Ä Ä¨Ä©ÄªÄ«Ä¬Ä­" "\u0091[[[[[["
private yygo41 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_\u0095\u0095\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo42 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_\u0097\u0097\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo43 = decodeArr "ÂºÂ»Â¼ÄÄÄÄÄ" "\u008d\u008d\u008d\u008e\u008f\u008f\u0098\u0098"
private yygo46 = decodeArr "xyz{|}\u0081\u0082\u0083Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "\u009c\u009c\u009c\u009c\u009c\u009cOOOSTTTUUUVVPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo47 = decodeArr "xyz{|}\u0081\u0082\u0083Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "\u009d\u009d\u009d\u009d\u009d\u009dOOOSTTTUUUVVPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo48 = decodeArr "xyz{|}\u0081\u0082\u0083Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "\u009e\u009e\u009e\u009e\u009e\u009eOOOSTTTUUUVVPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo49 = decodeArr "Ã§" "\u009f"
private yygo58 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Â Â Â Â Â aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo59 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿Ç" "TTTUUUÂ¤Â¥Â¥^^^^^^^^^^_Â§Â§Â¨Â¨Â¨Â¨`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÂ¦Â¦"
private yygo60 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾ÇÇÇ" "TTTUUUVV^^^^^^^^^^_ÂªÂª\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÂ«Â«Â«"
private yygo63 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Â­Â­Â¬Â¬ddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo66 = decodeArr "\u001b\u001c" "Â¯Â¯"
private yygo67 = decodeArr " !\"#$%&'()*+,wxyz{|}\u0081\u0082\u0083\u0090\u0091\u0092Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "Â°Â°Â°Â°EEEEDDDDJCFFFFFFOOOHHHSTTTUUUVVWWWIPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo82 = decodeArr "ÅÅ" "Â²Â²"
private yygo86 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Â´Â´ddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo87 = decodeArr "ÃÃÃÃÃÃ" "Â·Â¸Â¸Â¸Â¹Â¹"
private yygo91 = decodeArr "ÅÅÅ" "Â½Â½Â½"
private yygo92 = decodeArr "Å¸Å¹Åº" "ÃÃÃ"
private yygo97 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÃÃddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo104 = decodeArr "\u001d\u001e\u001f !\"#$%&'()*+,wxyz{|}\u0081\u0082\u0083\u0090\u0091\u0092Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "ÃÃÃBBBBEEEEDDDDJCFFFFFFOOOHHHSTTTUUUVVWWWIPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo106 = decodeArr "\u0018\u0019\u001a" "jÃÃ"
private yygo107 = decodeArr "\f\r\u000e\u000fÂ®Â¯Â°Â±Â²Â³Â´" "\u0014\u0014\u0014Ã\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo112 = decodeArr "\f\r\u000eÂ®Â¯Â°Â±Â²Â³Â´" "ÃÃÃ\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo116 = decodeArr "Â½Â¾ÃÃ" "ÃÃuu"
private yygo119 = decodeArr "\u0093\u0094\u0095\u0096\u0097Â­" "ÃÃÃÃÃÃ"
private yygo124 = decodeArr "-." "ÃÃ"
private yygo127 = decodeArr "ÃÃÃ" "ÃÃÃ"
private yygo131 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÃÃÃÃÃÃÄ¦Ä§" "Ã¡Ã¢Ã¢Ã¢Ã¢Ã¢Ã¢Ã¢Ã£Ã¤Ã¤Ã¥Ã¥Ã¥Ã¦Ã¦"
private yygo133 = decodeArr "ÄÄÄ®Ä¯" "Ã«Ã«Ã¬Ã¬"
private yygo134 = decodeArr "ÄÄÄ®Ä¯" "Ã«Ã«Ã®Ã®"
private yygo136 = decodeArr "ÂºÂ»Â¼ÄÄÄÄ" "\u0089\u0089\u0089Ã°Ã±Ã±Ã±"
private yygo137 = decodeArr "ÄÄ" "Ã²Ã²"
private yygo139 = decodeArr "ÅÅÅ" "Ã´Ã´Ã´"
private yygo140 = decodeArr "ÂºÂ»Â¼ÄÄÄÄ" "\u008d\u008d\u008dÃµÃ¶Ã¶Ã¶"
private yygo141 = decodeArr "ÂºÂ»Â¼Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄ" "Ã¹Ã¹Ã¹ÃºÃºÃºÃºÃºÃºÃ»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼"
private yygo144 = decodeArr "ÅÅÅ" "Ã¾Ã¾Ã¾"
private yygo146 = decodeArr "ÄÄÄ®Ä¯" "Ã«Ã«ÄÄ"
private yygo148 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾Æ¿Ç" "TTTUUUÄÄÄ^^^^^^^^^^_Â§Â§Â¨Â¨Â¨Â¨`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÂ¦Â¦"
private yygo149 = decodeArr "ÆÆ" "ÄÄ"
private yygo153 = decodeArr "\u008b\u008c\u008d\u008e\u008fÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "ÄÄÄÄÄSTTTUUUVVÄYYYYXXÄÄÄ\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo154 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÅªÅ«Å¬Å°Å±Å²Å³Å´ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÄÄÄÄÄÄÄÄ_ÄÄ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo155 = decodeArr "Â­ÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢" "S\u0080\u0081\u0081\u0082\u0082\u0082\u0082\u0083\u0083\u0083\u0083\u0084\u0084\u0084\u0084"
private yygo161 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Â Â Â Â Â aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo163 = decodeArr "Æ¿Ç" "ÄÄ"
private yygo164 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÄÄ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo165 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Â´Â´ddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo168 = decodeArr "Ã" "Ä"
private yygo172 = decodeArr "ÆÆÆ" "Ä£Ä¤Ä¤"
private yygo173 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Â­Â­Ä¥Ä¥ddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo175 = decodeArr "\u001d\u001e\u001f !\"#$%&'()*+,wxyz{|}\u0081\u0082\u0083\u0090\u0091\u0092Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "Ä¦Ä¦Ä¦BBBBEEEEDDDDJCFFFFFFOOOHHHSTTTUUUVVWWWIPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo179 = decodeArr "Â­ÇÇÇÇÇ" "Ä©ÄªÄªÄªÄ«Ä«"
private yygo184 = decodeArr "ÃÃÃÃÃÃ" "Â·Â¸Â¸Â¸Ä¬Ä¬"
private yygo186 = decodeArr "ÂºÂ»Â¼Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹Ä®Ä®Ä¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo187 = decodeArr "Â­ÃÃÃÃÃÃ" "SYYYYÄµÄµ"
private yygo190 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å³Å´ÅµÅ¶Å·ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Ä¸Ä¸Ä¹Ä¹Ä¹_Ä·Ä·\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo191 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÄºÄº\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo193 = decodeArr "Å¸Å¹Åº" "ÃÄ»Ä»"
private yygo194 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Ä¼Ä¼Ä¼Ä¼`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo195 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Ä½Ä½Ä½Ä½`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo197 = decodeArr "ÃÃÃ" "ÅÅÅ"
private yygo198 = decodeArr "ÇÇÇÇÇÇ" "ÅÅÅÅÅÅ"
private yygo199 = decodeArr "\u001d\u001e\u001f !\"#$%&'()*+,wxyz{|}\u0081\u0082\u0083\u0090\u0091\u0092Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ§ÄÄÄÄÄ Ä¨Ä©ÄªÄ«Ä¬Ä­ÅÅÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "ÅÅÅBBBBEEEEDDDDJCFFFFFFOOOHHHSTTTUUUVVWWWIPYYYYXXQQZLLMNG[[[[[[KKRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo201 = decodeArr "ÂµÂ¶Â½Â¾Â¿ÃÃÃÃÃÃ" "ÅÅÅÅÅÅÅÅÅuu"
private yygo204 = decodeArr "\f\r\u000e\u000fÂ®Â¯Â°Â±Â²Â³Â´" "\u0014\u0014\u0014Å\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo209 = decodeArr "\u0093\u0094\u0095\u0096\u0097Â­" "ÅÅÅÅÅÃ"
private yygo210 = decodeArr "\u0093\u0094\u0095\u0096\u0097Â­" "ÅÅÅÅÅÃ"
private yygo211 = decodeArr "\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃ" "ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ"
private yygo214 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÅÅÅÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo215 = decodeArr "/0" "Å Å "
private yygo221 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Å¥Å¥Å¥Å¥Å¥Å¥Å¥"
private yygo224 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã·Ã¸Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÅ¨Å¨Å¨Å©Å©ÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo229 = decodeArr "Ä¦Ä§" "ÅªÅª"
private yygo231 = decodeArr "ÂºÂ»Â¼Ã£Ã¤Ã¥Ã¦Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹Å¬Å¬Å­Å­Å«Å«Ä¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo234 = decodeArr "Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Å¶Å¶Å¶Å·Å·Å·Å·Å¸Å¸Å¸Å¹Å¹Å¹"
private yygo235 = decodeArr "ÄÄÄ®Ä¯" "Ã«Ã«ÅºÅº"
private yygo237 = decodeArr "Ä¡Ä¢Ä£Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Å¿Å¿Å¿ÆÆÆÆÆÅ·Å·Å·Å·Å¸Å¸Å¸Å¹Å¹Å¹"
private yygo247 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅÆ¿Ç" "Ã¹Ã¹Ã¹ÅÆÆÆÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³ÆÆ"
private yygo248 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÆÆÆÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo253 = decodeArr "ÂºÂ»Â¼ÄÄÄÄÄ" "Ã¹Ã¹Ã¹ÆÆÆÆÆ"
private yygo255 = decodeArr "ÂºÂ»Â¼Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÆÆÄ¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo257 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Â Â Â Â Â aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo258 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÄÄ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo259 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Â´Â´ddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo262 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÆÆ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo263 = decodeArr "ÂºÂ»Â¼Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÆÆÄ¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo266 = decodeArr "ÅÅ" "Â²Â²"
private yygo267 = decodeArr "\u001b\u001c" "ÆÆ"
private yygo271 = decodeArr "\u001b\u001c" "Æ Æ "
private yygo280 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾ÇÇÇ" "TTTUUUVV^^^^^^^^^^_Æ£Æ£\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÆ¤Æ¤Æ¤"
private yygo282 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾ÇÇÇ" "TTTUUUVV^^^^^^^^^^_Æ¥Æ¥\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÆ¦Æ¦Æ¦"
private yygo283 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Ä¼Ä¼Ä¼Ä¼`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo284 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Ä½Ä½Ä½Ä½`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo286 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾ÇÇÇ" "TTTUUUVV^^^^^^^^^^_Æ¥Æ¥\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÆ©Æ©Æ©"
private yygo287 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÅªÅ«Å¬Å­Å®Å¯Å³Å´ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÆªÆªÆªÆ«Æ«Æ«ÄÄ_ÄÄ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo288 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Æ­Æ­\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo290 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_Æ®Æ®\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo295 = decodeArr "\u008b\u008c\u008d\u008e\u008fÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "ÄÄÆ°Æ°Æ°STTTUUUVVÄYYYYXXÄÄÄ\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo301 = decodeArr "Ã¨Ã©Ãª" "ÆµÆµÆ¶"
private yygo308 = decodeArr "ÂºÂ»Â¼Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Æ¹Æ¹"
private yygo310 = decodeArr "w~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008aÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "Æ¾ÇÇÇÆ¿Æ¿Æ¿ÇÇÇÇÇÇÇSTTTUUUVVPYYYYXXQQZRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo313 = decodeArr "Å¨Å©" "ÇÇ"
private yygo319 = decodeArr "ÇÇÇÇÇÇ" "ÇÇÇÅÅÅ"
private yygo320 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÇÇ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo327 = decodeArr "Â½Â¾ÃÃ" "ÇÇuu"
private yygo333 = decodeArr "\u0093\u0094\u0095\u0096\u0097Â­" "ÇÇÇÇÇÃ"
private yygo337 = decodeArr "Â½Â¾ÃÃ" "vvuu"
private yygo338 = decodeArr "\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃ" "ÅÅÅÅÅÅÇÇÇÅÅÅÅÅÅÅÅÅ"
private yygo342 = decodeArr "ÂªÂ«Â¬Ã" "ÇÇÇÇ"
private yygo347 = decodeArr "\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃ" "ÇÇÇÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ"
private yygo351 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã·Ã¸Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÅ¨Å¨Å¨Ç Ç ÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo352 = decodeArr "12" "Ç¢Ç¢"
private yygo356 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Ç£Ç£Ç£Ç£Ç£Ç£Ç£"
private yygo358 = decodeArr "\u0005\u0006\u0007\b\t\n\u000b" "Ç¤Ç¤Ç¤Ç¤Ç¤Ç¤Ç¤"
private yygo367 = decodeArr "ÂºÂ»Â¼Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÄ¿ÅÅ" "Ã¹Ã¹Ã¹Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ç¬Ç«Ç«"
private yygo368 = decodeArr "ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Ç­Ç­Ç­Ç­Å¸Å¸Å¸Å¹Å¹Å¹"
private yygo369 = decodeArr "Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Ç®Ç®Ç®Å¹Å¹Å¹"
private yygo370 = decodeArr "Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Ç¯Ç¯Ç¯Å¹Å¹Å¹"
private yygo371 = decodeArr "Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Ç°Ç°Ç°Å¹Å¹Å¹"
private yygo372 = decodeArr "Ä¼Ä½Ä¾" "Ç±Ç±Ç±"
private yygo373 = decodeArr "Ä¼Ä½Ä¾" "Ç²Ç²Ç²"
private yygo379 = decodeArr "Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾" "Ç´Ç´Ç´Å·Å·Å·Å·Å¸Å¸Å¸Å¹Å¹Å¹"
private yygo383 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÄ¤Ä¥" "Ç·Ã¢Ã¢Ã¢Ã¢Ã¢Ã¢Ã¢Ç¸Ç¸"
private yygo386 = decodeArr "Ä¡Ä¢Ä£Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾" "ÇºÇºÇºÇ»Ç»ÆÆÆÅ·Å·Å·Å·Å¸Å¸Å¸Å¹Å¹Å¹"
private yygo387 = decodeArr "ÂºÂ»Â¼ÄÄÄÄ" "\u0089\u0089\u0089Ã°Ç¼Ç¼Ç¼"
private yygo389 = decodeArr "ÄÄ" "Ç½Ç½"
private yygo390 = decodeArr "ÂºÂ»Â¼ÄÄÄÄ" "\u008d\u008d\u008dÃµÇ¾Ç¾Ç¾"
private yygo399 = decodeArr "Æ¿Ç" "ÆÆ"
private yygo401 = decodeArr "ÂºÂ»Â¼Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄ" "Ã¹Ã¹Ã¹ÈÈÈÈÈÈÃ»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼"
private yygo403 = decodeArr "ÂºÂ»Â¼Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÈÈÄ¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo408 = decodeArr "ÆÆ" "ÈÈ"
private yygo410 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÈÈÈÈÈÈÈ_ÈÈ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo411 = decodeArr "\u008b\u008c\u008d\u008e\u008fÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "ÄÄÈÈÈSTTTUUUVVÄYYYYXXÄÄÄ\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo413 = decodeArr "\u008b\u008c\u008d\u008e\u008fÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "ÄÄÈÈÈSTTTUUUVVÄYYYYXXÄÄÄ\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo414 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÈÈ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo415 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÈÈ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo416 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÅªÅ«Å¬Å°Å±Å²Å³Å´ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÄÄÄÈÈÈÄÄ_ÄÄ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo433 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÈÈ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo435 = decodeArr "Â­ÇÇÇÇÇ" "Ä©ÈÈÈÄ«Ä«"
private yygo437 = decodeArr "Ã®Ã¯" "ÈÈ"
private yygo438 = decodeArr "Ã¨Ã©Ãª" "È È Æ¶"
private yygo439 = decodeArr "ÂºÂ»Â¼Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹È¢È¢È¡Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo440 = decodeArr "ÂºÂ»Â¼Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹È£È£È¡Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo442 = decodeArr "\u0081\u0082\u0083Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "È¤È¤È¤STTTUUUVVPYYYYXXQQZRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo443 = decodeArr "\u0081\u0082\u0083Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "È¥È¥È¥STTTUUUVVPYYYYXXQQZRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo444 = decodeArr "\u0081\u0082\u0083Â­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "È¦È¦È¦STTTUUUVVPYYYYXXQQZRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo446 = decodeArr "w\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008aÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "Æ¾Æ¿Æ¿Æ¿ÇÇÇÇÈ§È§È§STTTUUUVVPYYYYXXQQZRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo449 = decodeArr "\u001b\u001c" "È©È©"
private yygo451 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å³Å´ÅµÅ¶Å·ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^Ä¸Ä¸ÈªÈªÈª_Ä·Ä·\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo454 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_È«È«\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo458 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_È²È²\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo460 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÈµÈµ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo462 = decodeArr "ÇÇÇÇÇÇ" "È·È·È·ÅÅÅ"
private yygo464 = decodeArr "Â½Â¾ÃÃ" "È¸È¸uu"
private yygo467 = decodeArr "ÂµÂ¶Â½Â¾Â¿ÃÃÃÃÃÃ" "È¹È¹ÅÅÅÅÅÅÅuu"
private yygo469 = decodeArr "Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Ã" "È¾È¾È¾È¼È¼È¼È½È½È½Ç"
private yygo470 = decodeArr "Â½Â¾ÃÃ" "ÃÃuu"
private yygo473 = decodeArr "\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡Â¢Â£Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃ" "È¿È¿È¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ"
private yygo479 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÉÉÉÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo485 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã·Ã¸Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÅ¨Å¨Å¨ÉÉÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo487 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã·Ã¸Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÅ¨Å¨Å¨ÉÉÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo488 = decodeArr "ÂºÂ»Â¼Ã£Ã¤Ã¥Ã¦Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹Å¬Å¬ÉÉÅ«Å«Ä¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo489 = decodeArr "ÄÄÄÄÄ" "ÉÉÉÉÉ"
private yygo490 = decodeArr "\u0010\u0011\u0012Â­ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "ÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉ"
private yygo503 = decodeArr "Ä¦Ä§" "ÉÉ"
private yygo505 = decodeArr "Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·Ä¸Ä¹ÄºÄ»Ä¼Ä½Ä¾" "ÉÉÆÆÆÅ·Å·Å·Å·Å¸Å¸Å¸Å¹Å¹Å¹"
private yygo506 = decodeArr "\u0004\u0005\u0006\u0007\b\t\n\u000bÄ¤Ä¥" "Ç·Ã¢Ã¢Ã¢Ã¢Ã¢Ã¢Ã¢ÉÉ"
private yygo509 = decodeArr "ÅÅÅ" "ÉÉÉ"
private yygo513 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã·Ã¸Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÅ¨Å¨Å¨ÉÉÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo514 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÉÉÉÉÉÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo521 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÉÉ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo523 = decodeArr "Å¨Å©Å¸Å¹Åº" "É¡É¡ÃÉ É "
private yygo524 = decodeArr "ÅÅ" "É£É£"
private yygo527 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_É¥É¥\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo532 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾ÇÇÇ" "TTTUUUVV^^^^^^^^^^_Æ£Æ£\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeeeÉ§É§É§"
private yygo535 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÅªÅ«Å¬Å­Å®Å¯Å³Å´ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÆªÆªÆªÉ¨É¨É¨ÄÄ_ÄÄ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo543 = decodeArr "ÂºÂ»Â¼Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹É©É©Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo553 = decodeArr "w~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088\u0089\u008aÂ­Â·Â¸Â¹ÂºÂ»Â¼ÃÃÃÃÃÃÃÃÃÃÃÃ§ÅÅÅÅÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "Æ¾ÉªÉªÉªÆ¿Æ¿Æ¿ÇÇÇÇÇÇÇSTTTUUUVVPYYYYXXQQZRRR\\^^^^^^^^^^_]]]]`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo556 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_È²È²\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo558 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÈµÈµ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo570 = decodeArr "Â¤Â¥Â¦ÂªÂ«Â¬Ã" "É°É°É°È½È½È½Ç"
private yygo573 = decodeArr "ÂªÂ«Â¬Ã" "É²É²É²Ç"
private yygo578 = decodeArr "3456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuv" "ÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊ´Ê´Ê´Ê´Ê´Ê´"
private yygo584 = decodeArr "ÄÄÄÄÄ" "Ê¶Ê¶ÉÉÉ"
private yygo587 = decodeArr "Â­ÅÅÅÅ" "ÉÊ¹Ê¹Ê¹É"
private yygo588 = decodeArr "Â­ÅÅÅÅ" "ÉÊºÊºÊºÉ"
private yygo589 = decodeArr "Â­Å" "ÉÊ»"
private yygo590 = decodeArr "Â­Å" "ÉÊ¼"
private yygo591 = decodeArr "Â­ÅÅÅÅÅÅÅÅÅ" "ÉÊ½Ê½ÉÉÉÉÉÉÉ"
private yygo609 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ËË\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo610 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦Å§Å»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^ÈÈÈÈËËË_ÈÈ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo622 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_È²È²\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo623 = decodeArr "Â·Â¸Â¹ÂºÂ»Â¼ÃÃÅÅÅÅ Å¡Å¢Å£Å¤Å¥Å¦ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£Æ¤Æ¥Æ¦Æ§Æ¨Æ©ÆªÆ«Æ¬Æ­Æ®Æ¯Æ°Æ±Æ²Æ³Æ´ÆµÆ¶Æ·Æ¸Æ¹ÆºÆ»Æ¼Æ½Æ¾" "TTTUUUVV^^^^^^^^^^_ÈµÈµ\u0096\u0096\u0096\u0096`````aabbddcccccccccccccceeeeeeeeeeeeeeeeeeeeee"
private yygo627 = decodeArr "Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Ã" "È¾È¾È¾ËËËÈ½È½È½Ç"
private yygo679 = decodeArr "3456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuv" "ÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµËËËËËË"
private yygo693 = decodeArr "3456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuv" "ÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµËËËËËË"
private yygo696 = decodeArr "ÄÄÄÄÄ" "ËËÉÉÉ"
private yygo703 = decodeArr "\u0010\u0011\u0012Â­ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "ÉÉÉÉËËËËËÉÉÉÉÉÉÉÉÉÉÉ"
private yygo704 = decodeArr "\u0010\u0011\u0012Â­ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ" "ÉÉÉÉËËËËËÉÉÉÉÉÉÉÉÉÉÉ"
private yygo705 = decodeArr "ÂºÂ»Â¼Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ËËÄ¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo706 = decodeArr "Â­ÅÅÅÅÅÅÅÅÅ" "ÉËËÉÉÉÉÉÉÉ"
private yygo708 = decodeArr "ÂºÂ»Â¼Ã­Ã´ÃµÃ¶Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ÅÉÉÉËËÅÄ´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo713 = decodeArr "3456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuv" "ÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµËËËËËË"
private yygo719 = decodeArr "ÂºÂ»Â¼Ã«Ã¬Ã­Ã°Ã±Ã²Ã³Ã»Ã¼Ã½Ã¾Ã¿ÄÄÄÄÄÄÄÄÄÅÅ" "Ã¹Ã¹Ã¹ËËÄ¯Ä°Ä°Ä²Ä²Ä±Ä´Ä´Ä´Ä´Ä´Ä´Ã»Ã»Ã¼Ã¼Ã¼Ã¼Ã¼Ä³Ä³"
private yygo726 = decodeArr "3456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuv" "ÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµÊµËËËËËË"
private yygos = let 
    sub1 = [      (0, yygo0),
      (1, yygo1),
      (2, yygo2),
      (4, yygo4),
      (6, yygo6),
      (8, yygo8),
      (10, yygo10),
      (13, yygo13),
      (23, yygo23),
      (26, yygo26),
      (28, yygo28),
      (32, yygo32),
      (35, yygo35),
      (36, yygo36),
      (37, yygo37),
      (41, yygo41),
      (42, yygo42),
      (43, yygo43),
      (46, yygo46),
      (47, yygo47),
      (48, yygo48),
      (49, yygo49),
      (58, yygo58),
      (59, yygo59),
      (60, yygo60),
      (63, yygo63),
      (66, yygo66),
      (67, yygo67),
      (82, yygo82),
      (86, yygo86),
      (87, yygo87),
      (91, yygo91),
      (92, yygo92),
      (97, yygo97),
      (104, yygo104),
      (106, yygo106),
      (107, yygo107),
      (112, yygo112),
      (116, yygo116),
      (119, yygo119),
      (124, yygo124),
      (127, yygo127),
      (131, yygo131),
      (133, yygo133),
      (134, yygo134),
      (136, yygo136),
      (137, yygo137),
      (139, yygo139),
      (140, yygo140),
      (141, yygo141),
      (144, yygo144),
      (146, yygo146),
      (148, yygo148),
      (149, yygo149),
      (153, yygo153),
      (154, yygo154),
      (155, yygo155),
      (161, yygo161),
      (163, yygo163),
      (164, yygo164),
      (165, yygo165),
      (168, yygo168),
      (172, yygo172),
      (173, yygo173)];
    sub2 = [      (175, yygo175),
      (179, yygo179),
      (184, yygo184),
      (186, yygo186),
      (187, yygo187),
      (190, yygo190),
      (191, yygo191),
      (193, yygo193),
      (194, yygo194),
      (195, yygo195),
      (197, yygo197),
      (198, yygo198),
      (199, yygo199),
      (201, yygo201),
      (204, yygo204),
      (209, yygo209),
      (210, yygo210),
      (211, yygo211),
      (214, yygo214),
      (215, yygo215),
      (221, yygo221),
      (224, yygo224),
      (229, yygo229),
      (231, yygo231),
      (234, yygo234),
      (235, yygo235),
      (237, yygo237),
      (247, yygo247),
      (248, yygo248),
      (253, yygo253),
      (255, yygo255),
      (257, yygo257),
      (258, yygo258),
      (259, yygo259),
      (262, yygo262),
      (263, yygo263),
      (266, yygo266),
      (267, yygo267),
      (271, yygo271),
      (280, yygo280),
      (282, yygo282),
      (283, yygo283),
      (284, yygo284),
      (286, yygo286),
      (287, yygo287),
      (288, yygo288),
      (290, yygo290),
      (295, yygo295),
      (301, yygo301),
      (308, yygo308),
      (310, yygo310),
      (313, yygo313),
      (319, yygo319),
      (320, yygo320),
      (327, yygo327),
      (333, yygo333),
      (337, yygo337),
      (338, yygo338),
      (342, yygo342),
      (347, yygo347),
      (351, yygo351),
      (352, yygo352),
      (356, yygo356),
      (358, yygo358)];
    sub3 = [      (367, yygo367),
      (368, yygo368),
      (369, yygo369),
      (370, yygo370),
      (371, yygo371),
      (372, yygo372),
      (373, yygo373),
      (379, yygo379),
      (383, yygo383),
      (386, yygo386),
      (387, yygo387),
      (389, yygo389),
      (390, yygo390),
      (399, yygo399),
      (401, yygo401),
      (403, yygo403),
      (408, yygo408),
      (410, yygo410),
      (411, yygo411),
      (413, yygo413),
      (414, yygo414),
      (415, yygo415),
      (416, yygo416),
      (433, yygo433),
      (435, yygo435),
      (437, yygo437),
      (438, yygo438),
      (439, yygo439),
      (440, yygo440),
      (442, yygo442),
      (443, yygo443),
      (444, yygo444),
      (446, yygo446),
      (449, yygo449),
      (451, yygo451),
      (454, yygo454),
      (458, yygo458),
      (460, yygo460),
      (462, yygo462),
      (464, yygo464),
      (467, yygo467),
      (469, yygo469),
      (470, yygo470),
      (473, yygo473),
      (479, yygo479),
      (485, yygo485),
      (487, yygo487),
      (488, yygo488),
      (489, yygo489),
      (490, yygo490),
      (503, yygo503),
      (505, yygo505),
      (506, yygo506),
      (509, yygo509),
      (513, yygo513),
      (514, yygo514),
      (521, yygo521),
      (523, yygo523),
      (524, yygo524),
      (527, yygo527),
      (532, yygo532),
      (535, yygo535),
      (543, yygo543),
      (553, yygo553)];
    sub4 = [      (556, yygo556),
      (558, yygo558),
      (570, yygo570),
      (573, yygo573),
      (578, yygo578),
      (584, yygo584),
      (587, yygo587),
      (588, yygo588),
      (589, yygo589),
      (590, yygo590),
      (591, yygo591),
      (609, yygo609),
      (610, yygo610),
      (622, yygo622),
      (623, yygo623),
      (627, yygo627),
      (679, yygo679),
      (693, yygo693),
      (696, yygo696),
      (703, yygo703),
      (704, yygo704),
      (705, yygo705),
      (706, yygo706),
      (708, yygo708),
      (713, yygo713),
      (719, yygo719),
      (726, yygo726)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` genericArrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4);
{-

    this file will be appended to every parser YYgen.fr builds

 -}
 
 
--- the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, yytoks))  -- will this ever happen?
            | act == yyErr    -> do
                            let fun = elemAt yyrecs st
                            toks <- fun yytoks
                            yyloop yyvals toks
            -- shift?
            | act >= 0, yydebug, traceLn (show st ++ ": shift to " ++ show act ++ " on " ++ yyshow yyt) = undefined
            | act >= 0 = yyloop ((act, YYTok yyt)!:yyvals) yyts
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals yytoks
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAction act
            | act == yyAccept -> YYM.pure (yyaccept (yyvals, []))
            | act == yyErr = do
                yyerror yyEOF ("syntax error on end of file")
                YYM.pure (yyvals, [])
            -- shift?
            | act >= 0 -> error ("Can't shift on end of file in state " ++ show act)
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals []
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case itemAt yyacts n of {
    Just fun -> fun tok;
    Nothing  -> YYAction yyErr;
};

yyeaction n = case elemAt yyeacts n of  {
    0 -> YYAction yyErr;
    this -> YYAction this; 
};

--- nowarn: application of 'yybadprod' will diverge
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



--- drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYAction err
            | yyErr == err, yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | yyErr == err = yydrop i ts
            | otherwise  =  YYM.pure (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.pure [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.pure (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.pure [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts

yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []

yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts

yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []

yyreduce red yyvs = case itemAt yyprods red of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.genericItemAt popst of
                Just arr -> case elemAt arr red of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.pure ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.pure (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror (yyline yyt) ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.pure (Just x)
        _ -> YYM.pure Nothing;
;
--begin tail
{--
    the parser pass
 -}
pass :: [Token] -> StG (Maybe ParseResult) -- Global -> IO (Maybe ParseResult, Global)
pass = yyparse . substQQ
--end tail
