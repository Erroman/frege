module ::= moduleclause ';' definitions | moduleclause 'where' '{' definitions '}' | INTERPRET expr
definitions ::= definition | definition semicoli | definition semicoli definitions
definition ::= DOCUMENTATION | DOCUMENTATION definition | topdefinition | visibledefinition
topdefinition ::= import | fixity operators | moduledefinition | publicdefinition
visibledefinition ::= PRIVATE publicdefinition | PROTECTED publicdefinition | PUBLIC publicdefinition | ABSTRACT datainit wheredef
publicdefinition ::= typedef | datainit wheredef | classdef | INSTANCE insthead wheredef | DERIVE insthead | localdef
classdef ::= CLASS ccontext EARROW CONID tyvar wheredef | CLASS ccontext wheredef
wheredef ::= | 'where' '{' '}' | 'where' '{' localdefs '}'
localdefs ::= dplocaldef | dplocaldef semicoli | dplocaldef semicoli localdefs
dplocaldef ::= DOCUMENTATION | DOCUMENTATION dplocaldef | plocaldef
plocaldef ::= localdef | PRIVATE localdef | PROTECTED localdef | PUBLIC localdef
localdef ::= annotation | nativedef | fundef
appex ::= unex | appex unex
lambdabody ::= '\' apats lambdabody | ('->' | '→') expr
getfield ::= VARID ('<-' | '←') expr | VARID '=' expr | VARID
getfields ::= getfield | getfield ',' getfields | getfield ','
dodefs ::= lcqual | lcqual semicoli | lcqual semicoli dodefs
lcqual ::= gqual | expr '=' expr | LET '{' letdefs '}'
lcquals ::= lcqual | lcqual ',' lcquals | lcqual ','
exprSS ::= expr | expr ';' exprSS | expr ';'
exprSC ::= expr | expr ',' exprSC | expr ','
field ::= VARID '=' expr | VARID
fields ::= field | field ',' fields | field ','
term ::= qvarid | literal | '_' | qconid | qconid '{' '}' | qconid '{' fields '}' | '(' ')' | '(' commata ')' | '(' ('!' | '?') ')' | '(' SOMEOP ')' | '(' '-' ')' | '(' SOMEOP expr ')' | '(' binex SOMEOP ')' | '(' binex '-' ')' | '(' expr ',' exprSC ')' | '(' expr ';' exprSS ')' | '(' expr ')' | '[' ']' | '[' exprSC ']' | '[' exprSC DOTDOT ']' | '[' exprSC DOTDOT expr ']' | '[' expr '|' lcquals ']'
primary ::= term | DO '{' dodefs '}' | primary '.' VARID | primary '.' SOMEOP | primary '.' ('!' | '?') | qualifiers '{' VARID '?' '}' | qualifiers '{' VARID '=' '}' | qualifiers '{' VARID ('<-' | '←') '}' | qualifiers '{' getfields '}' | primary '.' '{' VARID '?' '}' | primary '.' '{' VARID '=' '}' | primary '.' '{' VARID ('<-' | '←') '}' | primary '.' '{' getfields '}' | primary '.' '[' expr ']'
unex ::= primary | ('!' | '?') unex
apats ::= unex | unex apats
wherelet ::= 'where' '{' '}' | 'where' '{' letdefs '}'
gqual ::= expr | expr ('<-' | '←') expr
gquals ::= gqual | gqual ',' gquals | gqual ','
guard ::= '|' gquals aeq expr
guards ::= guard | guard guards
fundef ::= funhead '=' expr | funhead guards | fundef wherelet
letdef ::= annotation | fundef
letdefs ::= letdef | letdef semicoli | letdef semicoli letdefs
calts ::= calt | calt ';' calts | calt ';'
topex ::= IF expr thenx expr elsex expr | CASE expr OF '{' calts '}' | LET '{' letdefs '}' IN expr | lambda | appex
binex ::= binex SOMEOP binex | binex '-' binex | '-' topex | topex
expr ::= binex ('::' | '∷') sigma | binex
calt ::= pattern aeq expr | pattern guards | calt wherelet
aeq ::= ('->' | '→') | '='
import ::= IMPORT modulename1 importliste | IMPORT modulename1 VARID CONID importliste | IMPORT modulename1 CONID importliste
importliste ::= | VARID '(' importspecs ')' | '(' ')' | '(' importspecs ')' | PUBLIC importliste
importspecs ::= importspec | importspec ',' | importspec ',' importspecs
importspec ::= importitem | importitem alias | PUBLIC importspec
importitem ::= qvarid | CONID '(' memspecs ')' | CONID '(' ')' | qconid | SOMEOP | ('!' | '?')
memspecs ::= memspec | memspec ',' | memspec ',' memspecs
memspec ::= alias | alias alias | PUBLIC memspec
alias ::= VARID | CONID | SOMEOP
annotation ::= annoitems ('::' | '∷') sigma
annoitems ::= annoitem | annoitem ',' annoitems
nativedef ::= PURE impurenativedef | impurenativedef
impurenativedef ::= NATIVE methodspec ('::' | '∷') sigexs
methodspec ::= fitem jitem gargs | fitem jitem | fitem gargs | fitem
fitem ::= annoitem | ('!' | '?') | '-' | SOMEOP
annoitem ::= VARID | '(' SOMEOP ')' | '(' ('!' | '?') ')' | '(' '-' ')'
datainit ::= DATA CONID '=' nativepur nativespec | DATA CONID dvars '=' nativepur nativespec | DATA CONID dvars '=' dalts | DATA CONID '=' dalts | NEWTYPE CONID dvars '=' dalt | NEWTYPE CONID '=' dalt
dalts ::= dalt | dalt '|' dalts
dalt ::= visdalt | visdalt DOCUMENTATION | DOCUMENTATION visdalt
visdalt ::= strictdalt | PUBLIC strictdalt | PRIVATE strictdalt | PROTECTED strictdalt
strictdalt ::= '!' simpledalt | '?' simpledalt | simpledalt
simpledalt ::= CONID | CONID '{' conflds '}' | CONID simpletypes
conflds ::= confld | confld ',' | confld DOCUMENTATION | confld ',' conflds | confld DOCUMENTATION conflds
confld ::= fldids ('::' | '∷') sigma | docs fldids ('::' | '∷') sigma
sigexs ::= sigex | sigex '|' sigexs
sigex ::= sigma THROWS tauSC | sigma
typedef ::= TYPE CONID '=' sigma | TYPE CONID dvars '=' sigma
sigma ::= forall | rho
insthead ::= icontext EARROW tyname simpletype | icontext
icontext ::= qconid simpletype | '(' sicontexts ')'
sicontexts ::= qconid simpletype | qconid simpletype ',' | qconid simpletype ',' sicontexts
nativespec ::= rawnativename | rawnativename gargs
gargs ::= '{' tauSC '}' | '{' '}'
moduledefinition ::= NATIVE PACKAGE typeclause interfaces wheretokens
interfaces ::= | CLASS tauSC
typeclause ::= | TYPE tau
rhofun ::= simpletypes | simpletypes ('->' | '→') rhofun
tauSB ::= tau | tau '|' tauSB
tauSC ::= tau | tau ',' tauSC
tau ::= simpletypes | forall | simpletypes ('->' | '→') tau
simpletype ::= tyvar | tyname | '(' tau ')' | '(' tau ',' tauSC ')' | '(' tau '|' tauSB ')' | '[' tau ']'
simpletypes ::= simpletype | simpletype simpletypes
rho ::= tapp EARROW rhofun | rhofun
forall ::= FORALL boundvars mbdot rho
boundvars ::= VARID | VARID boundvars
ccontext ::= qconid tyvar | '(' scontexts ')'
tyname ::= qconid | '[' ']' | '(' ')' | '(' commata ')' | '(' ('->' | '→') ')'
commata ::= ',' | ',' commata
moduleclause ::= docs PACKAGE modulename1 | PACKAGE modulename1 | docs PROTECTED PACKAGE modulename1 | PROTECTED PACKAGE modulename1 | moduleclause words '(' qvarids ')'
docs ::= DOCUMENTATION | DOCUMENTATION docs | DOCUMENTATION semicoli docs
dvars ::= tyvar | tyvar dvars
elsex ::= ';' ELSE | ELSE
fixity ::= INFIX INTCONST | INFIXL INTCONST | INFIXR INTCONST
fldids ::= fldid | fldid ',' fldids
fldid ::= strictfldid | PUBLIC strictfldid | PRIVATE strictfldid
jitem ::= rawnativename | SOMEOP | ('!' | '?')
wheretokens ::= 'where' '{' jtokens '}' | 'where' '{' '}'
jtokens ::= jtoken | jtoken jtokens | '{' jtokens '}' | '{' jtokens '}' jtokens | '{' '}' | '{' '}' jtokens
jtoken ::= VARID | CONID | QVARID | QCONID | QUALIFIER | DOCUMENTATION | PACKAGE | IMPORT | INFIX | INFIXR | INFIXL | NATIVE | DATA | 'where' | CLASS | INSTANCE | ABSTRACT | TYPE | TRUE | FALSE | IF | THEN | ELSE | CASE | OF | DERIVE | LET | IN | DO | FORALL | PRIVATE | PROTECTED | PUBLIC | PURE | THROWS | MUTABLE | INTCONST | STRCONST | LONGCONST | FLTCONST | DBLCONST | CHRCONST | ('->' | '→') | ('::' | '∷') | ('<-' | '←') | EARROW | DOTDOT | SOMEOP | INTERPRET | ',' | '|' | '[' | ']' | '(' | ')' | '.' | '?' | '-' | ';' | '!' | '=' | '\'
scontexts ::= qconid tyvar | qconid tyvar ',' | qconid tyvar ',' scontexts
tyvar ::= VARID | '(' VARID ('::' | '∷') kind ')'
simplekind ::= SOMEOP | VARID | '(' kind ')'
kind ::= simplekind ('->' | '→') kind | simplekind
literal ::= TRUE | FALSE | CHRCONST | STRCONST | INTCONST | BIGCONST | LONGCONST | FLTCONST | DBLCONST | REGEXP
mbdot ::= '.' | SOMEOP
modulename1 ::= CONID | varidkw '.' modulename1 | QUALIFIER modulename1
nativepur ::= PURE NATIVE | MUTABLE NATIVE | NATIVE
operators ::= opstring | opstring operators
opstring ::= SOMEOP | VARID | '-'
qvarids ::= qvarop | qvarop ',' qvarids
qvarop ::= QUALIFIER QUALIFIER varop | QUALIFIER varop | varop | SOMEOP
strictfldid ::= VARID | '!' VARID | '?' VARID
qconid ::= QUALIFIER QUALIFIER CONID | QUALIFIER CONID | CONID
qualifiers ::= QUALIFIER | QUALIFIER QUALIFIER
qvarid ::= QUALIFIER QUALIFIER varop | QUALIFIER varop | VARID
rawnativename ::= VARID | CONID | PACKAGE | VARID '.' rawnativename | PACKAGE '.' rawnativename | QUALIFIER rawnativename | STRCONST
semicoli ::= ';' | ';' semicoli
thenx ::= ';' THEN | THEN
varop ::= VARID | ('!' | '?')
varidkw ::= VARID | DATA | TYPE | NATIVE | PURE | PACKAGE | IMPORT
words ::= VARID | VARID words
LowercaseLetter ::= ('«any character in Unicode category: Letter, Lowercase»')
Letter ::= ('«any character in Unicode category: Letter»')
VARID ::= (LowercaseLetter | '_') (Letter | '_' | "'")*
