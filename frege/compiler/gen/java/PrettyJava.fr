--- Internal form of abstract Java and instances 
module Compiler.gen.java.PrettyJava where

import frege.Prelude hiding(<+>, break)
import Compiler.types.AbstractJava
import Compiler.common.Annotate
import Lib.PP hiding (line)
import Data.Bits(BitSet(member))
import Compiler.common.Mangle(romanUpper, mangleJtv)
import Compiler.types.JNames


instance Anno JAttr where
    anno JUnchecked = text "@SuppressWarnings(\"unchecked\")"
    anno JFinal     = text "final"
    anno JPrivate   = text "private"
    anno JPublic    = text "public"
    anno JProtected = text "protected"
    anno JStatic    = text "static"
    anno JAbstract  = text "abstract"
    anno JDefault   = text "default"
    anno JFunctionalInterface = text "@FunctionalInterface"

--- annotate attributes
annoAttrs :: Attributes -> DOCUMENT
annoAttrs flags
    | null flags = PP.nil
    | otherwise  = (PP.spread . map anno . filter (BitSet.`member` flags)) [minBound .. maxBound]

instance Anno JTVar where
    anno (JTVar s UNBOUNDED)     = text (mangleJtv s)
    anno (JTVar s (SUPER jt))    = text (mangleJtv s) <+> text "super" <+> anno jt
    anno (JTVar s (EXTENDS jts)) = text (mangleJtv s) <+> text "extends" 
                                         <+> sep " &" (map anno jts)
    annoList = annoSome "<" "," ">" 

--- annotate formal and actual generic arguments
annoGenerics [] = DOCUMENT.NONE
annoGenerics xs = annoSome "<" "," ">" xs

instance Anno JType where
    anno (Ref    {jname,gargs})     = text (show jname) <> annoGenerics gargs
    anno (Constr {jname,gargs})     = text (show jname) <> annoGenerics gargs
    anno (TArg var          )       = text (mangleJtv var)
    anno Wild{bounds}               = anno (JTVar "?" bounds)
    anno Nativ{typ="[]",
               gargs=[jt]}          = anno jt <> text "[]"
    anno (Nativ {typ,gargs} )       = text typ  <> annoGenerics gargs
    anno Kinded{arity, gargs}       = text "Kind." <> text (romanUpper arity) 
                                                <> annoGenerics gargs
    anno (Lazy {yields})            = text "Lazy<" <> anno yields <> text ">"
    anno Func{gargs}                = text "Func." 
                                        <> text (romanUpper (length gargs - 1))
                                        <> annoGenerics gargs
    anno Something                  = text ("Object")

instance Show JType where
    show jt = nice.replaceAll´\n\s*´ " " 
        where
            nice = pretty 100 (anno jt)

--- subex e x
--- print @x@ or @(x)@ depending on relative precedence to @e@
subex :: JExpr -> JExpr -> PP.DOCUMENT
subex e x
          | e.prec == 3 && x.prec <= 3  = text "(" <> anno x <> text ")"
          | x.prec < e.prec             = text "(" <> anno x <> text ")"
          | otherwise                   = anno x


instance Anno JExpr where
    anno (JAtom {name}) = text name
    anno (JNew jt exs) = text "new" <+> jt.anno <> annoList exs
    anno (JInvoke (JStMem (JName "" b) []) exs) = text b <> PP.nest 4 (annoList exs)
    anno (JInvoke (JStMem jn gs) exs) = text a <~/> PP.nest 4 (
                            text "." <> annoGenerics gs <> text b <> annoList exs)
                        where
                            jns = ´\.´.splitted (show jn)
                            a = (joined "." • init) jns
                            b = last jns
    anno (e@JInvoke (JExMem jex s gs) exs) = (e `subex` jex) <~/> PP.nest 4 (
                                    text "." <> annoGenerics gs <> text s <> annoList exs)
    -- anno (e@JInvoke (JExMemG jex s gs) exs) = e.subex jex <~/> PP.nest 4 (
    --                                text "." <> annoGenerics gs <> text s <> annoList exs)
    anno (e@JInvoke x exs) = (e `subex` x) <> annoList exs
    anno (e@JCast jt x) = text "(" <> jt.anno <> text ")" <> (e `subex` x)
    anno (JStMem (JName "" b) []) = text b
    anno (JStMem (JName a b) gs) = text a <> text "." <> annoGenerics gs <> text b
    anno (e@JExMem jex s gs) = (e `subex` jex) <> text "." <> annoGenerics gs <> text s
    -- anno (e@JExMem jex s)     = e.subex jex <> text "." <> text s
    anno (un@JUnop op j1) = text op <+> (un `subex` j1)
    anno (bin@JBin j1 op j2) = (bin `subex` j1) <+> text op <+> (bin `subex` j2)
    anno (jqc@JQC j1 j2 j3) = (jqc `subex` j1)
                        <+> PP.nest 4    (text "?" <+> (jqc `subex` j2)
                                    <+/> (text ":" <+> (jqc `subex` j3)))
    anno (get@JArrayGet{j1, j2}) = (get `subex` j1) <> text "[" <> anno j2 <> text "]"
    anno (JNewClass jt exs decls) = text "new"
                            <+> jt.anno
                            <>  annoList exs
                            <+> (PP.block "{" (PP.stack (map anno decls)) "}")
    anno JLambda{fargs, code} = annoArgDef fargs 
                                <+> text "->" 
                                <+> either anno anno code
    anno (JNewArray jt ex)
        | Nativ{typ="[]", gargs=[it]} <- jt 
                     = text "new"
                            <+> it.anno
                            <>  text "[" <> anno ex <> text "]"
        | otherwise  = text "new"
                            <+> jt.anno
                            <>  text "[" <> anno ex <> text "]"

instance Anno JStmt where
    anno (JError s) = (JComment s).anno </> text "FIX: incomplete code generation;"
    anno JEmpty = text ";"
    anno (JBlock []) = text "{}"
    anno (JBlock stmts) = PP.block "{" (PP.stack (map anno stmts)) "}"
    anno (JReturn ex) = text "return" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JThrow ex)  = text "throw" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JAssert ex)  = text "assert" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JEx ex) = (postOpt ex).anno <> text ";"
    anno (JAssign x1 x2) = x1.anno <+> text "=" <+> (postOpt x2).anno <> text ";"
    anno (JLocal jdecl) = jdecl.anno
    anno (JCond k x stmts) = text k <+> bracket "(" (postOpt x).anno ")"
                        <+>  anno  (JBlock stmts)
    anno (JBlockX k stmts) = text k <+> anno (JBlock stmts)
    anno (JCase x stmt) = text "case" <+> x.anno <> text ":" <+> anno stmt

--- annotate list of classes that are implemented
annoImplements _ []  = PP.nil
annoImplements s [x] = text s <+> anno x
annoImplements s xs  = nest 2 $ text s <+/> PP.sep "," (map anno xs)

--- annotate a formal method argument
annoArg :: FormalArg -> DOCUMENT
annoArg (n, _, jt, s) = annoAttrs n <+> anno jt <+> text s


--- annotate a formal argument list
annoArgDef  []   = text "()"
annoArgDef  args = bracket "(" (PP.sep "," (map annoArg args)) ")"


--- 'JDecl's are annotatable
instance Anno JDecl where
    anno (JComment s)       = text "// " <> text s -- <> PP.line
    anno (cl@JClass {attr}) = annoAttrs attr <+> text "class"
                        <+> text cl.name <> annoGenerics cl.gvars
                        <+> bracket ""
                             (maybe PP.nil ((text "extends" <+>) • JType.anno) cl.extend
                             <+> annoImplements "implements" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (cl@JInterface {attr}) = annoAttrs attr <+> text "interface"
                        <+> (text cl.name <> annoGenerics cl.gvars)
                        <+> bracket "" (annoImplements "extends" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
--    anno (cl@JTCInterface {attr}) = annoAttrs attr <+> text "interface"
--                        <+> JType.anno (cl.jtype)
--                        <+> bracket "" (annoImplements "extends" cl.implement) ""
--                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (m@JMethod {attr}) = annoAttrs m.attr
                        <+> annoGenerics (m.gvars)
                        <+> m.jtype.anno
                        <+> text m.name
                        <> annoArgDef m.args
                        <+> m.body.anno
    anno (m@JConstr {attr}) = annoAttrs m.attr
                        <+> xtype.anno
                        <> annoArgDef m.args
                        <+> m.body.anno
            where
                xtype | m.jtype.{gargs?} = m.jtype.{gargs=[]}
                      | otherwise           = m.jtype
    anno (m@JMember {attr}) = annoAttrs m.attr
                        <+> m.jtype.anno <+> text m.name
                        <+> bracket (maybe "" (const ("= ")) m.init)
                                        (maybe PP.nil (JExpr.anno • postOpt) m.init)
                                    ";"
    anno JWhile{body} = text "while (true)" <+> anno body
