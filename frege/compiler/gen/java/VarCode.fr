--- Code generation for functions and CAFs

module frege.compiler.gen.java.VarCode where

import frege.Prelude hiding (<+>)

import Data.TreeMap(TreeMap, insert, lookup, each)
import Lib.PP(text, <>, <+>, <+/>, </>)
import Data.Bits(BitSet, BitSet.member)
import Data.List(partitioned)

import Compiler.enums.Flags(TRACEG)
import Compiler.enums.RFlag(RTailRec, RSimple, RValue, RSafeTC)
import Compiler.enums.Literals
import Compiler.enums.CaseKind(CKind)
import Compiler.enums.Visibility(Private)
import Compiler.enums.TokenID(VARID)

import Compiler.classes.Nice(nice, nicer)
import Compiler.instances.Nicer(nicerctx, nicectx)

import Compiler.types.Global(Symbol, StG, Global(),
                                getST, changeST, uniqid)
import Compiler.types.Symbols(SymV, SymL, SymD, SymT, SymC)
import Compiler.types.Expression(Expr, ExprT, CAlt, CAltT, flatx)
import Compiler.types.Patterns(Pattern, PatternT)
import Compiler.types.Positions(Positioned)
import Compiler.types.Types(RhoT, SigmaT, TauT, Rho, Sigma, Tau, Ctx, pSigma)
import Compiler.types.Strictness(allLazy, Strictness)
import Compiler.types.QNames(QName)
import Compiler.types.JNames(JName, memberOf)
import Compiler.types.Positions

import Compiler.common.Errors as E(logmsg)
import Compiler.common.Annotate(anno)
import Compiler.common.AnnotateG(annoG)
import Compiler.common.Trans   as T(patternRefutable)
import Compiler.common.SymbolTable as SymTab()
import Compiler.common.Mangle(mangled)
import Compiler.common.Types as CT(substTau, substIdTau, substIdRho, substIdSigma)

import Compiler.passes.Strict(patternStrictness, openCaseWhen, caseOtherwise)

import Compiler.Utilities   as U(javaName)
import Compiler.tc.Util     as TU(reducedCtx, impliesG)

-- import frege.compiler.Typecheck     as TY(mainSigma, tc, tauString, sigBool)

import Compiler.gen.java.Common
import Compiler.types.AbstractJava
import Compiler.gen.java.Bindings
import Compiler.gen.java.Match
import Compiler.gen.java.MethodCall(methCode, wrappedOnly, wrapped, wrapCode, nativeCall)
import Compiler.gen.java.Constants(findConst, staticConst)
import Compiler.gen.java.Instantiation(instPatternBound, resolveConstraint)

varCode ∷ TreeMap Int Binding → Symbol → StG [JDecl]
varCode _ (SymL{sid, pos, vis, name, alias})  = do
    g ← getST
    pure [JComment ("alias " 
            ++ name.base
            ++ " for "
            ++ show (javaName g alias))]

varCode binds sym = do
    g <- getST
    E.logmsg TRACEG sym.pos (text ("varCode for " ++ nicer sym g))
    si <- symInfo sym
    case sym of 
        SymV{expr = Just{}}
            | null si.argSigs = cafCode sym binds  -- nust be CAF
            | otherwise       = funDef sym binds 
        SymV {nativ = Just _, over} 
            | null over = do
                g   ← getST
                E.logmsg TRACEG sym.pos (text "native var:" 
                            <+> text (nice sym.name g) <+> text "∷"
                            <+> text (nicer sym.typ.rho g) 
                            <>  text ", depth="  <> anno sym.depth
                            <>  text ", rstate=" <> (text • show) sym.rkind)
                si  ← symInfo sym
                return (comment : methCode g sym si)
            | otherwise = return []         -- there is no code for overloads
            where
                comment = JComment (nicer sym g) 
        _  = error ("varCode: no SymV? " ++ nicer sym g)

--- Generate code for a function with arguments
funDef ∷ Symbol → TreeMap Int Binding → StG [JDecl]
funDef sym binds = do
    g   ← getST
    if g.toplevel
    then topFun sym binds
    else localFun sym binds

--- Generate code for a top level function
topFun ∷ Symbol → TreeMap Int Binding → StG [JDecl]
topFun (sym@SymV {expr = Just dx}) binds = do
    g   ← getST
    E.logmsg TRACEG sym.pos (text "topFun:" 
                <+> text (nice sym.name g) <+> text "∷"
                <+> text (nicer sym.typ.rho g) 
                <>  text ", depth="  <> anno sym.depth
                <>  text ", rstate=" <> (text • show) sym.rkind)

    -- x   ← dx                -- get expression
    si  ← symInfo sym

    let !arity = length si.argSigs
    when (arity != sym.depth) do
        E.fatal sym.pos (text "funDef: arity=" <> anno arity <> text ", depth=" <> anno sym.depth)
        return ()
    let
        argNames = getArgs g
        ctxNames = getCtxs g
        isTailRec = RTailRec `member` sym.rkind
        argAttr  = if isTailRec then empty else attrFinal
        ctxArgs  = map (unFinal isTailRec) (zipWith (constraintArg g)  sym.typ.rho.context  ctxNames)
        -- for polymorphic recursion, we must also change the constraints
        unFinal ∷ Bool → FormalArg → FormalArg
        unFinal s (arg@(a,b,c,d))
            | s = (empty, b, c, d ++ "f")
            | otherwise = arg
        methArgs  = argDefs argAttr si argNames
        methName  = (javaName g sym.name).base

    stmts ← compiling sym (genFunction sym si.returnJT methArgs binds)

    let worker      = JMethod {attr = attrs [JFinal, JPublic, JStatic],
                       gvars = targs sym.typ,
                       jtype = si.returnJT,
                       name  = methName,
                       args  = ctxArgs ++ methArgs,
                       body  = JBlock stmts}
 
    pure ([JComment ((nicer sym g) ++ "  " ++ show sym.strsig ++ "  " ++ show sym.rkind),
           JComment (nicer sym.typ g),
           worker])

topFun sym binds = do
    g ← getST
    error ("topFun: no SymV with expression " ++ nicer sym g)

{--
    code for non-functions
    - if there are constraints or bound variables, we make a static methods with constraint args.
    - else, if the code is easy, we make a Thunk<type> and write the code in the eval function.
    - else we just initialize
    
    A CAF counts as simple if the code contains only
    - literals
    - native function calls
    - constructors
    - other easy cafs
  -}
cafCode (sym@SymV {depth = 0, expr = Just dx}) binds = do
    x   <- dx
    g   <- getST
    let bnds = sym.typ.bound
        ctxNames = getCtxs g
 
    let rlazy = not sym.strsig.isStrict 
                 || not (RValue `member` sym.rkind)
        rsimple = RSimple `member` sym.rkind
        recursive = not (RSafeTC `member` sym.rkind)        
        ctxs  = if null bnds then [] else sym.typ.rho.context
        cargs = zipWith (constraintArg g) ctxs ctxNames
        jtype = rhoJT g sym.typ.rho.{context=[]}
        rtype = returnType sym.rkind jtype

    let comp = if null cargs && null bnds && rsimple
         then do
             ecode <- compiling sym (genExpr false rtype x binds)
             pure (Left ecode)
         else do
             let badguard = openCaseWhen g x
                 jthrow = [JThrow (JNew (Ref (JName "frege.runtime" "GuardFailed") []) [
                                                     JAtom (show (nicer sym g)),
                                                     JAtom (show sym.pos)])]
             code <- compiling sym (genReturn jtype x binds)
             case badguard of
                 Just (Left x) -> do
                     E.warn (getpos x) (text "guard (" <> text (nicer x g) <> text ") may evaluate to false.")
                     pure (Right (code ++ jthrow))
                 Just (Right p) -> do
                     E.warn (getpos p) (text "pattern guard (" <> text (nicer p g) <> text ") may fail to match.")
                     pure (Right (code ++ jthrow))
                 Nothing -> pure (Right code)
 
    escode <- comp
 
    let name  = U.javaName g sym.name           -- P.foo
        left (Left c) = c
        left _ =  error "no ecode"
        right (Right c) = c
        right _ =  error "no scode"
        ecode  = left escode
        scode  = right escode

        comms = reverse [
                 JComment (either show (const "no binding") escode),
                 JComment ((nice sym g) ++ "  " ++ show sym.strsig ++ "  " ++ show sym.rkind),
                 JComment (nicer sym.typ g), JComment (nicer x g)]
        jexpr = (adapt ecode rtype).jex
        static = JStatic
        publik = if sym.vis == Private then JPrivate else JPublic
        cafV  = JMember { attr = attrs [publik, JFinal, static], jtype = rtype,
                           name = name.base,
                           init = Just jexpr}
        newu  = thunkIt ((autoboxed . strict) rtype)  (Right (JBlock scode))
        theU
             | rlazy = newu
             | otherwise = (JX.invoke [] . JX.xmem "call" ) newu

        vMeth = JMethod { attr = attrs [JPublic, JFinal],
                           gvars = [],
                           -- @eval@ absolutely must return Lazy<T>
                           jtype = autoboxed rtype,
                           name = "call", args = [], body = JBlock scode }
        cafU  = JMember { attr = attrs [publik, JFinal, static], jtype = rtype,
                           name = cafV.name,
                           init = Just theU}
        cafF  = JMethod { attr = cafV.attr, jtype = rtype,
                           gvars = targs sym.typ, name = cafV.name,
                           args = cargs, body = JBlock fbody }
 
        fbody
            | recursive = [JReturn newu]
            | otherwise = scode

    let !caf = case (not (null cargs) || not (null bnds), rsimple) of
             --cargs  simple, selfrec

             (false, false)    -> cafU
             (false, true )    -> cafV
             (true,  _    )    -> cafF

    pure (reverse (caf:comms))
 
cafCode _ binds = error "cafCode: no caf"

localFun ∷ Symbol → TreeMap Int Binding → StG [JDecl]
localFun sym binds = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("compiling local " ++ sym.nice g))
    E.fatal sym.pos (text "can't compiler local fun " 
                    <+> text (sym.nice g)
                    <+> text " yet.") 
    pure [JComment (nicer sym g)]

innerFun ∷ Symbol → TreeMap Int Binding → StG [JDecl]
innerFun sym binds = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("compiling inner " ++ sym.nice g))
    E.fatal sym.pos (text "can't compiler inner fun " 
                    <+> text (sym.nice g)
                    <+> text " yet.") 
    pure [JComment (nicer sym g)]

innerCaf ∷ Symbol → TreeMap Int Binding → Bool → StG [JDecl]
innerCaf sym binds mutual = do
    g ← getST
    E.fatal sym.pos (text "can't compiler inner CAF " 
                    <+> text (sym.nice g)
                    <+> text " yet.") 
    E.logmsg TRACEG sym.pos (text ("compiling inner " ++ sym.nice g))
    pure [JComment (nicer sym g)]

{--
    > compiling symbol action 
    
    run @action@ with @symbol@ in the current compiling environment
    -}
compiling ∷ Symbol → StG 𝖆 → StG 𝖆
compiling sym action = do
    changeST Global.{genEnv ← (sym:)}
    r ← action
    changeST Global.{genEnv ← tail}
    pure r

{--
    - invokes 'genLambda' to generate code for a function
    - wraps the code in a while statement for tail calling functions
    -}
genFunction (sym@SymV {expr = Just dex}) rmode args binds = do
        -- g <- getST
        ex <- dex
        if not (RTailRec `member` sym.rkind) 
            then genLambda rmode ex args binds
            else do
                g <- getST
                let
                    ctxs  = zipWith (constraintArg g)  sym.typ.rho.context  (getCtxs g)
                    fargs = [ (attrFinal, sig, jt, nm ++ "f") | (_,sig,jt,nm) <- args ]
                    decls = [ JMember { attr = attrFinal, jtype = jt,
                                        name = nm,
                                        init = Just (JAtom (nm++"f"))}
                                            | (_,_,jt,nm) <- ctxs ]
                            ++ [ JMember { attr = attrFinal,
                                         jtype = jt,
                                         name = nm ++ "f",
                                         init = Just (JAtom nm)} | (_,sig,jt,nm) <- args ]
                    stmts = map JLocal decls
                code <-  genLambda rmode ex fargs binds
                pure [JCond "tailrecursion: while" (JAtom "true") (stmts ++ code)]
genFunction sym rmode args binds = error "genFunction: no function"

{--
  * Code for outer lambdas.
  *
  * Set's up a 'Binding' for the corresponding method argument and
  * 'match'es its pattern against it with the enclosed expression as continuation.
  -}
genLambda rm (Lam {pat, ex}) ((arg@(_, _, _, s)) : args) binds = do
    g <- getST
    ps <- patternStrictness pat
    let komplett = T.patsComplete g [pat]
        badguard = openCaseWhen g ex
        assert = isNothing komplett
         -- mustthrow = not assert && isNothing badguard
        margs = map JAtom [show ((last g.genEnv).name.nice g),
                                                 show (getpos pat)] ++ [JAtom s]
        -- construct new NoMatch("Module.foo", 42, arg$1)
        jthrow = [JThrow (JNew jtNoMatch  margs)]
 
    (_, code) <- match assert pat (adaptArg g arg ps)
                            (genLambda rm ex args) binds
    case komplett of
         Just p -> do
             E.warn (getpos pat) (text "function pattern is refutable, "
                             <> text "consider adding a case for "
                             <+/> text (nicer p g))
             pure (code ++ jthrow)
         _ -> case badguard of
             Just (Left x) -> do
                 E.warn (getpos x) (text "guard (" <> text (nicer x g) <> text  ") may evaluate to false.")
                 pure (code ++ jthrow)
             Just (Right p) -> do
                 E.warn (getpos p) (text"pattern guard (" <> text (nicer p g) <> text ") may fail to match.")
                 pure (code ++ jthrow)
             Nothing -> pure code
 
 
genLambda rm x [] binds {-
    | Lam {pat} <- x = do
        g <- getST
        E.fatal (getpos x) (text ("genLambda: argument for " ++ nice pat g ++ " missing"))
    | otherwise -} = do
        g <- getST
        E.logmsg TRACEG (getpos x) (text ("genLambda[]: " ++ nice x g)) 
        genReturn rm x binds
 
genLambda _ x _ _ = do
    g <- getST
    E.fatal (getpos x) (text ("genLambda: bad expression: " ++ nice x g))
    
--- runs 'genStmts' to generate code that returns the value
genReturn :: JType -> Expr -> TreeMap Int Binding -> StG [JStmt]
genReturn jt ex tree = genStmts return jt ex tree 
    where
        return x = [JReturn x]

{--
  * [usage] @genStmt rkind expression bindings@
  * [returns] A list of statements where the last one is a @return@
  *           or a @continue@ for a tailcall or a @throw@ from an
  *           incomplete case statement
  * This is called for return expressions only.
  -}
genStmts :: (JX -> [JStmt]) -> JType -> Expr -> TreeMap Int Binding -> StG [JStmt]
genStmts jret rm (x@Case {ckind,ex=cex,alts=calts}) binds = genCaseStmt jret rm x binds
 
genStmts jret rm (x@Let {env, ex}) binds = do
     case env of
         [k] -> do
             symv <- U.findV k

             -- change
             -- >   let !name = simple in ex
             -- to
             -- >   case simple of name -> ex
             case symv.expr of
                 Just vx
                     | symv.depth == 0,
                       symv.strsig.isStrict,
                       RSimple `member` symv.rkind,
                       RhoTau [] t <- symv.typ.rho = do
                                        vx <- vx
                                        genCaseStmt jret rm (cas vx) binds
                     where
                         cas vx = Case CWhen vx [alt] x.typ
                         alt = CAlt {ex, pat = PVar symv.pos symv.name.uid symv.name.base}
                 _ -> genLet jret rm x binds
         _ -> genLet jret rm x binds
 
genStmts jret rm (x@Let {env,ex}) binds = genLet jret rm x binds
 
genStmts jret rm (x@(Ifte c t e _)) binds {-| not (T.isSimple x) -} = do
         g <- getST
         cbnd <- genExpression false strict c binds
         tstm <- genStmts jret rm t binds
         estm <- genStmts jret rm e binds
         pure [sComment (nicer x g), 
            JCond "if" (strictBind cbnd).jex tstm, 
            JBlockX "else" estm]
 
 
genStmts jret rm ex binds
     {- | T.isSimple ex -} = do                                -- return or tailcall
         g   <- getST
         case ex of
             App _ _ _
                 | Vbl {name}:args <- map fst (flatx ex),
                   Just (sym@SymV {sid}) <- g.findit name,
                   sid == (head (g.genEnv)).sid,
                   length args == sym.depth = do
                        -- tail call
                        let argNames = map (++"f") (take (length sym.typ.rho.context) (getCtxs g) ) ++
                                    (getArgs g) 
                        call <- genExpr true rm ex binds
                        case call.jex of
                            JInvoke{args} -> do
                            -- si <- symInfo sym
                            -- abinds   <- sequence (zipWith genEx si.argJTs args)
                                let assigns = zipWith JAssign (map JAtom argNames) args --(map Binding.jex abinds)
                                pure (comment:assigns ++ [JEx (JAtom "continue tailrecursion")])
                            JNewClass{
                                args=[], 
                                decls=[JMethod{
                                    name="eval", 
                                    args=[], 
                                    body=JBlock [JReturn JInvoke{args}]}]} -> do
                                let assigns = zipWith JAssign (map JAtom argNames) args --(map Binding.jex abinds)
                                pure (comment:assigns ++ [JEx (JAtom "continue tailrecursion")])
                            _ -> do
                                E.error (getpos ex) (text "can't make tail recursion for"
                                    </> PP.nest 4 (text (nicer ex g))
                                    </> text "from"
                                    </> PP.nest 4 (PP.group (annoG g call.jex)))
                                return [JEx (JAtom "continue tailrecursion")]
                 where
                    comment = sComment ("tailcall  " ++ nicer ex g)
                    -- genEx tt aex = genExpr false tt aex binds
             _ = do
                 -- small hack to find out if this is actually a return ...
                 let realReturn
                        | [JReturn _]  <- jret (JAtom "x") = true
                        | otherwise = false  
                 bnd <- genExpr realReturn rm ex binds
                 pure (  sComment ("return " ++ show rm ++ "  " ++ nicer ex g)
                       : sComment (show bnd)
                       : jret bnd.jex)

genCaseStmt :: (JX -> [JStmt]) -> JType -> Expr -> TreeMap Int Binding -> StG [JStmt] 
{--
  * The code for case statements can and will be optimized in various ways.
 
  * First, if the case expression is of the form @Con x1 x2 ... xn@, we can avoid
  * actual construction of the value if all the patterns are of
  * the form @Con p1 p2 ... pn@ or @_@ or @v@ where v is not used on the right hand side.
  * Indeed, every definition of a function with multiple arguments and more than one
  * alternative
  * > fun p1a p1b p1c = alt1
  * > fun p2a p2b p2c = alt2
  * > ...
  * results in code like
  * > \_a\_b\_c -> case (_a, _b, _c) of
  * >    (p1a, p1b, p1c)  -> alt1
  * >    (p2a, p2b, p2c)  -> alt2
  * >    ...
  * so naive implementation would cause an extra tuple construction on every function
  * call - this tuple would be created just to get deconstructed right away.
  *
  * Second, if we know that the set of patterns covers all possibilities, we
  * can avoid if-statements on the last alternative. In addition, we do not need
  * to arrange for the case that the pattern is not matched.
  * Therefore, we have a sophisticated algorithm to find this out, see 'T.patsComplete'
  *
  * The generated java code looks like this:
  * >  // compute case expression if needed
  * >  if (p1a matches) {
  * >    if (p1b matches) {
  * >        if (p1c matches) {
  * >            code for alternative1
  * >  }}} // fall through to next alternative
  * >  if (p2a matches) {
  * >        ... like above ...
  * >  }
  * >  ... yet more alternatives ....
  * >  throw new NoMatch("xy.fr", 345, case expression)
  -}
genCaseStmt jret rm (x@Case {ckind,ex=cex,alts=calts}) binds = do
         g <- getST
     -- case Con a b c  ... avoid actual creation of value unless a pattern is not
     -- itself a constructor application or a variable that is not referenced in its scope
         capp <- constrApp cex                      -- Just (Con, args) if this is Con a1 a2 ... an
         pats <- foldM conUVarAlt true calts        -- true if all patterns are Con _ or _
         stri <- patternStrictness (head calts).pat -- strsig of 1st pattern
         -- rmex <- patternRMode (head calts).pat
         bcex <- genExpression false (if stri.isStrict then strict else lazy) cex binds              -- code for ordinary expression
         let makeBexs                                -- binds for cex or constr args
                 | pats, Just (con, xs) <- capp = case stri of
                         S ss -> mapM exStr (zip xs (ss ++ allLazy))
                         U    -> mapM exStr (zip xs allLazy)
                 | otherwise = pure [bcex]
         bexs <- makeBexs
         let con = if pats then maybe Nothing (Just • fst) capp else Nothing      -- constructor in case ex, if any
             complete
                 | caseOtherwise g x = Nothing         -- case true of true -> ...
                 | otherwise = T.patsComplete g (map CAlt.pat ralts)
             -- ralts are the alternatives that have no guard that could fail
             -- only the patterns of those alts are considered in deciding
             -- whether to throw exceptions or not
             -- walts are the alternatives that have an open case when
             (walts, ralts) = partitioned (isJust • openCaseWhen g • CAlt.ex) calts
             -- We will give a hint as to which guard is most likely
             -- causing trouble. If the patterns would be complete if there were
             -- no guards, then it is most likely the guard on an otherwise irrefutable
             -- pattern, if there is none, we assume it is the guard of the last alternative
             -- that has a guard.
             badguard = case T.patsComplete g (map CAlt.pat calts) of -- would it be complete
                 Just _  -> Nothing       -- case could not be made safe by adding guards
                 Nothing -> case filter (not • T.patternRefutable g • CAlt.pat) walts of
                     walt:_ -> openCaseWhen g walt.ex
                     []     -> case reverse walts of
                         walt:_ -> openCaseWhen g walt.ex
                         []     -> Nothing
 
             comment = sComment ("case  " ++ nice cex g ++ "  ... "
                         ++ (if ckind == CWhen then "(guard)" else ""))
             throw binds
                 | ckind == CWhen  = pure []                     -- guards always fall through
                 | Nothing <- con,
                   [bex1] <- binds = throwEx (strictBind  bex1)
                 | otherwise       = throwEx (strictBind  bcex)      -- construct case ex for throw
             throwEx arg
                 | isJust complete, Just (Left x) <- badguard = do
                     when (ckind != CNoWarn) do
                         E.warn (getpos x) (text "guard (" <> text (nicer x g) <> text ") may evaluate to false.")
                     pure (jthrow arg)
                 | isJust complete, Just (Right p) <- badguard = do
                     when (ckind != CNoWarn) do
                         E.warn (getpos p) (text "pattern guard (" <> text (nicer p g) <> text ") may fail to match.")
 
                     pure (jthrow arg)
                 | Just p <- complete = do
                     when (ckind != CNoWarn) do
                         E.warn (last calts).pat.getpos (text "pattern match is not exhaustive,"
                                 <+> text "consider adding a case for "
                                 <+> text (nicer p g))
                     pure (jthrow arg)
                 | otherwise = pure []                   -- no throw neeeded
 
             throwargs exb = map JAtom [show ((Prelude.last g.genEnv).name.nice g),
                                                 show (getpos x)] ++ [Binding.jex exb]
             jthrow exb = [JThrow (JNew jtNoMatch (throwargs exb))]
 
         (nbexs, code) <- genAlts complete binds [] con bexs calts    -- make alternatives
         jthrow <- throw nbexs                               -- make throw statement
         pure (comment : concat (reverse (jthrow:code)))
 
     where
         genAlts complete binds codes con bexs ((calt@CAlt {pat, ex}):alts) = do
             g <- getST
             let last = finalAlt g calt || null alts
             -- when = T.openCaseWhen g ex
                 noif = last && isNothing complete
                 poss = map (getpos • CAlt.pat)  alts
                 unreachable p = E.warn p (text "equation or case alternative cannot be reached.")
             (codes, nbexs) <- genAlt noif binds codes con bexs calt
             if last
                 then do
                     when (ckind != CNoWarn) do
                         forM_ poss unreachable
                     pure (nbexs, codes)
                 else genAlts complete binds codes con nbexs alts
         genAlts complete binds codes con bexs alts = error "genAlts: null alts"
 
         genAlt noif binds codes mbcon bexs (alt@CAlt {pat,ex})
             | Nothing  <- mbcon = do
                 g <- getST
                 if patternRefutable g pat && ckind == CNormal
                 then do
                    (rbex, code1) <- realize "$" (head bexs)
                    (nbex, code) <- match noif pat rbex (genStmts jret rm ex) binds
                    pure ((altComm g:(code1++code)):codes, [nbex])
                 else do
                    (nbex, code) <- match noif pat (head bexs) (genStmts jret rm ex) binds
                    pure ((altComm g:code):codes, [nbex])  
                 
                 
             | Just con <- mbcon = do
                 g <- getST
                 stri <- patternStrictness pat
                 case pat of
                     PCon {qname} -> do
                         sym <- U.findD qname
                         if sym.sid == Symbol.sid con then do
                                 let nbexs = case stri of
                                         S ss -> zipWith (bexStr g) bexs (ss ++ allLazy)
                                         _    -> bexs
                                 code <- matchCon noif pat con nbexs (genStmts jret rm ex) binds
                                 g <- getST
                                 pure ((altComm g:code):codes, nbexs)
                             else do
                                 E.warn (getpos pat) (text "case alternative will never be taken")
                                 pure ([]:codes, bexs)
                     _  -> do
                         g <- getST
                         -- uvar <- conUVarAlt true alt
                         -- if uvar then do
                         code <- genStmts jret rm ex binds
                         pure ((altComm g:code):codes, bexs)
             | otherwise = undefined
             where
                 altComm g = sComment ("... of  " ++ nice pat g ++ " -> " ++ nicer ex g)
 
 
         exStr  (ex, stri)
             | Strictness.isStrict stri = genExpression false strict  ex binds
             | otherwise                = genExpression false lazy    ex binds
         bexStr g bind stri
             | Strictness.isStrict stri = strictBind bind
             | otherwise = bind
             -- check if an expression is a constructor application
         constrApp (ex@App _ _ _) = case map fst (flatx ex) of
             Con {name}:xs -> do
                 sym <- U.findD name
                 if length sym.flds == length xs
                     then pure (Just (sym, xs))
                     else pure Nothing            -- for example:  case (,) a of mktuple -> mktuple b
             _ -> pure Nothing
         constrApp _ = pure Nothing      -- for example: let a = 1 in Just a
         -- check if a pattern is a constructor application or an unused variable
         conUVarAlt false _ = pure false
         conUVarAlt true (CAlt {pat = PCon {pos}}) = pure true
         conUVarAlt true (CAlt {pat = PVar {var,uid}, ex}) = do
             sym  <- U.findV (Local uid var)
             refs <- T.references [sym.sid] ex
             pure (refs == 0) 
         conUVarAlt _ _ = pure false
         -- check if there could match anything else after this alternative has matched
         finalAlt g (CAlt {pat,ex})
             | T.patternRefutable g pat = false
             | Just _ <- openCaseWhen g ex = false
             | otherwise = true
genCaseStmt jret rm nocase binds = error "genCaseStmt: no case"

genLet :: (JX -> [JStmt]) -> JType -> Expr -> TreeMap Int Binding -> StG [JStmt] 
genLet jret rm (x@Let {env,ex}) binds = do
         g <- getST
         syms <- mapM U.findV env
         case syms of
            [sym] = do
                c <- selfReferentialCAF sym
                if c then genLetClass syms else genLetSingle sym
            _     = genLetClass syms

     where
         selfReferentialCAF (sym@SymV {expr = Just x, depth = 0}) = do
            refs <- x >>= T.references [sym.sid]
            return (refs > 0)
         selfReferentialCAF _ = return false
         
         -- generate a single inner function or a non self recursive caf
         genLetSingle sym = do
            g <- getST
            let letbinds = mkbind g JAtom binds sym
            decls <- gen false letbinds sym
            stmts <- genStmts jret rm ex letbinds
            return (comment g : (map JLocal decls ++ stmts))
            
         -- generate declaration of inner function or caf
         gen mutual binds sym
            | sym.depth == 0 = innerCaf sym binds mutual 
            | otherwise      = innerFun sym binds 
         
         -- set up simple bindings, generate the mutually dependent items in a class
         -- instantiate that class and make bindings that access the bindings from outside
         genLetClass syms = do
            g <- getST
            let innerbinds = fold (mkbind g JAtom) binds syms
            decls <- mapM (gen true innerbinds) syms
            u <- uniqid
            let letcl = JClass{attr = attrFinal, name=base, 
                    gvars=[], extend = Nothing, implement = [], defs = concat decls}
                -- udecls = map (\JLocal decl -> decl) decls
                jtype = Ref{jname = JName{qual="", base}, gargs=[]}
                base = "Let$" ++ show u
                name = "let$" ++ show u
                var = JMember{attr=attrFinal, jtype, name, 
                        init = Just (JNew jtype [])}
                member n = JExMem{jex = JAtom name, name=n, targs=[]}
                letbinds = fold (mkbind g member) binds syms
            stmts <- genStmts jret rm ex letbinds
            return (comment g : JLocal letcl : JLocal var : stmts) 
         comment g = sComment (nicer x g)
         mkbind :: Global -> (String -> JX)  -> TreeMap Int Binding -> Symbol -> TreeMap Int Binding
         mkbind g prefix binds sym = insert sym.sid bind binds 
            where
                bind = Bind{stype=nicer sym.typ g, 
                            ftype=sym.typ, jtype=bjt, 
                            jex=prefix name}
                bjt = mode jt
                jt  = sigmaJT g sym.typ
                mode = if sym.depth > 0 then strict
                        else if RValue `member` sym.rkind
                            then strict else lazy
                name = (U.javaName g sym.name).base
genLet jret _ ex binds = do
     g <- getST
     E.fatal (getpos ex) (text("genLet: not a let  " ++ nice ex g))


--- genExpression returnexpression f expr binds
--- Generate java code for expression.
--- The target java type is determined by @expr@ and modified with @f@ 
genExpression :: Bool -> (JType -> JType) -> Expr -> TreeMap Int Binding -> StG Binding
genExpression ret stri x binds = do
    g <- getST
    let nt = sigmaJT g (unJust x.typ) 
    genExpr ret (stri nt) x binds

--- Avoid change of arity when a function is substituted for b
--- > forall a b .ctx => (a->b)  ==> forall a b. ctx => a -> b 
rhoTauInSigma (ForAll bs (RhoTau ctx fun)) = ForAll bs (U.rhoTau fun).{context=ctx}
rhoTauInSigma sig = sig
 
{-- 
    Generate code for simple Frege expressions
    
    > genExpr inReturn jtype expr binds
    1. @inReturn@ tells us if we are in a return expression, that is,
    if this constitutes one of the results of a function/CAF.
    2. @jtype@ is the expected java type of the expression
    3. @expr@ is a simple Frege expression - no let or case
    4. @binds@ the active bindings 
-}

genExpr _ rt (Lit {kind, value, typ = Just sigma}) binds
    | kind != LRegex && kind != LBig = do
            g <- getST
            let v
                    | kind `elem` [LInt, LLong, LDouble, LFloat] = value.replaceAll ´_´ ""
                    | otherwise = value
            pure (adapt (newBind g sigma  (JAtom v)) rt)

genExpr rflg rm ex binds = do
    g <- getST
    let ft = unJust (Expr.typ ex)
    E.logmsg TRACEG (getpos ex)  (text "genExpr: "
            <+> text (nicer ex g) 
            <+> text " :: "
            <+> text (nicer ft g)
            <+> text " @@ "
            <+> text (show rm))
    let genArgBind arm aex = genExpr false arm aex binds

        result bind = do
            let abind = adapt bind rm
            E.logmsg TRACEG (getpos ex) (text "genExpr result: " <+> (text . show) abind)
            pure abind
        -- the type that results when we apply an argument
        reduceSigma  ForAll{bound, rho}
            | RhoFun{rho=it} ← rho = ForAll [] it
            | RhoTau{tau} ← rho, Just (a,b) ← tau.getFun = U.tauAsSigma b
            | otherwise = error ("genExpr.reduceSigma: " ++ nicer rho g) 

        -- go down an App spine n steps, do the call and apply leftover arguments afterwards 
        etaShrink n = do
                E.logmsg TRACEG (getpos ex) (
                        text "etaShrink:" <+> anno n <+> text (nicer ex g))
                unEta n [] ex 
          where 
            unEta 0 args app = genExpression false id app binds >>= unwind args . strictBind
            unEta n args (App{fun,arg}) = unEta (n-1) (arg:args) fun
            unEta n args noapp = E.fatal (getpos ex) (
                text "unEta" <+> anno n <+> (text . show) (map (const '.') args) <+> text (nicer ex g))
            -- now unwind the stack, applying the arguments as needed
            unwind []   bind = result bind
            unwind args bind = do
                E.logmsg TRACEG (getpos ex) (text "unwind: "
                        </> text (show bind)
                        </> PP.stack (map (text . flip nicer g) args)
                    )
                case bind.jtype of 
                    Func{gargs} = do
                        let n       =  min (length args) (length gargs - 1)
                            cargs   = take n args
                            rargs   = drop n args
                            ftype   = fold (const . reduceSigma) bind.ftype cargs
                        eargs ← zipWithM (\t x → genExpr false t x binds) (take n gargs) cargs  
                        unwind rargs . strictBind $  
                                    bind.{stype = nicer ftype g, ftype, jtype = last gargs, 
                                    jex ← JX.invoke (map _.jex eargs) . JX.xmem "apply"}
                    t = E.fatal (getpos ex) (text "unwind, no function:" <+> text (show t))
                     
        -- provide missing arguments for partial calls
        -- Let a be the number of missing arguments as indicated by the sigma type of the expression
        -- Let n be the arity of the java function type that is expected.
        --   * In any case, we can provide at most a additional arguments to the expression.
        --   * If n < a, then we have a situation like with
        --       map const ....
        --       a = 2, n = 1 because map expects an unary function
        --       code: etaWrap const (a -> b -> a) Func<a, Func<b,a>>
        --             => \a1 -> etaWrap (const a1) (b->a) Func<b,a>
        --             => \a1 -> (\a2 -> const a1 a2)
        --   * If n == a, we just extend with n args
        --       code: etaWrap const (a -> b -> a) a
        --             => \a1 a2 -> const a1 a2
        --  *  If n > a, we have a situation like in
        --        (const . const) 42 true "cool"
        --     where the left const has type (String→Int) → (Bool→String→Int)
        --     and is asked to produce Func.T<Func.U<String,Int>, Bool, String, Int>
        --     with a=1, n=3
        --     In any case, we must gobble up all the n arguments, thus
        --     \fsi b s -> const fsi
        --     This should etaWrap the inner expression
        --     \fsi b s -> (\eta -> const fsi eta)
        --     And we can apply b:
        --     \fsi b s -> ((\eta -> const fsi eta) b)
        --     But this returns fsi, which was (String->Int), so we can finaly apply s.
        --     It must be that in every step some Func is returned and we apply then so
        --     many of our leftover arguments as this Func takes.
        --     (It remains to be seen if we can beta reduce the inner lambda.) 
        etaWrap sigs
            | Func{gargs} ← boxed rm = do
                let n = length gargs - 1
                    a = length sigs
                g <- getST
                E.logmsg TRACEG (getpos ex) (
                        text "etaWrap: (a=" <> anno a <> text ", n=" <> anno n <> text ") "
                        <+> text (nicer ex g)
                        <+> text " @@ " <+> text (nicer ft g)
                        <+> text " as " <+> text (show rm)
                    )
                uids ← replicateM n uniqid
                let syms    = [ (U.patLocal (pos.change VARID ("η" ++ show u)) u "η").{typ=s} 
                                    | (u,s) <- zip uids sigs]
                    atoms   = map (JAtom . ("η$" ++) . show) uids
                    ajts    = take n gargs
                    ebnds   = [ (newBind g s x).{jtype=t} | 
                                    (s,x,t) <- zip3 sigs atoms ajts]
                    newbinds = fold (\t (s,b) → insert s.sid b t) binds (zip syms ebnds)
                    fargs    = [(attrFinal;pSigma;jt;nm) | (jt,JAtom nm) ← zip ajts atoms]
                    eexs     = [ Vbl{pos=sym.pos, name=sym.name, typ=Just sym.typ} | sym <- syms ]
                    nex      = fold (\x y -> App x y (reduceSigma <$> x.typ)) ex eexs
                    subrm    = case drop (min a n) gargs of
                        [x] -> x
                        gs  -> Func gs
                mapM_ SymTab.enter syms 
                call ← genExpr false  subrm nex newbinds
                let lambda = JLambda{fargs, code = Left apply}
                    apply
                        | n > a  = JInvoke (JX.xmem "apply" call.jex) (drop (n-a) atoms)
                        | otherwise = call.jex
                result (newBind g ft lambda).{jtype=rm}
            --| Func{gargs} ← boxed rm = E.fatal pos (text "etaWrap: don't know how to wrap "
            --                <+> text (nicer ft g)
            --                <+/> text " into "
            --                <+> text (show rm)
            --                <+> text " with arity " <+> anno (length sigs))  
            | otherwise = E.fatal pos (text "etaWrap: "
                            <+> text "expected function type, got "
                            <+> text (show rm))
            where
                -- (_, sigs) = U.returnType (ft.rho)
                pos = getpos ex
    case ex of
        -- Local Variables are being lookued up in the bindings
        Vbl{name=Local{uid, base}, pos, typ}
            | Just b <- lookup uid binds = case b.ftype of
                    ForAll{bound, rho}
                        | not (null bound) = instPatternBound pos b ft >>= result  
                    _                      = result b
            | otherwise = do
                E.error pos (text "FATAL COMPILER ERROR "
                    <+> text (nicer ex g)
                    <+> text " not bound")
                sym <- U.findV ex.name
                result (newBind g sym.typ (JAtom ("UNBOUND." ++ ex.name.base)))
        Vbl{pos,name}
            | Just (sym@SymV{}) ← g.findit name =
                if (sym.depth > 0) then etaWrap (snd (U.returnType ft.rho))
                else do 
                    let contexts    =  map  (reducedCtx g)  ft.rho.context
                        subst       =  U.unifySigma g sym.typ ft
                        retjt       =  (returnJType sym.rkind . lambdaType . sigmaJT g) ft
                        targs       =  map (boxed . tauJT g . substIdTau subst) (sym.typ.tvars pos)
                    -- resolve the contexts, if any
                    ctxs    ←  mapM (resolveConstraint pos) contexts
                    let item    =  U.symJavaName g sym
                        stref   =  (JX.staticMember item).{targs}
                        call0
                            | null targs, null ctxs  =  newBind g ft stref
                            | otherwise              =  newBind g ft (JInvoke stref ctxs)
                        call    =  call0.{jtype = retjt}
                    result call
            | otherwise = do
                E.error pos (
                        text "FATAL COMPILER ERROR "
                    <+> text (nicer ex g)
                    <+> text "does not exist or is no variable")
                result (newBind g ft (JAtom ("UNKNOWN." ++ name.base)))
        -- Literals, except regular expressions and big integers are just 'JAtoms'
        -- > 1_234 = 1234
        -- Regular expressions and Big Integers need java code for initialization
        -- and are thus handled by findConst/makeConstants
        Lit{kind, value, typ = Just sigma}
            | kind `elem` [LInt, LLong, LDouble, LFloat] 
                = result (newBind g sigma (JAtom (value.replaceAll ´_´ "")))
            | kind `elem` [LRegex, LBig] 
                = staticConst ex >>= result . newBind g sigma 
            | otherwise 
                = result (newBind g sigma (JAtom value))
        -- Function application 
        App{} =  genApp fun args >>= result
            where
                flat  = map fst (flatx ex)
                fun   = head flat
                args  = tail flat

                -- constructors
                genApp (con@Con {pos, name, typ = Just csigma}) args = do
                    sym     ← U.findD name
                    symt    ← U.findT sym.name.tynm
                    E.logmsg TRACEG pos (
                            text "genApp: constructor " <+> text name.base <+> text " :: "
                            <+> text (nice sym.typ g)
                            <+> text " @@ " 
                            <+> text (nice csigma g)
                        )
                    let ari         =  length sym.flds
                        subst       =  U.unifySigma g sym.typ csigma
                        strho       =  substIdRho subst sym.typ.rho
                        -- (ret, _)    =  U.returnType strho
                        sigs        =  map (unJust . _.typ) args
                        argjts      =  zipWith ($)
                                            (strictFuns sym.strsig)
                                            (map (lambdaType . sigmaJT g) sigs)
                        targs       =  map (boxed . tauJT g . substIdTau subst) (symt.typ.tvars pos)
                        -- ret         =  U.substTau subst res
                        retjt       =  (lambdaType . sigmaJT g) ft
                        contexts    =  map  (reducedCtx g)  strho.context

                                        -- explain the substitution
                    forM (each subst) $ \(v,tau) →
                        E.logmsg TRACEG pos (text "genApp: "
                            <+> text v 
                            <+> text " = " 
                            <+> text (nicer tau g))

                    E.logmsg TRACEG pos (
                                text "genApp: ari=" <> text (show ari) 
                            <+> text "strho = " <+> text (nice strho g)
                            <+> text "retjt = " <+> text (show retjt))

                    case symt of
                        any | nargs > ari = etaShrink (nargs - ari)
                            | nargs < ari = etaWrap sigs
                            where nargs = length args
                        SymT{newt = true, product = true}
                            = genExpr rflg rm (head args) binds
                        SymT{}
                            = do
                                -- resolve the contexts, if any
                                ctxs    ←  mapM (resolveConstraint pos) contexts
                                -- arguments
                                abinds  ←  sequence (zipWith genArgBind argjts args)
                                let arguments   =  ctxs ++ map  _.jex  abinds

                                let cons = U.symJavaName g sym
                                    jref = Ref{jname = cons, gargs = targs}
                                    make = JX.static "mk" jref
                                    call = JInvoke make arguments
                                    bind = (newBind g ft call).{jtype = retjt}
                                pure (if not rflg 
                                            && not (isStrictJT rm)
                                            && any isStrictJT argjts 
                                        then delayBind bind
                                        else bind)
                        _   = noGenApp "not yet" con args

                genApp (vbl@Vbl {pos, name, typ = Just vsigma}) args = do
                    symv ← U.findV name
                    let symtyp = rhoTauInSigma symv.typ
                    E.logmsg TRACEG pos (
                            text "genApp: function " <+> text name.base <+> text " :: "
                            <+> text (nicer symtyp g)
                            <+> text " @@ " 
                            <+> text (nicer vsigma g)
                        )

                    -- substitution
                    let ari         =  if lambdaBound 
                                        then length sigs -- (length . snd . U.returnType . _.rho . rhoTauInSigma) vsigma 
                                        else symv.depth
                        nargs       = length args
                        lambdaBound 
                            | Local{} ← name, Nothing ← symv.expr = true
                            | otherwise                           = false
                        subst       =  U.unifySigma g symtyp vsigma
                        rhoctx      =  substIdRho subst symtyp.rho
                        (res, sigs)    =  U.returnType rhoctx
                        -- sigs        =  map (unJust . _.typ) args
                        argjts      =  zipWith ($)
                                            (strictFuns symv.strsig)
                                            (map (lambdaType . sigmaJT g) sigs)
                        targs       =  map (boxed . tauJT g . substTau subst) (symv.typ.tvars pos)
                        ret         =  ft
                        retjt       =  (returnJType symv.rkind . lambdaType . sigmaJT g) ret
                        contexts    =  map  (reducedCtx g)  rhoctx.context

                    -- explain the substitution
                    forM (each subst) $ \(v,tau) →
                        E.logmsg TRACEG pos (text "genApp: "
                            <+> text v 
                            <+> text " = " 
                            <+> text (nicer tau g))


                    E.logmsg TRACEG pos (
                                text "genApp: ari=" <> text (show ari) 
                            <+> (text "args  = " <+> (text . joined " ~> " . map (flip nicer g)) sigs)
                            <+/> text "retjt = " <+> text (show retjt))

                    if nargs < ari        then etaWrap (drop nargs sigs)
                    else if nargs > ari   then etaShrink (nargs-ari)
                    else do
                      -- resolve the contexts, if any
                      ctxs    ←  mapM (resolveConstraint pos) contexts
                      -- arguments
                      abinds  ←  sequence (zipWith genArgBind argjts args)
                      let arguments   =  ctxs ++ map  _.jex  abinds

                      case symv of
                        -- lambda bound functions
                        SymV{name = Local{uid}, expr = Nothing} → do
                            fun ← genExpr false (sigmaJT g vsigma) vbl binds
                            let call0   = newBind g ret
                                            (JInvoke 
                                                JExMem{jex = fun.jex, name = "apply", targs = []}
                                                arguments)
                                call    =  call0.{jtype = strict retjt}
                                result  =  if isStrictJT rm 
                                            then call
                                            else delayBind call
                            pure result 
                        -- ordinary functions
                        SymV{expr = Just _} → do
                            let method  =  U.symJavaName g symv
                                stref   =  (JX.staticMember method).{targs}
                                call0   =  newBind g ret
                                                (JInvoke stref arguments)
                                call    =  call0.{jtype = retjt}
                                result  =  if isStrictJT rm 
                                            then call
                                            else if rflg || isStrictJT retjt 
                                                then delayBind call
                                                else call   -- lazy -> lazy and no return
                            pure result
                        -- native functions 
                        SymV{nativ = Just item} →  do
                            -- code for native call


                            if wrappedOnly g symv 
                            then do
                                let method  =  U.symJavaName g symv
                                    stref   =  (JX.staticMember method).{targs}
                                    call    =  newBind g ret
                                                (JInvoke stref arguments)
                                    result  =  if isStrictJT rm then call else delayBind call
                                pure result 
                            else do
                                let call 
                                        | wrapped g symv = case wrapCode g JEx res symv subst arguments of
                                                (JEx ex:_) -> newBind g ret ex
                                                _ -> error "unexpected wrapCode result"
                                        | otherwise = nativeCall g symv subst arguments
                                    result  =  if isStrictJT rm then call else delayBind call
                                pure result
                        -- class operations
                        SymV{name = MName{tynm,base}}
                            | Just (SymC {tau}) <- g.findit tynm 
                            = do
                                let inst   = JInvoke get (tail arguments)
                                    get    = JX.jexmem  (head ctxs) (latinF ++ mangled base)
                                    bind   = (newBind g ret inst).{jtype = retjt}
                                pure bind
                        _ → noGenApp "unknown SymV" vbl args
                genApp bad args = noGenApp "no Con or Vbl" bad args
                noGenApp why bad args = do
                    E.error (getpos ex) (text "Cannot genApp"
                        <+> text "(" <> text why <> text ")"
                        <+> text (nicer bad g) 
                        <+> text " ...  @@ " 
                        <+> text (nicer (unJust bad.typ) g))
                    result (newBind g ft (JAtom "cannot(gen,application)"))
        _   = do
            E.error (getpos ex) (text "Cannot genSimple: " 
                    <+> text (nicer ex g)
                    <+> text " @@ " 
                    <+> text (nicer ft g))
            return (newBind g ft (JAtom "cannotgenexpression"))
