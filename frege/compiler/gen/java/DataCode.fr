--- Code generation for @data@
module frege.compiler.gen.java.DataCode where

import frege.Prelude hiding (<+>)

import Compiler.common.Errors as E()
-- import Compiler.common.Mangle(mangled)
import Compiler.Utilities (javaName)
import Lib.PP(text, <+>)
import Data.TreeMap(values, TreeMap.empty emptyTree)
import Compiler.classes.Nice
import Compiler.types.Global
import Compiler.types.Symbols
import Compiler.types.AbstractJava
import Compiler.types.Types(pSigma)
import Compiler.gen.java.VarCode(varCode)
import Compiler.gen.java.Common
import Compiler.gen.java.Bindings(assign)
import Compiler.enums.Flags(TRACEG)

--- Generate code for @data@ definitions
dataCode :: Symbol → StG [JDecl]
-- dataCode (sym@SymT{}) = return []
{--
    Enumerations 
    (that is, data types where no constructor has any fields) 
    are translated to a @final static class@
    that contains definitions for (short) constants accessible under the
    names of the constructors and the function definitions found in the
    where clause of the @data@.
-}
dataCode (sym@SymT{enum = true}) = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))

    sub <- subDecls sym

    let result = JClass{attr = attrTop, 
                    name = (javaName g sym.name).base, 
                    gvars = [], 
                    extend = Nothing, 
                    implement = [], 
                    defs = constrs ++ sub}
        constrs = [JMember{attr = attrTop, 
                    jtype = Nativ "short" [], 
                    name = (javaName g s.name).base, 
                    init = Just (JAtom (show s.cid))} | s@SymD{}  ← values sym.env]
        comment = JComment ("data " ++ sym.name.base ++ " :: " ++ show sym.kind)
    pure [comment, result]

{--
    Newtypes are data types with a single constructor that has a single field.
    They are renamings of the type of that field. 
    We generate an @abstract static class@ as a namespace for the 
    definitons in the where clause, if any. Otherwise, nothing is generated.
-}
dataCode (sym@SymT{product = true, newt = true}) = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))
    
    sub <- subDecls sym
    let result = JClass{attr = attrs [JAbstract, JPublic, JStatic], 
                        name = (javaName g sym.name).base,
                        gvars = [], 
                        extend = Nothing, 
                        implement = [], defs = sub}
        comment = JComment ("newtype " ++ sym.name.base ++ " :: " ++ show sym.kind)
    pure (if null sub then [comment] else [comment, result])

{--
    Product types are data types with a single constructor with more than one field.
    For this, we generate a plain old Java class that implements @Lazy@. 

    A higher kinded type constructor is mapped to a generic class. 
    In this case, also the appropriate Kinded instances will be generated.

-}
dataCode (sym@SymT{ product = true }) = do
    g ← getST 
    E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))
    
    con <- conDecls $ head [ con | con@SymD{} ← values sym.env ] 
    sub <- subDecls sym

    let jtype = rhoJT g sym.typ.rho
        kindeds = map (asKinded jtype) [1..kArity sym.kind]
        gvars = targs sym.typ
        coerces = map (coerceDecl gvars) kindeds
    let result = JClass{attr = attrTop, 
                        name = (javaName g sym.name).base, 
                        gvars, 
                        extend = Nothing, 
                        implement = jtValue : Lazy jtype : kindeds, 
                        defs = con ++ [callMethod jtype] ++ coerces ++ sub}
        comment = JComment ("data " ++ sym.name.base ++ " :: " ++ show sym.kind)
    pure [comment, result]

{--
    Native data types are mapped to a class that acts as namespace
    for the subdefinitions, if any.
-}
dataCode (sym@SymT{ nativ = Just _ }) = do                               -- nativ
     g  ←   getST
     E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))
     
     sub    ← subDecls sym
     
     -- lazyDefs <- lazyDeclarations vals
     let result 
            | null sub = JComment "no local functions for this type"
            | otherwise = JClass {attr = attrTop,
                                    name = (javaName g sym.name).base,
                                    gvars = [], 
                                    extend = Nothing, implement = [],
                                    defs = sub}
     stio [JComment (nice sym g), result]

dataCode sym = do
    g ← getST
    E.fatal sym.pos (
            text "dataCode: argument is "
            <+> text (nice sym g) 
        )

{--
    Generate the method that coerces from a 'Kinded' representation
    upwards to the original, for example for kind 1:
    > static<A> Foo<A> coerce(Kinded.U<Foo<?>, A> it) { return (Foo<A>) it; }
    
-}
coerceDecl gvars jt = 
            JMethod{attr = attrTop, gvars, 
                    jtype = original, 
                    name = "coerce", 
                    args = [(attrs [JFinal], pSigma, jt, "it")], 
                    body = JBlock [stmt]}
    where
        original = fromKinded jt
        stmt = JReturn 
                JCast{jt=original, jex=JAtom "it"}


{-- 
    Given a data constructor symbol, make 
    - member declarations for the fields 
    - a private java constructor that initializes the arguments 
    - a public "mk" method with the same argument list as the constructor 
-}
conDecls ∷ Symbol → StG [JDecl]
conDecls (sym@SymD{}) = do
    si  ←   symInfo sym
    g   ←   getST
    let arity   = length sym.flds
        decls   = [comment, constr, constructorMethod sym.cid, make] 
                    ++ members
        comment     = JComment (nice sym g)
        jtype       = si.returnJT
        constrargs  = argDefs attrFinal si (getArgs g)
        args        = take arity (map JAtom (getArgs g))
        constr      = JConstr {attr = attrs [JPrivate], jtype,
                             args = constrargs,
                             body = JBlock super}
        namedfields = namedFields sym.flds
        super = zipWith (assign g) namedfields constrargs
        make  = JMethod {attr = attrs [JPublic, JFinal, JStatic],
                         gvars = targs sym.typ, jtype, name = "mk",
                         args = constrargs,
                         body = JBlock [JReturn (JNew jtype args)]}
        members = zipWith mkMember namedfields constrargs
    return decls
conDecls _ = error "no SymD"

--- generate
--- >final public int constructor() { return n; }
constructorMethod n = atomMethod "constructor" (Nativ "int" []) (show n)

{--
    generate
    > final public T call() { return this; }
-}
callMethod t = atomMethod "call" t "this"

{-- 
    Generate the code for everything in a namespace of a type
    that is not a constructor.
--}
subDecls ∷ Symbol → StG [JDecl]
subDecls (sym@SymT{}) = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("subDecls for " ++ nicer sym g))
    let subdefs = filter (not . _.{flds?}) (values sym.env)   -- no constructors
    concat <$> mapM (varCode emptyTree) subdefs 
subDecls sym = do
    g ← getST
    E.fatal sym.pos (
            text "subDecls: argument is "
            <+> text (nice sym g) 
        )    