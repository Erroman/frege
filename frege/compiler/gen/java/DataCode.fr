--- Code generation for @data@
module frege.compiler.gen.java.DataCode where

import frege.Prelude hiding (<+>)

import Compiler.common.Errors as E()
import Compiler.common.Mangle(mangled)
import Compiler.Utilities (javaName)
import Lib.PP(text, <+>)
import Data.TreeMap(values, TreeMap.empty emptyTree)
import Compiler.classes.Nice
import Compiler.types.Global
import Compiler.types.Symbols
import Compiler.types.AbstractJava
import Compiler.gen.java.VarCode(varCode)
import Compiler.gen.java.Common
import Compiler.enums.Flags(TRACEG)

--- Generate code for @data@ definitions
dataCode :: Symbol → StG [JDecl]
-- dataCode (sym@SymT{}) = return []
{--
    Enumerations 
    (that is, data types where no constructor has any fields) 
    are translated to a @final static class@
    that contains definitions for (short) constants accessible under the
    names of the constructors and the function definitions found in the
    where clause of the @data@.
-}
dataCode (sym@SymT{enum = true}) = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))

    sub <- subDecls sym

    let result = JClass{attr = attrTop, 
                    name = (javaName g sym.name).base, 
                    gvars = [], 
                    extend = Nothing, 
                    implement = [], 
                    defs = constrs ++ sub}
        constrs = [JMember{attr = attrTop, 
                    jtype = Nativ "short" [], 
                    name = (javaName g s.name).base, 
                    init = Just (JAtom (show s.cid))} | s@SymD{}  ← values sym.env]
        comment = JComment ("data " ++ sym.name.base ++ " :: " ++ show sym.kind)
    pure [comment, result]

{--
    Newtypes are data types with a single constructor that has a single field.
    They are renamings of the type of that field. 
    We generate an @abstract static class@ as a namespace for the 
    definitons in the where clause, if any. Otherwise, nothing is generated.
-}
dataCode (sym@SymT{product = true, newt = true}) = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))
    
    sub <- subDecls sym
    let result = JClass{attr = attrs [JAbstract, JPublic, JStatic], 
                        name = (javaName g sym.name).base,
                        gvars = [], 
                        extend = Nothing, 
                        implement = [], defs = sub}
        comment = JComment ("newtype " ++ sym.name.base ++ " :: " ++ show sym.kind)
    pure (if null sub then [comment] else [comment, result])

{--
    Product types are data types with a single constructor with more than one field.
    For this, we generate a plain old Java class that implements @Lazy@. 
    
    A type with type variables is mapped to a generic class. In this case, also the
    
-}
dataCode (sym@SymT{product = true}) = do
    g ← getST 
    E.logmsg TRACEG sym.pos (text ("dataCode for " ++ nicer sym g))
    
    sub <- subDecls sym
    
    let dcon = head [ con | con@SymD{} ← values sym.env ]
        jtype = rhoJT g sym.typ.rho
        result = JClass{attr = attrTop, 
                        name = (javaName g sym.name).base, 
                        gvars = targs sym.typ, 
                        extend = Nothing, 
                        implement = [Lazy jtype], 
                        defs = []}
        comment = JComment ("data " ++ sym.name.base ++ " :: " ++ show sym.kind)
    pure [comment, result]
    
dataCode sym = do
    g ← getST
    E.fatal sym.pos (
            text "dataCode: argument is "
            <+> text (nice sym g) 
        )


{-- 
    Generate the code for everything in a namespace of a type
    that is not a constructor.
--}
subDecls ∷ Symbol → StG [JDecl]
subDecls (sym@SymT{}) = do
    g ← getST
    E.logmsg TRACEG sym.pos (text ("subDecls for " ++ nicer sym g))
    let subdefs = filter (not . _.{flds?}) (values sym.env)   -- no constructors
    concat <$> mapM (varCode emptyTree) subdefs 
subDecls sym = do
    g ← getST
    E.fatal sym.pos (
            text "subDecls: argument is "
            <+> text (nice sym g) 
        )    