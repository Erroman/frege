--- Code generation for method calls
module frege.compiler.gen.java.MethodCall where

import Data.TreeMap(TreeMap)

import Compiler.Utilities as U()

import Compiler.classes.Nice(nice, nicer)

import Compiler.types.AbstractJava
import Compiler.types.Types(unST, Sigma, Tau, ForAll, RhoTau, RhoFun)
import Compiler.types.Symbols(SymbolT)
import Compiler.types.Global
import Compiler.types.JNames(JName, memberOf)

import Compiler.common.Types as CT

import frege.compiler.tc.Methods (NIKind, niKind)

import Compiler.gen.java.Common
import Compiler.gen.java.Bindings 

returnTau sigma = (fst • U.returnType) (Sigma.rho sigma)
sigmaTau f (ForAll [] (RhoTau [] ty)) = f ty
sigmaTau f (ForAll [] rhofun) = sigmaTau f (ForAll [] (tauRho rhofun))
sigmaTau f _ = Nothing

niSpecial g ty
     | Just _ <- U.isUnit ty        = true
     | Just _ <- U.isMaybe ty       = true
     | Just _ <- U.isException g ty = true
     | Just _ <- unST ty            = true
     | otherwise = false
 

--- Tells if a native symbol is wrapped 
wrapped g (sym@SymV {nativ = Just item, throwing}) = not (null throwing) || niSpecial g rty
     where
         (rty, _) = U.returnType sym.typ.rho
wrapped g SymV {} = false
wrapped g SymD {} = false
wrapped g _ = error "wrapped: no symv"
 
{--
    Tell if a native function must be called through its wrapper.
  
    This is the case when it is wrapped for some other reason
    than that the return type is 'Maybe'.
  -}
wrappedOnly g (sym@SymV {nativ = Just _, throwing}) 
        = not (null throwing) || niSpecial g rty && isNothing (U.isMaybe rty)
    where
        (rty, _) = U.returnType sym.typ.rho
wrappedOnly g sym = error "wrappedOnly - no native function"
-- 
-- 
--- returns a binding for a direct call of a native method
nativeCall ∷ Global → Symbol → TreeMap String Tau → [JExpr] → Binding
nativeCall g (sym@SymV {nativ = Just item, gargs}) subst aexs = newBind g bsig (call jrty args)
    where
        (rty, sigmas) = U.returnType sym.typ.rho
        taus  = [ tau | Just tau <- map U.sigmaAsTau sigmas ]
        brty  = substIdTau subst (baserty rty)
        bsig  = U.tauAsSigma brty
        targs = map (boxed . tauJT g . substTau subst) gargs 
        args | [tau] <- taus, Just _ <- U.isUnit tau = []   -- no arguments
             | otherwise = zipWith (argEx g)  aexs taus
        bjt  = tauJT g brty
        jrty = strict  bjt
        -- retmode = maxStrict jrty         
        
        argEx g arg tau
             | Just x <- U.isMaybe tau = JQC checknothing (JAtom "null") m1ex
             -- Just x <- arrayTau g tau = JCast x bind.jex
             | otherwise = arg
             where
                 -- sbind = primitiveBind  bind
                 checknothing = JBin con "==" (JAtom "0")
                 con = JInvoke (JX.static "constructor" jtRuntime) [arg]
                 m1ex = JExMem just "mem1" []
                 just = JInvoke (JExMem arg "isJust" []) []
        baserty r
             | Just (_, x) <- unST r       = baserty x
             | Just (_, x) <- U.isException g r = baserty x
             | Just x <- U.isMaybe r       = baserty x
             | Just _ <- U.isUnit r        = r
             | otherwise                   = r
        call jrty args = case niKind item of
             NIOp -> case args of
                 [a,b] -> JBin a item b
                 [a]   -> JUnop item a
                 _     -> JAtom "null"           -- error was flagged before
             NINew -> JNew jrty args
             NICast -> case args of
                 [a] -> JInvoke (JAtom item) args    -- was: JCast (Ref (JName "" item) []) a
                 _   -> JAtom "null"
             NIMethod -> case args of
                 (a:as) -> case item of
                     "clone" -> JCast jrty (JInvoke (JExMem a item []) as) -- due to java brain damage
                     _ -> JInvoke (JExMem a item targs) as
                 _ -> JAtom "null"
             NIMember -> case args of
                 [a] -> (JExMem a (tail item) [])
                 _ -> JAtom "null"
             NINewArray -> JNewArray jrty (head args)
             -- NINewArray -> JNewArray  (Ref (JName "" (niArr item)) []) (head args)
             NIStatic -> case sigmas of
                 (_:_) -> case item =~~ ´^(.+)\.([\w\d\$_]+)$´ of
                        [_, Just qual, Just base] →
                            JInvoke (JX.static base Nativ{typ=qual, gargs=targs}) args
                        _ → JInvoke (JAtom item) args
                 _ -> JAtom item
             NIArrayGet -> case args of
                [a,b] -> JArrayGet a b
                _     -> JAtom "bad array get"      -- error was flaggend before
             NIArraySet -> case args of
                [a,b,c] -> JBin (JArrayGet a b) "=" c
                _     -> JAtom "bad array set"      -- error was flagged before 
nativeCall g sym subst aexs = error ("nativeCall: no function " 
    ++ show sym.pos.first.line
    ++ ", " ++ nicer sym g)
-- 
wrapCode g jreturn rtau (sym@SymV {nativ = Just item, throwing}) subst aexs
    | Just (stau, atau) <- unST rtau = let
            sjt     = tauJT g stau          -- type #1 for parameterization of ST s a
            ajt     = tauJT g atau          -- return type of the ST action
            ssig    = ForAll [] (RhoTau [] stau)
            mktup x = JReturn x
            code    = wrapCode g mktup atau sym subst aexs 
            try     = JBlockX "try" code
            rbody
                | null throwing   = code
                | otherwise = try : catches
                where
                    catches = map mkCatch throwing
                    mkCatch t = JBlockX (catch t) [JThrow wrap]
                    wrap = (JX.invoke [JAtom "ex"] . JX.static "wrapIfNeeded") jtWrapped
                
            ret     = jreturn fun -- (JNew jtFun [mkST])
            fun     = JCast{jt = lambda, 
                            jex = JLambda{
                                fargs = [(attrFinal, ssig, lazy sjt, "_state")], 
                                code  = Right (JBlock rbody)}}
            lambda  = lambdaType Func{gargs = [sjt,ajt]}
        in [ret]
    | Just (exs, mtau) <- U.isException g rtau = let
            jexs    = autoboxed (tauJT g exs)
            jmtau   = autoboxed (tauJT g mtau)   
            code    = wrapCode g (jreturn . right jexs jmtau) mtau sym subst aexs
            try     = JBlockX "try" code
            mkCatch exs go = case U.isException g exs of
                    Just (lty, rty) -> JBlockX (catch rty) r : mkCatch lty (go . left jlty jrty)
                        where
                            jlty = tauJT g lty
                            jrty = tauJT g rty
                            r = [(jreturn . go . right jlty jrty) (JAtom "ex")]
                    Nothing -> [JBlockX (catch exs) [(jreturn . go) $ (JAtom "ex")]]
                    

            -- catch   = JBlockX "catch (Exception ex)" [left]
        in try : reverse ( mkCatch exs (left jexs jmtau))
    | Just atau <- U.isMaybe rtau =  let
                        mkmb  =  JInvoke (JX.static "_toMaybe" base) [bind.jex]
         in [jreturn mkmb]
    | Just _ <- U.isUnit rtau = let
            unit   = JX.static "Unit" tunit
         in [JEx bind.jex, jreturn unit]
    | otherwise = [jreturn (strictBind bind).jex]
    where
        bind    = nativeCall g sym subst aexs     -- no substitutions!
        base    = Nativ "PreludeBase" []
        tunit   = Nativ "PreludeBase.TUnit" []
        tright a b = Nativ "PreludeBase.TEither.DRight" [a,b]
        tleft  a b = Nativ "PreludeBase.TEither.DLeft"  [a,b]
        right a b x = JInvoke (JX.static "mk" (tright a b)) [thunkWhenNeeded b x]
        left  a b x = JInvoke (JX.static "mk" (tleft  a b)) [thunkWhenNeeded a x]
        catch rty = case tauJT g rty of
                        Nativ{typ, gargs} -> "catch (" ++ typ ++ " ex)"
                        other -> error ("bad exception type " ++ show other)        
wrapCode g jreturn rtau sym _ _ = error "wrapCode: no SymV"
 
 
{--
    code for native functions and/or members
  -}
methCode :: Global -> Symbol -> SymInfo8 -> [JDecl]
methCode g (sym@SymV {nativ = Just item}) si = [
        JComment ((nice sym g) ++ "  " ++ show sym.strsig ++ "  " ++ show sym.rkind),
        JComment (nicer sym.typ g),
        JComment item] ++
                (if arity > 0 then defs 
                 else if wrapped g sym || niKind item != NIStatic 
                    then [member]
                    else [])
    where
        rjt         = tauJT g rty
        rArgs       = lambdaArgDef g attrFinal si.argSigs (getArgs g)
        wArgs       = argDefs attrFinal si (getArgs g)
        bnds        = sym.typ.bound
        name        = U.javaName g sym.name                        -- X.foo
        -- fname       = {-U.fName-} name                                 -- X.Ffoo
        ftargs      = targs sym.typ                                -- <a,b,c>
        -- ftype       = (Ref (fname) ftargs)                         -- Ffoo<a,b,c>
        -- dftype      = defining ftype
        args        = if haswrapper then wArgs else rArgs
        haswrapper  = arity > 0 && wrapped g sym -- (not (null bnds))
        -- callWrapper = (toBoxed bndWrapper).jex
        -- bndWrapper  = bndWcode invWrapper
        -- invWrapper  = JInvoke (JX.static name)
        jreturn     = if arity > 0 then JReturn else JEx
        bndWcode  x = newBind g (ForAll [] (RhoTau [] rty))  x
 
        wcode       = if wrapped g sym
                        then wrapCode g jreturn rty sym TreeMap.empty (map (_.jex . instArg g) args)
                        else let
                                bind = nativeCall g sym TreeMap.empty (map (_.jex . instArg g) args)
                            in [jreturn bind.jex]
        wrappers    = if haswrapper then [{- inst, -} wrapper] else [{-inst-}]
        wrapper     = JMethod {attr = attrs [JPublic, JStatic, JFinal],
                                 gvars = ftargs, jtype = si.returnJT, name = name.base,
                                 args = wArgs, body = JBlock wcode}
        defs        = wrappers
        unex  [(JEx x)] = (strictBind (bndWcode x)).jex
        unex  _ = error "unex: need list with 1 ex"
        member = JMember {attr = attrs [JPublic, JStatic, JFinal],
                          jtype = rjt,
                          name = (U.javaName g sym.name).base,
                          init = Just (unex wcode)}
 
        (rty, atys) = U.returnType sym.typ.rho
        arity       = length atys
 
methCode g sym _ = Prelude.error ("line " ++ show sym.pos.first.line 
                    ++ ": can not compile " ++ nice sym g)
         
 

