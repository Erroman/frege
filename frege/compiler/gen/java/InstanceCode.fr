--- Code generation for type classes and instances
module frege.compiler.gen.java.InstanceCode where

import frege.Prelude hiding (<+>)

import Lib.PP (text, <+>)
import Data.TreeMap (values)

import Compiler.Utilities(javaName)

import Compiler.types.AbstractJava
import Compiler.types.Symbols
import Compiler.types.Global
import Compiler.types.Types(Ctx, TVar)

import Compiler.common.Errors as E()
import Compiler.classes.Nice (nice, nicer)

import Compiler.tc.Util(sameCtx)

import Compiler.gen.java.Common

{--
    Code for type classes
  
    - interface @CName@<_a_> where _a_ is the class variable.
    - For each class method, an abstract method is generaed
-}


classCode ∷ Symbol → StG [JDecl]

classCode  (sym@SymC{tau = TVar{var,kind}}) = do           -- type class
     g <- getST
     let vals = values sym.env
     abstrFuns <- mapSt (abstractFun sym) vals
     -- let ivals = filter (isJust • Symbol.expr) (filter Symbol.{expr?} vals) -- default implementations
     -- implFuns <- mapSt (symCode binds) ivals
     -- taujt    <- tauJT sym.tau
     let name  = (javaName g sym.name).base
         gvars = [targ var kind]
         garg  = TArg var
         superclasses = [ Ref (javaName g nm) [garg] | nm <- sym.supers ]
         result = JInterface{attr = attrs [JPublic], 
                            name, gvars, 
                            implement = superclasses, 
                            defs = concat abstrFuns} 
     stio [JComment (nice sym g), result]

--- If given something else than a type class this is a fatal compiler error
classCode sym = do
    g ← getST
    E.fatal sym.pos (
            text "classCode: argument is "
            <+> text (nice sym g) 
        ) 

--- declare abstract class Member function
abstractFun ∷ Symbol → Symbol → StG [JDecl]
abstractFun symc (sym@SymV{}) = do
    g <- getST
    si <- symInfo sym
    let !classCtx = Ctx {pos=symc.pos, 
                        cname = Symbol.name symc, 
                        tau = Symbol.tau symc }
        !ctxs = filter (not . sameCtx classCtx) sym.typ.rho.context

 
    let formalctxs = zipWith (constraintArg g)  ctxs  (getCtxs g)
        lazysi = si.{argJTs <- map lazy} 
        formalargs  = argDefs attrFinal lazysi (getArgs g)
        !cafMeth = null si.argJTs
    let !result = JMethod {attr = attrs [JPublic],
                             gvars = targs sym.typ.{bound ← filter ((!= symc.tau.var) . fst)},
                             jtype = si.returnJT,    
                             name = latinF ++ (javaName g sym.name).base,
                             args = formalctxs ++ formalargs,
                             body = JEmpty}
    pure [JComment ((nicer sym g) ++ " :: " ++ nicer sym.typ g), result]

abstractFun symc symx = do
    g ← getST
    E.fatal symx.pos (
        text "abstractFun: argument is "
            <+> text (nice symx g)
            <+> text " for "
            <+> text (nice symc g) 
        ) 
