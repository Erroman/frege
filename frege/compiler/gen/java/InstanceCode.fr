--- Code generation for type classes and instances
module frege.compiler.gen.java.InstanceCode where

import frege.Prelude hiding (<+>)

import Lib.PP (text, <+>, </>)
import Data.TreeMap as Map(values, lookup, insert, TreeMap)
import Data.List(zip4)

import Compiler.Utilities(symJavaName, javaName, findC, findV, forceTau, returnType)

import Compiler.enums.Flags(TRACEG)
import Compiler.enums.TokenID(VARID)

import Compiler.types.AbstractJava
import Compiler.types.Symbols
import Compiler.types.Global
import Compiler.types.Types(Ctx, TVar, Tau, SigmaT, pSigma)
import Compiler.types.Expression
import Compiler.types.Kinds(Kind)
import Compiler.types.QNames(QName)

import Compiler.common.Errors as E()
import Compiler.common.Types  as CT(substIdSigma, substSigma, substRho, substTau, tauRho)
import Compiler.common.Binders(allBinders)
import Compiler.classes.Nice (nice, nicer)

import Compiler.tc.Util(sameCtx)

import Compiler.gen.java.Common
import Compiler.gen.java.Bindings(newBind)
import Compiler.gen.java.VarCode(varCode, compiling, genExpression)

{--
    Code for type classes
  
    - interface @CName@<_a_> where _a_ is the class variable.
    - For each class method, an abstract method is generaed
-}


classCode ∷ Symbol → StG [JDecl]

classCode  (sym@SymC{tau = TVar{var,kind}}) = do           -- type class
     g <- getST
     let vals = values sym.env
     abstrFuns <- mapSt (abstractFun sym) vals
     let name  = (symJavaName g sym).base
         gvars = [targ var kind]
         garg  = TArg var
         superclasses = [ Ref (javaName g nm) [garg] | nm <- sym.supers ]
         result = JInterface{attr = attrs [JPublic], 
                            name, gvars, 
                            implement = superclasses, 
                            defs = concat abstrFuns} 
     stio [JComment (nice sym g), result]

--- If given something else than a type class this is a fatal compiler error
classCode sym = do
    g ← getST
    E.fatal sym.pos (
            text "classCode: argument is "
            <+> text (nice sym g) 
        ) 

--- declare abstract class Member function
abstractFun ∷ Symbol → Symbol → StG [JDecl]
abstractFun symc (sym@SymV{}) = do
    g <- getST
    si <- symInfo sym
    let !classCtx = Ctx {pos=symc.pos, 
                        cname = Symbol.name symc, 
                        tau = Symbol.tau symc }
        !ctxs = filter (not . sameCtx classCtx) sym.typ.rho.context

 
    let formalctxs = zipWith (constraintArg g)  ctxs  (getCtxs g)
        lazysi = si.{argJTs <- map lazy} 
        formalargs  = argDefs attrFinal lazysi (getArgs g)
        !cafMeth = null si.argJTs
    let !result = JMethod {attr = attrs [JPublic],
                             gvars = targs sym.typ.{bound ← filter ((!= symc.tau.var) . fst)},
                             jtype = (tauJT g . fst . returnType . _.{context=ctxs} . _.rho) sym.typ,    
                             name = latinF ++ (symJavaName g sym).base,
                             args = formalctxs ++ formalargs,
                             body = JEmpty}
    pure [JComment ((nicer sym g) ++ " :: " ++ nicer sym.typ g), result]

abstractFun symc symx = do
    g ← getST
    E.fatal symx.pos (
        text "abstractFun: argument is "
            <+> text (nice symx g)
            <+> text " for "
            <+> text (nice symc g) 
        ) 


{--
     Code for instances

    > instance (Pre1 x, Pre2 y) => C (T x y)

    Compiles to a class that implements the interface generated for the class (in 'classCode').

    If there are constraints, the relevant instances must be passed on 
    construction of this one, otherwise, we have a singleton class, i.e.

    > instance Eq Int where ....
    > instance Eq a => Eq (Maybe a) where ...

    becomes

    > class Eq_Int implements CEq<Integer> {
    >        final public Eq_Int it = new Eq_Int();       // singleton
    >        ...
    > }
    > class Eq_Maybe<A> implements CEq<TMaybe<A>> {
    >
    >     public Eq_Maybe(CEq<A> ctx) { ... }
    > }  
-}
instanceCode (sym@SymI {sid}) = do             -- instance definition
     g <- getST
     csym <- findC sym.clas
 
     let classes = sym.clas:csym.supers
         -- the functions we must provide in the instance
         superMethods = [ m.name.base | c <- classes,
                                   SymC{env} <- g.findit c,
                                   m@SymV{}  <- values env ]
         -- links in types that point to instance members of this class and its superclasses
         -- The goal is to have (links to) implementations of all super class methods. 
         methods2 = case instTSym (Symbol.typ sym) g of
              Just (tsym@SymT {pos}) -> [ alias |
                                SymL {name, alias} <- values tsym.env, alias.{tynm?},    -- links
                                alias `notElem` methods1,                 -- avoid duplicates
                                alias.base `elem` superMethods,           -- mentioning one of our methods
                                name.base `notElem` map QName.base methods1,
                                SymI {clas} <- g.findit alias.tynm, -- pointing to an instance
                                SymC {supers} <- g.findit clas,     -- of a class that is in our hierarchy
                                clas `elem` classes || any (`elem` classes) supers]
              _ -> error "unexpexted result from instTSym"
         methods1 = map Symbol.name (values sym.env)
         -- methods of super classes that are implemented in the type itself
         methods3 = case instTSym (Symbol.typ sym) g of
            Just (tsym@SymT {pos}) -> [ sym.name |
                                 sym  <- values tsym.env,
                                 sym.name.base `elem` superMethods,
                                 sym.name.base `notElem` methods] where
                        methods = map QName.base (methods1++methods2)
            _ -> error "unexpexted result from instTSym" 
         methods  = methods1 ++ methods2 ++ methods3
 
     let vals = values sym.env
 
     instFuns  <- mapM (instFun csym sym) methods
     instImpls <- mapM (varCode empty) vals
     let constraints = zipWith (constraintDef g)  sym.typ.rho.context (getCtxs g)
         constrargs  = zipWith (constraintArg g)  sym.typ.rho.context (getArgs g)
 
 
     let instName = symJavaName g sym
         instjt   = case kArity csym.tau.kind of
                        0 → t
                        k → asKinded t k
                    where t = boxed (rhoJT g sym.typ.rho.{context=[]})
         jtype = Ref instName []
         etype = Ref (symJavaName g csym)  [instjt]
         constructor = JConstr {attr = attrs [JPublic],
                                 jtype = jtype,  
                                 args = constrargs,
                                 body = JBlock (take (length constraints)
                                                 (zipWith JAssign
                                                     (map JAtom (getCtxs g))
                                                     (map JAtom (getArgs g))))}

         singleton
            | null constrargs = [JMember{attr = attrTop, jtype, name="it", 
                init = Just (JNew jtype [])}]
            | otherwise = [] 
         result = JClass {attr = attrs [JPublic, JFinal, JStatic], 
                          name = instName.base,
                          gvars = targs sym.typ,
                          extend = Nothing,
                          implement = [etype],
                          defs = (constructor : constraints)
                             ++ singleton
                             ++ instFuns
                             ++ concat instImpls}
     pure [JComment (nice sym g ++ " :: " ++ nice sym.typ g), result]

--- If given something else than a type class this is a fatal compiler error
instanceCode sym = do
    g ← getST
    E.fatal sym.pos (
            text "instanceCode: argument is "
            <+> text (nice sym g) 
        ) 

instFun :: Symbol → Symbol → QName → StG JDecl
instFun symc symi mname = do
        g       ←  getST
        sym     ←  findV mname
        let classnames = symc.name:symc.supers
            cmems = [ m | cln ← classnames, SymC{env} ← g.findit cln, 
                            m ← env.lookupS mname.base ]
        case cmems of
            [] → E.fatal symi.pos (text "trying to instFun " <+> text (nicer mname g)
                        <+> text " but no class member found.")
            cmem:_ → do 
                -- replace symc with class where method was introduced
                symc ← findC cmem.name.tynm
                E.logmsg TRACEG symi.pos (text "instFun" <+> text (nicer sym g)
                    <+> text "for" <+> text (nicer cmem g))
                -- We need to tweek the types a bit so that java type variables won't conflict.
                -- hypothetical scenario
                -- class C a where
                --     op :: forall a b c. (C a, X b) => a -> b -> c
                -- instance Y b => C (T a b)
                --     op :: forall a b c d. (X c, Y b) => T a b -> c -> d
                -- 1. rename all type variables in C.op that also occur in the instance head
                --     op :: forall x y c. (C x, X y) => x -> y -> c
                -- 2. rename also the class variable
                --     x
                -- 3. remove the class context and the class variable from bounds of (1)
                --     op :: forall y c. (X y) => x -> y -> c
                -- 4. substitute the type for renamed class variable in (3) and add the type vars
                --     op :: forall a b y c. (X y) => T a b -> y -> c
                -- 5. prepend the additional constraints to the ones in (4)
                --     op :: forall a b y c. (Y b, X y) => T a b -> y -> c
                E.logmsg TRACEG symi.pos (
                        text (nicer sym.name g) <+> text " :: " <+> text (nicer sym.typ g)
                        </> text (nicer cmem.name g) <+> text " :: " <+> text (nicer cmem.typ g)
                    )
                let otvs = filter ((`elem` symi.typ.vars) . Tau.var) (cmem.typ.tvars cmem.pos)
                    orep = filter (`notElem` symi.typ.vars) (allBinders g)
                    varSubst :: [Tau] -> TreeMap String Tau
                    varSubst xs = fold (\t\v -> insert v.var v t) empty xs
                    substBound :: TreeMap String Tau -> [(String, Kind)] -> [(String, Kind)]
                    substBound subst xs = map (\(s,k) -> (maybe s _.var (lookup s subst),k)) xs
                    subst1 = Map.fromList [ (tv.var, tv.{var=s}) | (s,tv) ← zip orep otvs]
                    typ1 = ForAll (substBound subst1 cmem.typ.bound) (substRho subst1 cmem.typ.rho)
                E.logmsg TRACEG symi.pos (
                        text "(1) renamed type :: "
                        <+> text (nicer typ1 g)
                    )

                let cvar = substTau subst1 symc.tau
                E.logmsg TRACEG symi.pos (
                        text "(2) class var is now " <+> text (nicer cvar g)
                    )
                
                let classCtx = Ctx {pos=symc.pos, 
                                    cname = symc.name, 
                                    tau = cvar }
                    ctxs = filter (not . sameCtx classCtx) typ1.rho.context
                    rho3 = typ1.rho.{context = ctxs}
                    typ3  = ForAll (filter ((!=cvar.var) . fst) typ1.bound) rho3
                E.logmsg TRACEG symi.pos (
                        text "(3) removed class var and class context from (1) :: "
                        <+> text (nicer typ3 g)
                    )

                let instTau = (tauRho symi.typ.rho.{context=[]}).tau
                    subst4 = Map.singleton cvar.var instTau
                    methty = substIdSigma subst4 typ3
                E.logmsg TRACEG symi.pos (
                        text "(4) substituted instantiated typ into (3) :: "
                        <+> text (nicer methty g)
                    )

                let fakety = methty.{
                                bound ← (symi.typ.bound ++),  -- make sure ctx will be recognized
                                rho ← _.{context ← (symi.typ.rho.context++)}}
                E.logmsg TRACEG symi.pos (
                        text "(5) added extra contexts to (4), final type :: "
                        <+> text (nicer fakety g)
                    )

                let (ret, sigs) = returnType methty.rho
                    ari = length sigs
                    retJT
                        | Just _  ← isPrimitive t,
                          Nothing ← isPrimitive o  = boxed t
                        | otherwise = t
                        where
                            t = tauJT g ret
                            o = (tauJT g . fst . returnType) typ3.rho

                -- build & compile expression
                uids ← replicateM ari uniqid
                let args = take ari (getArgs g)
                    atoms = map JAtom args
                    vbls = [ Vbl{pos=symi.pos.change VARID base, name=Local{uid, base}, typ=Just typ} 
                                | (uid,typ,base) ← zip3 uids sigs args]
                    fun = Vbl{pos=symi.pos.change VARID sym.name.base, name=sym.name, 
                                typ = Just methty.{bound=[]}}
                    ex = fold app fun vbls
                        where app a b = App{fun=a, arg=b, typ=fmap (reducedSigma g) a.typ}
                    mt = lambdaType (sigmaJT g methty.{bound=[]})
                    binds = Map.fromList [(uid, (newBind g sig atom).{jtype=jt})
                                | (uid, sig, atom, jt) ← zip4 uids sigs atoms (withoutConstr mt).gargs ]
                result ← compiling sym.{typ=fakety} (genExpression true strict ex binds)
                
                -- finally make the function
                pure JMethod{attr =attrs [JPublic, JFinal, JOverride], 
                            gvars = targs methty, 
                            jtype = retJT, 
                            name = latinF ++ (symJavaName g sym).base, 
                            args = [(attrFinal, pSigma, ctxJT g ctx, name) 
                                       | (ctx,name) ← zip methty.rho.context 
                                                          (drop (length symi.typ.rho.context) 
                                                                (getCtxs g)) ]
                                    ++ [(attrFinal, pSigma, jt, name)
                                        | (jt,name) ← zip (withoutConstr mt).gargs args], 
                            body = JBlock{stmts=[JReturn result.jex]}}
