--- support for 'Decimal' numbers

module frege.data.Dec64 
    -- inline (minCoefficient, maxCoefficient)
    where


import frege.Prelude hiding (>>)
import Data.Bits

(<<) = shiftL
(>>) = shiftR
(>>>) = ushiftR
(&)   = (.&.)



divu10 :: Long -> Long
divu10 n = result
    where
        -- n       = arg + ((arg `shiftR` 63) & 9)
        q'      = (n >> 1) + (n >> 2)
        q''     = q' + (q' >> 4)
        q'''    = q'' + (q'' >> 8)
        q''''   = q''' + (q''' >> 16)
        q'''''  = q'''' + (q'''' >> 32)
        q       = q''''' >> 3
        r       = n - (q << 3) - (q << 1)
        result  = q + ((r+6) >> 4)



{-

    int remu10(unsigned n) {
        static char table[16] = {0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 0};
        n = (0x19999999*n + (n >> 1) + (n >> 3)) >> 28;
        return table[n];
    }

-}

remu10 :: Long -> Long
remu10 n = (0x0988776554332210L >> (i.int<<2)) & 0x0fL
    where
        i = (0x1999999999999999L*n + (n>>>1) + (n>>>3)) >>> 60

crudeShow :: Decimal → String
crudeShow d | d.isNaN = "NaN"
            | d.exponent == 0 = show d.coefficient
            | otherwise = show d.coefficient ++ "e" ++ show d.exponent

parseDecimal s = case s of
    m~'^(-)?(\d+)(\.\d+)?([eE]([+-]?)(\d+))?$' → let
                minus = maybe false (=="-") (m.group 1)
                sign  = if minus then (-1L) else 1L
                ipart = fromMaybe "?" (m.group 2)           -- must be there, since no ?
                fpart = maybe "" tail (m.group 3)           -- skip '.' if there at all
                esign = case m.group 5 of
                    Just "-" → (-1)
                    Just "+" → 1
                    nothing  → 1
                epart = maybe (Right 0) String.int (m.group 6)
            in case ipart.replaceFirst '^0*' "" of                              -- cut leading 0 
                ipart -> case fpart.replaceFirst '0*$' "" of                    -- cut trailing 0
                    fpart -> case ipart of
                                ""  | null fpart = Right Decimal.zero
                                _   = do                            -- we have abc.000xyz
                                        e ← epart
                                        let effe = e * esign - length fpart
                                        co ← (ipart ++ fpart).long
                                        let ecoff = co * sign
                                        if ecoff > Decimal.maxCoefficient 
                                            then Left (NumberFormatException.new "coefficient too big")
                                        else if ecoff < Decimal.minCoefficient
                                            then Left (NumberFormatException.new "coefficient too small")
                                        else if effe > Decimal.maxExponent
                                            then Left (NumberFormatException.new "exponent too big")
                                        else if effe < Decimal.minExponent
                                            then Left (NumberFormatException.new "exponent too small")
                                        else pure (Decimal.pack (co*sign) effe)
    _ → Left (NumberFormatException.new ("'" ++ s ++  "'" ++ "  doesn't match  ^(-)?(\\d+)(\\.\\d+)?([eE]([+-]?)(\\d+))?$"))
                                