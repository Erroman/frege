{-- 'https://github.com/Frege/frege/issues/273 Issue 273'

    Problem: functions don't type check, because the higher ranked
    function argument gets stuffed into a tuple for pattern matching by desugaring.

    Desugaring can't make it right in the first place since there may be 
    constructors whose arity we don't know yet.

    Solution: Compile the tuple pattern matches *before* type checking.
-}

module tests.comp.Issue273 where

gfoldl :: (forall d b. Maybe (d -> b) -> d -> Maybe b)
         -> (forall g. g -> Maybe g)
         -> [a]
         -> Maybe [a]


gfoldl f z []     = z []
-- gfoldl f z (y:ys) = (z (:) `f` y)
--                   ^^^^^^^^^^^ 
--                        `f` ys
--                          ^^

foo :: (forall a b.[a] → [b]) -> [c] -> [d] -> ([e],[f])
foo f [] ys = ([], f ys)
-- foo f xs [] = (f xs, [])
--             ^^^^^^^^


bar (Just x) false = "no"
bar _        true  = "yes"

main = println (bar (Just 42) true)

baz [] [] = 1
--baz [] (x:xs) false = 2
--baz [] (x:xs) true  = 2
--baz (x:xs) ys true = 4
baz xs ys = 3

baz' u1 u2  = case u1 of
    [] → case u2 of
        [] → 1
        _  → e2
    _ → e2
    where e2 = 2

    
