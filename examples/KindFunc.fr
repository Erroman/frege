--- Generate runtime code
module examples.KindFunc where

import Compiler.common.Mangle
import Compiler.common.Binders
import Compiler.types.AbstractJava
import Compiler.gen.java.PrettyJava public()
import Compiler.gen.java.Common hiding (wilds)
import Compiler.gen.java.DataCode(coerceDecl)
import Lib.PP(prettyIO)
import Compiler.common.Annotate
import Compiler.types.Types(pSigma)

kinds = JClass{attr= attrs [JPublic],
            name = "Kind", 
            gvars = [], 
            extend = Nothing, 
            implement = [], 
            defs = map mkkind [1..27]}

mkkind n = JInterface{attr = attrs [JPublic], 
            name = romanUpper n, 
            gvars = tcon : take n tyvars, 
            implement = [], 
            defs = []}

tcon = JTVar "ùêì" UNBOUNDED
wild = TArg "?"
wilds  = repeat wild
tyargs = [ TArg{var} | var <- jtvNames ]
tyvars = [ JTVar{var, bounds = UNBOUNDED} | var <- jtvNames ] 
func n = Func{gargs=take (n+1) tyargs} -- Func{gargs=take n tyargs, yields=tret}

funcs = JClass{attr= attrs [JPublic], 
            name="Func", gvars = [], 
            extend = Nothing, 
            implement = [], 
            defs = map mkfunc [1..26] ++
                [ (coerceDecl (take (n+1) tyvars) kt).{name ‚Üê (++ romanUpper n)} 
                    |  n    ‚Üê [1..26],
                       ft   = func n,
                       kt   ‚Üê map (asKinded ft) [1..(n+1)],
                ]}

mkfunc n = JInterface{attr = attrs [JPublic],
            name = romanUpper n,
            gvars = take (n+1) tyvars, 
            implement = map (asKinded ft) [1..(n+1)], 
            defs = [mkapply n]}
    where
        -- VI<A,B,C,D,E,F>
        ft = func n

mkapply n = JMethod{
                attr = attrs [JPublic], 
                gvars = [], 
                jtype = head (drop n tyargs), 
                name  = "apply", 
                args  = [ (attrs [JFinal], pSigma, jt, nm) | 
                            (jt, nm) <- zip (take n tyargs) allAsciiBinders], 
                body   = JEmpty}

main :: [String] -> IO Bool
main [what]  
    | what == "kind" = make kinds
    | what == "func" = make funcs
main _ = stderr.println "usage: java examples.KindFunc [kind|func]" >> return false

make it =  do
    println "package frege.run;"
    println ""
    PP.prettyIO stdout 96 (anno it)
    println ""
    return true
