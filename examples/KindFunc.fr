--- Generate runtime code
module examples.KindFunc where

-- import Compiler.common.Mangle
import Compiler.common.Roman
import Compiler.common.Binders
import Compiler.types.AbstractJava
import Compiler.gen.java.PrettyJava public()
import Compiler.gen.java.Common hiding (wilds)
import Compiler.gen.java.DataCode(coerceDecl)
import Lib.PP(prettyIO)
import Compiler.common.AnnotateG(annoG)
import Compiler.gen.java.PrettyJava(fakeGlobal)
import Compiler.types.Types(pSigma)

kinds = JClass{attr= attrs [JPublic],
            name = "Kind", 
            gvars = [], 
            extend = Nothing, 
            implement = [], 
            defs = map mkkind [1..27]}

mkkind n = JInterface{attr = attrs [JPublic], 
            name = romanUpper n, 
            gvars = tcon : take n tyvars, 
            implement = [], 
            defs = []}

tcon = JTVar "ùêì" UNBOUNDED
wild = TArg "?"
wilds  = repeat wild
tyargs = [ TArg{var} | var <- jtvNames ]
tyvars = [ JTVar{var, bounds = UNBOUNDED} | var <- jtvNames ] 
func n = Func{gargs=take (n+1) tyargs} -- Func{gargs=take n tyargs, yields=tret}

funcs v = JClass{attr= attrs [JPublic], 
            name="Func", gvars = [], 
            extend = Nothing, 
            implement = [], 
            defs = map (mkfunc v) [1..26] ++
                [ (coerceDecl (take (n+1) tyvars) kt).{name ‚Üê (++ romanUpper n)} 
                    |  n    ‚Üê [1..26],
                       ft   = func n,
                       kt   ‚Üê map (asKinded ft) [1..(n+1)],
                ]}

mkfunc v n = JInterface{attr,
            name = romanUpper n,
            gvars = take (n+1) tyvars, 
            implement = Lazy ft : map (asKinded ft) [1..(n+1)], 
            defs = [mkapply n, mkcall v ft, mkshared v] ++ deflt}
    where
        -- VI<A,B,C,D,E,F>
        attr
            | v == 8    =  attrs [JPublic, JFunctionalInterface]
            | otherwise =  attrs [JPublic]
        ft = func n
        deflt 
            | v == 8    = []
            | otherwise = pure JClass{
                attr = attrs [JPublic, JStatic, JAbstract], 
                name = "D", 
                gvars = take (n+1) tyvars, 
                extend = Nothing, 
                implement = [ft], 
                defs = [
                        (mkcall 8 ft).{attr = attrs [JPublic]},
                        (mkshared 8).{attr = attrs [JPublic]},
                        mkAsThunk ft,
                        (mkapply n).{attr = attrs [JAbstract, JPublic]},
                    ]
              }

mkAsThunk ft = JMethod {
        attr = attrs [JPublic],
        gvars = [],
        jtype = inThunk ft,
        name  = "asThunk",
        args = [],
        body = JBlock [JReturn (JAtom "null")]
    }

mkcall v ft = JMethod{
                attr = if v == 7 then attrs [JPublic] else attrs [JPublic, JDefault], 
                gvars = [], 
                jtype = ft, 
                name = "call", 
                args = [], 
                body = if v == 7 then JEmpty else JBlock [JReturn (JAtom "this")]}

mkshared v = JMethod{
                attr = if v == 7 then attrs [JPublic] else attrs [JPublic, JDefault], 
                gvars = [], 
                jtype = nativ "boolean" [],
                name = "isShared", 
                args = [], 
                body = if v == 7 then JEmpty else JBlock [JReturn (JAtom "true")]}

mkapply n = JMethod{
                attr = attrs [JPublic], 
                gvars = [], 
                jtype = lazy (head (drop n tyargs)), 
                name  = "apply", 
                args  = [ (attrs [JFinal], pSigma, Lazy jt, nm) | 
                            (jt, nm) <- zip (take n tyargs) allAsciiBinders], 
                body   = JEmpty}

main :: [String] -> IO Bool
main [what]  
    | what == "kind" = make "" kinds
    | what == "func" = make "8" (funcs 8)
    | what == "func7" = make "7" (funcs 7)
main _ = stderr.println "usage: java examples.KindFunc [kind|func|func7]" >> return false

make v it =  do
    println ("package frege.run" ++ v ++ ";")
    unless (null v) do
        println "import frege.run.Kind;"
        println ("import frege.run" ++ v ++ ".Lazy;") 
    println ""
    PP.prettyIO stdout 96 (annoG fakeGlobal it)
    println ""
    return true
