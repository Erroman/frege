--- Generate runtime code
module examples.KindFunc where

import Compiler.common.Mangle
import Compiler.common.Binders
import Compiler.gen.java.Basics
import Compiler.gen.java.Common
import Lib.PP(prettyIO)
import Compiler.common.Annotate
import Compiler.types.Types(pSigma)

kinds = JClass{attr= attrs [JPublic],
            name = "Kind", 
            gvars = [], 
            extend = Nothing, 
            implement = [], 
            defs = map mkkind [1..26]}

mkkind n = JInterface{attr = attrs [JPublic], 
            name = romanUpper n, 
            gvars = tcon : take n tyvars, 
            implement = [], 
            defs = []}

tcon = JTVar "ùëá" UNBOUNDED
tret = TArg "ùëÖ"
wild = TArg "?"
wilds  = repeat wild
tyargs = [ TArg{var} | var <- jtvNames ]
tyvars = [ JTVar{var, bounds = UNBOUNDED} | var <- jtvNames ] 

funcs = JClass{attr= attrs [JPublic], 
            name="Func", gvars = [], 
            extend = Nothing, 
            implement = [], 
            defs = map mkfunc [1..25]}

{--
    > jtype `asKind` ƒ∏
    Create higher kind representation of a java type for kinds with ƒ∏ arrows.

    A type with higher kinded type constructor, like 'Maybe', (->) or 
    [] will be mapped to a Java generic type.
    
    > Maybe Int ‚áí TMaybe<java.lang.Integer>
    
    This is fine as long as we don't need to abstract over the type constructor.
    In that case we use another representation:
    
    > Maybe a       ‚áí Kind.U<TMaybe<?>, A>
    > Either a b    ‚áí Kind.B<TEither<?,?>, A, B>
    >               ‚áí Kind.U<TEither<A,?>, B>
    
    It so happens that every type with a type constructor of kind ƒ∏ (ƒ∏ > 0),
    where ƒ∏ is the arity of the kind 
    (i.e. how many type arguments to supply before we reach type of kind \*), 
    implements the @Kind@ interfaces 1..ƒ∏ and thus can be passed to functions
    that expect a higher kinded type like:
    
    > fmap ‚à∑ Functor f ‚áí (a ‚Üí b) ‚Üí f a ‚Üí f b
    
    which reads in Java as:
    
    > public <F extends Kind.U<F,?>, A, B>
    >    Kind.U<F, B> fmap(CFunctor<F>, Func.U<A,B>, Kind.U<F,A>)
-}
asKind ‚à∑ JType ‚Üí Int ‚Üí JType
asKind jt n
    | jt.{gargs?},
      length jt.gargs >= n
                     = kind n jt.gargs
    | otherwise      = error ("type does not have kind %d: %s".format n (show jt))               -- a type without type arguments
    where
        kind n args = Kinded n (ft:rargs)
            where
                nargs = length args
                ws    = take n wilds        -- n wildcards "?"
                -- replace trailing n type args with "?"
                ft    = jt.{gargs <- (++ws) . take (nargs-n) }
                rargs = drop (nargs - n) jt.gargs  

mkfunc n = JInterface{attr = attrs [JPublic],
            name = ft.typ,
            gvars = take (n+1) tyvars, 
            implement = map (asKind ft) [1..(n+1)], 
            defs = [mkapply n]}
    where
        -- VI<A,B,C,D,E,F>
        ft = Nativ{typ = romanUpper n, gargs = take (n+1) tyargs}

mkapply n = JMethod{
                attr = attrs [JPublic], 
                gvars = [], 
                jtype = (lazy . last . (take (n+1))) tyargs, 
                name  = "apply", 
                args  = [ (attrs [JFinal], pSigma, lazy jt, nm) | 
                            (jt, nm) <- zip (take n tyargs) allAsciiBinders], 
                body   = JEmpty}

main :: [String] -> IO Bool
main [what]  
    | what == "kind" = make kinds
    | what == "func" = make funcs
main _ = stderr.println "usage: java examples.KindFunc [kind|func]" >> return false

make it =  do
    println "package frege.run;"
    println ""
    PP.prettyIO stdout 96 (anno it)
    println ""
    return true
