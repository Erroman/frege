module examples.MoreTailCall where

import Data.List (isPrefixOf)

match  ::  Int -> [Int] -> [Int] ->  Bool 
match n list1 list2 = match1 (take n (cycle [1,1,2,2,2])) where

    match1 [] = true
    -- stackoverflow when not optimized
    -- match1 list | list1 `isPrefixOf` list = match2 $ drop (length list1) list
    match1 list | list1 `isPrefixOf` list = match2 (drop (length list1) list)
    match1 _  =  false

    match2 []  =  false 
    -- stackoverflow when not optimized
    -- match2 list | list2 `isPrefixOf` list = match1 $ drop (length list2) list
    match2 list | list2 `isPrefixOf` list = match1 (drop (length list2) list)
    match2 _  =  false

--- should print true if argument is divisible by 5
main [arg@ '^\d+$'] = println (match (atoi arg) [1,1] [2,2,2])
main _ = stderr.println "usage: java -cp ... examples.MoreTailCall integer" 
